"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Subscription:
    r"""
    Subscription routes events received on a Channel to a DNS name and corresponds to the subscriptions.channels.knative.dev CRD.

    Attributes
    ----------
    apiVersion : str, default is "messaging.knative.dev/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Subscription", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MessagingKnativeDevV1SubscriptionSpec, default is Undefined, optional
        spec
    status : MessagingKnativeDevV1SubscriptionStatus, default is Undefined, optional
        status
    """


    apiVersion: "messaging.knative.dev/v1" = "messaging.knative.dev/v1"

    kind: "Subscription" = "Subscription"

    metadata?: v1.ObjectMeta

    spec?: MessagingKnativeDevV1SubscriptionSpec

    status?: MessagingKnativeDevV1SubscriptionStatus


schema MessagingKnativeDevV1SubscriptionSpec:
    r"""
    messaging knative dev v1 subscription spec

    Attributes
    ----------
    channel : MessagingKnativeDevV1SubscriptionSpecChannel, default is Undefined, optional
        channel
    delivery : MessagingKnativeDevV1SubscriptionSpecDelivery, default is Undefined, optional
        delivery
    reply : MessagingKnativeDevV1SubscriptionSpecReply, default is Undefined, optional
        reply
    subscriber : MessagingKnativeDevV1SubscriptionSpecSubscriber, default is Undefined, optional
        subscriber
    """


    channel?: MessagingKnativeDevV1SubscriptionSpecChannel

    delivery?: MessagingKnativeDevV1SubscriptionSpecDelivery

    reply?: MessagingKnativeDevV1SubscriptionSpecReply

    subscriber?: MessagingKnativeDevV1SubscriptionSpecSubscriber


schema MessagingKnativeDevV1SubscriptionSpecChannel:
    r"""
    Reference to a channel that will be used to create the subscription. You can specify only the following fields of the KReference: kind, apiVersion, name and namespace. The resource pointed by this KReference must meet the contract to the ChannelableSpec duck type. If the resource does not meet this contract it will be reflected in the Subscription's status.  This field is immutable. We have no good answer on what happens to the events that are currently in the channel being consumed from and what the semantics there should be. For now, you can always delete the Subscription and recreate it to point to a different channel, giving the user more control over what semantics should be used (drain the channel first, possibly have events dropped, etc.)

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema MessagingKnativeDevV1SubscriptionSpecDelivery:
    r"""
    Delivery configuration

    Attributes
    ----------
    backoffDelay : str, default is Undefined, optional
        BackoffDelay is the delay before retrying. More information on Duration format: - https://www.iso.org/iso-8601-date-and-time-format.html - https://en.wikipedia.org/wiki/ISO_8601  For linear policy, backoff delay is backoffDelay*<numberOfRetries>. For exponential policy, backoff delay is backoffDelay*2^<numberOfRetries>.
    backoffPolicy : str, default is Undefined, optional
        BackoffPolicy is the retry backoff policy (linear, exponential).
    deadLetterSink : MessagingKnativeDevV1SubscriptionSpecDeliveryDeadLetterSink, default is Undefined, optional
        dead letter sink
    retry : int, default is Undefined, optional
        Retry is the minimum number of retries the sender should attempt when sending an event before moving it to the dead letter sink.
    """


    backoffDelay?: str

    backoffPolicy?: str

    deadLetterSink?: MessagingKnativeDevV1SubscriptionSpecDeliveryDeadLetterSink

    retry?: int


schema MessagingKnativeDevV1SubscriptionSpecDeliveryDeadLetterSink:
    r"""
    DeadLetterSink is the sink receiving event that could not be sent to a destination.

    Attributes
    ----------
    CACerts : str, default is Undefined, optional
        Certification Authority (CA) certificates in PEM format that the source trusts when sending events to the sink.
    audience : str, default is Undefined, optional
        Audience is the OIDC audience. This only needs to be set if the target is not an Addressable and thus the Audience can't be received from the target itself. If specified, it takes precedence over the target's Audience.
    ref : MessagingKnativeDevV1SubscriptionSpecDeliveryDeadLetterSinkRef, default is Undefined, optional
        ref
    uri : str, default is Undefined, optional
        URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
    """


    CACerts?: str

    audience?: str

    ref?: MessagingKnativeDevV1SubscriptionSpecDeliveryDeadLetterSinkRef

    uri?: str


schema MessagingKnativeDevV1SubscriptionSpecDeliveryDeadLetterSinkRef:
    r"""
    Ref points to an Addressable.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema MessagingKnativeDevV1SubscriptionSpecReply:
    r"""
    Reply specifies (optionally) how to handle events returned from the Subscriber target.

    Attributes
    ----------
    CACerts : str, default is Undefined, optional
        Certification Authority (CA) certificates in PEM format that the source trusts when sending events to the sink.
    audience : str, default is Undefined, optional
        Audience is the OIDC audience. This only needs to be set if the target is not an Addressable and thus the Audience can't be received from the target itself. If specified, it takes precedence over the target's Audience.
    ref : MessagingKnativeDevV1SubscriptionSpecReplyRef, default is Undefined, optional
        ref
    uri : str, default is Undefined, optional
        URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
    """


    CACerts?: str

    audience?: str

    ref?: MessagingKnativeDevV1SubscriptionSpecReplyRef

    uri?: str


schema MessagingKnativeDevV1SubscriptionSpecReplyRef:
    r"""
    Ref points to an Addressable.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema MessagingKnativeDevV1SubscriptionSpecSubscriber:
    r"""
    Subscriber is reference to (optional) function for processing events. Events from the Channel will be delivered here and replies are sent to a Destination as specified by the Reply.

    Attributes
    ----------
    CACerts : str, default is Undefined, optional
        Certification Authority (CA) certificates in PEM format that the subscription trusts when sending events to the sink.
    audience : str, default is Undefined, optional
        Audience is the OIDC audience. This only needs to be set if the target is not an Addressable and thus the Audience can't be received from the target itself. If specified, it takes precedence over the target's Audience.
    ref : MessagingKnativeDevV1SubscriptionSpecSubscriberRef, default is Undefined, optional
        ref
    uri : str, default is Undefined, optional
        URI can be an absolute URL(non-empty scheme and non-empty host) pointing to the target or a relative URI. Relative URIs will be resolved using the base URI retrieved from Ref.
    """


    CACerts?: str

    audience?: str

    ref?: MessagingKnativeDevV1SubscriptionSpecSubscriberRef

    uri?: str


schema MessagingKnativeDevV1SubscriptionSpecSubscriberRef:
    r"""
    Ref points to an Addressable.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is optional field, it gets defaulted to the object holding it if left out.
    """


    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema MessagingKnativeDevV1SubscriptionStatus:
    r"""
    messaging knative dev v1 subscription status

    Attributes
    ----------
    annotations : any, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
    auth : MessagingKnativeDevV1SubscriptionStatusAuth, default is Undefined, optional
        auth
    conditions : [MessagingKnativeDevV1SubscriptionStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.
    physicalSubscription : MessagingKnativeDevV1SubscriptionStatusPhysicalSubscription, default is Undefined, optional
        physical subscription
    """


    annotations?: any

    auth?: MessagingKnativeDevV1SubscriptionStatusAuth

    conditions?: [MessagingKnativeDevV1SubscriptionStatusConditionsItems0]

    observedGeneration?: int

    physicalSubscription?: MessagingKnativeDevV1SubscriptionStatusPhysicalSubscription


schema MessagingKnativeDevV1SubscriptionStatusAuth:
    r"""
    Auth provides the relevant information for OIDC authentication.

    Attributes
    ----------
    serviceAccountName : str, default is Undefined, optional
        ServiceAccountName is the name of the generated service account used for this components OIDC authentication.
    serviceAccountNames : [str], default is Undefined, optional
        ServiceAccountNames is the list of names of the generated service accounts used for this components OIDC authentication.
    """


    serviceAccountName?: str

    serviceAccountNames?: [str]


schema MessagingKnativeDevV1SubscriptionStatusConditionsItems0:
    r"""
    messaging knative dev v1 subscription status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema MessagingKnativeDevV1SubscriptionStatusPhysicalSubscription:
    r"""
    PhysicalSubscription is the fully resolved values that this Subscription represents.

    Attributes
    ----------
    deadLetterSinkAudience : str, default is Undefined, optional
        OIDC audience of the dead letter sink.
    deadLetterSinkCACerts : str, default is Undefined, optional
        Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.
    deadLetterSinkUri : str, default is Undefined, optional
        ReplyURI is the fully resolved URI for the spec.delivery.deadLetterSink.
    replyAudience : str, default is Undefined, optional
        ReplyAudience is the OIDC audience for the replyUri.
    replyCACerts : str, default is Undefined, optional
        Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.
    replyUri : str, default is Undefined, optional
        ReplyURI is the fully resolved URI for the spec.reply.
    subscriberAudience : str, default is Undefined, optional
        SubscriberAudience is the OIDC audience for the subscriberUri.
    subscriberCACerts : str, default is Undefined, optional
        Certification Authority (CA) certificates in PEM format according to https://www.rfc-editor.org/rfc/rfc7468.
    subscriberUri : str, default is Undefined, optional
        SubscriberURI is the fully resolved URI for spec.subscriber.
    """


    deadLetterSinkAudience?: str

    deadLetterSinkCACerts?: str

    deadLetterSinkUri?: str

    replyAudience?: str

    replyCACerts?: str

    replyUri?: str

    subscriberAudience?: str

    subscriberCACerts?: str

    subscriberUri?: str


