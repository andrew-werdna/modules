"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Certificate:
    r"""
    Certificate is responsible for provisioning a SSL certificate for the
    given hosts. It is a Knative abstraction for various SSL certificate
    provisioning solutions (such as cert-manager or self-signed SSL certificate).

    Attributes
    ----------
    apiVersion : str, default is "networking.internal.knative.dev/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Certificate", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : NetworkingInternalKnativeDevV1alpha1CertificateSpec, default is Undefined, optional
        spec
    status : NetworkingInternalKnativeDevV1alpha1CertificateStatus, default is Undefined, optional
        status
    """


    apiVersion: "networking.internal.knative.dev/v1alpha1" = "networking.internal.knative.dev/v1alpha1"

    kind: "Certificate" = "Certificate"

    metadata?: v1.ObjectMeta

    spec?: NetworkingInternalKnativeDevV1alpha1CertificateSpec

    status?: NetworkingInternalKnativeDevV1alpha1CertificateStatus


schema NetworkingInternalKnativeDevV1alpha1CertificateSpec:
    r"""
    Spec is the desired state of the Certificate.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    dnsNames : [str], default is Undefined, required
        DNSNames is a list of DNS names the Certificate could support.
        The wildcard format of DNSNames (e.g. *.default.example.com) is supported.
    domain : str, default is Undefined, optional
        Domain is the top level domain of the values for DNSNames.
    secretName : str, default is Undefined, required
        SecretName is the name of the secret resource to store the SSL certificate in.
    """


    dnsNames: [str]

    domain?: str

    secretName: str


schema NetworkingInternalKnativeDevV1alpha1CertificateStatus:
    r"""
    Status is the current state of the Certificate.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some
        additional State as well as convey more information to the user. This is
        roughly akin to Annotations on any k8s resource, just the reconciler conveying
        richer information outwards.
    conditions : [NetworkingInternalKnativeDevV1alpha1CertificateStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    http01Challenges : [NetworkingInternalKnativeDevV1alpha1CertificateStatusHttp01ChallengesItems0], default is Undefined, optional
        HTTP01Challenges is a list of HTTP01 challenges that need to be fulfilled
        in order to get the TLS certificate..
    notAfter : str, default is Undefined, optional
        The expiration time of the TLS certificate stored in the secret named
        by this resource in spec.secretName.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that
        was last processed by the controller.
    """


    annotations?: {str:str}

    conditions?: [NetworkingInternalKnativeDevV1alpha1CertificateStatusConditionsItems0]

    http01Challenges?: [NetworkingInternalKnativeDevV1alpha1CertificateStatusHttp01ChallengesItems0]

    notAfter?: str

    observedGeneration?: int


schema NetworkingInternalKnativeDevV1alpha1CertificateStatusConditionsItems0:
    r"""
    Condition defines a readiness condition for a Knative resource.
    See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another.
        We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
        differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition.
        When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema NetworkingInternalKnativeDevV1alpha1CertificateStatusHttp01ChallengesItems0:
    r"""
    HTTP01Challenge defines the status of a HTTP01 challenge that a certificate needs
    to fulfill.

    Attributes
    ----------
    serviceName : str, default is Undefined, optional
        ServiceName is the name of the service to serve HTTP01 challenge requests.
    serviceNamespace : str, default is Undefined, optional
        ServiceNamespace is the namespace of the service to serve HTTP01 challenge requests.
    servicePort : int | str, default is Undefined, optional
        ServicePort is the port of the service to serve HTTP01 challenge requests.
    url : str, default is Undefined, optional
        URL is the URL that the HTTP01 challenge is expected to serve on.
    """


    serviceName?: str

    serviceNamespace?: str

    servicePort?: int | str

    url?: str


