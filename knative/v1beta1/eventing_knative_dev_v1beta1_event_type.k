"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema EventType:
    r"""
    EventType represents a type of event that can be consumed from a resource.

    Attributes
    ----------
    apiVersion : str, default is "eventing.knative.dev/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "EventType", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : EventingKnativeDevV1beta1EventTypeSpec, default is Undefined, optional
        spec
    status : EventingKnativeDevV1beta1EventTypeStatus, default is Undefined, optional
        status
    """


    apiVersion: "eventing.knative.dev/v1beta1" = "eventing.knative.dev/v1beta1"

    kind: "EventType" = "EventType"

    metadata?: v1.ObjectMeta

    spec?: EventingKnativeDevV1beta1EventTypeSpec

    status?: EventingKnativeDevV1beta1EventTypeStatus


schema EventingKnativeDevV1beta1EventTypeSpec:
    r"""
    Spec defines the desired state of the EventType.

    Attributes
    ----------
    broker : str, default is Undefined, optional
        broker
    description : str, default is Undefined, optional
        Description is an optional field used to describe the EventType, in any meaningful way.
    reference : EventingKnativeDevV1beta1EventTypeSpecReference, default is Undefined, optional
        reference
    $schema : str, default is Undefined, optional
        Schema is a URI, it represents the CloudEvents schemaurl extension attribute. It may be a JSON schema, a protobuf schema, etc. It is optional.
    schemaData : str, default is Undefined, optional
        SchemaData allows the CloudEvents schema to be stored directly in the EventType. Content is dependent on the encoding. Optional attribute. The contents are not validated or manipulated by the system.
    source : str, default is Undefined, optional
        Source is a URI, it represents the CloudEvents source.
    $type : str, default is Undefined, optional
        Type represents the CloudEvents type. It is authoritative.
    """


    broker?: str

    description?: str

    reference?: EventingKnativeDevV1beta1EventTypeSpecReference

    $schema?: str

    schemaData?: str

    source?: str

    $type?: str


schema EventingKnativeDevV1beta1EventTypeSpecReference:
    r"""
    Reference a resource. For example, Broker.

    Attributes
    ----------
    address : str, default is Undefined, optional
        Address points to a specific Address Name
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    namespace : str, default is Undefined, optional
        Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ This is an optional field, it gets defaulted to the object holding it if left out.
    """


    address?: str

    apiVersion?: str

    kind?: str

    name?: str

    namespace?: str


schema EventingKnativeDevV1beta1EventTypeStatus:
    r"""
    Status represents the current state of the EventType. This data may be out of date.

    Attributes
    ----------
    annotations : any, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.
    conditions : [EventingKnativeDevV1beta1EventTypeStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.
    """


    annotations?: any

    conditions?: [EventingKnativeDevV1beta1EventTypeStatusConditionsItems0]

    observedGeneration?: int


schema EventingKnativeDevV1beta1EventTypeStatusConditionsItems0:
    r"""
    eventing knative dev v1beta1 event type status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


