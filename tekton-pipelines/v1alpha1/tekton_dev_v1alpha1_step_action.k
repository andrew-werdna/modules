"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema StepAction:
    r"""
    StepAction represents the actionable components of Step.
    The Step can only reference it from the cluster or using remote resolution.

    Attributes
    ----------
    apiVersion : str, default is "tekton.dev/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "StepAction", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : TektonDevV1alpha1StepActionSpec, default is Undefined, optional
        spec
    """


    apiVersion: "tekton.dev/v1alpha1" = "tekton.dev/v1alpha1"

    kind: "StepAction" = "StepAction"

    metadata?: v1.ObjectMeta

    spec?: TektonDevV1alpha1StepActionSpec


schema TektonDevV1alpha1StepActionSpec:
    r"""
    Spec holds the desired state of the Step from the client

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    description : str, default is Undefined, optional
        Description is a user-facing description of the stepaction that may be
        used to populate a UI.
    env : [TektonDevV1alpha1StepActionSpecEnvItems0], default is Undefined, optional
        List of environment variables to set in the container.
        Cannot be updated.
    image : str, default is Undefined, optional
        Image reference name to run for this StepAction.
        More info: https://kubernetes.io/docs/concepts/containers/images
    params : [TektonDevV1alpha1StepActionSpecParamsItems0], default is Undefined, optional
        Params is a list of input parameters required to run the stepAction.
        Params must be supplied as inputs in Steps unless they declare a defaultvalue.
    results : [TektonDevV1alpha1StepActionSpecResultsItems0], default is Undefined, optional
        Results are values that this StepAction can output
    script : str, default is Undefined, optional
        Script is the contents of an executable file to execute.

        If Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.
    securityContext : TektonDevV1alpha1StepActionSpecSecurityContext, default is Undefined, optional
        security context
    volumeMounts : [TektonDevV1alpha1StepActionSpecVolumeMountsItems0], default is Undefined, optional
        Volumes to mount into the Step's filesystem.
        Cannot be updated.
    workingDir : str, default is Undefined, optional
        Step's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    """


    args?: [str]

    command?: [str]

    description?: str

    env?: [TektonDevV1alpha1StepActionSpecEnvItems0]

    image?: str

    params?: [TektonDevV1alpha1StepActionSpecParamsItems0]

    results?: [TektonDevV1alpha1StepActionSpecResultsItems0]

    script?: str

    securityContext?: TektonDevV1alpha1StepActionSpecSecurityContext

    volumeMounts?: [TektonDevV1alpha1StepActionSpecVolumeMountsItems0]

    workingDir?: str


schema TektonDevV1alpha1StepActionSpecEnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : TektonDevV1alpha1StepActionSpecEnvItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: TektonDevV1alpha1StepActionSpecEnvItems0ValueFrom


schema TektonDevV1alpha1StepActionSpecEnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : TektonDevV1alpha1StepActionSpecEnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : TektonDevV1alpha1StepActionSpecEnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : TektonDevV1alpha1StepActionSpecEnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : TektonDevV1alpha1StepActionSpecEnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: TektonDevV1alpha1StepActionSpecEnvItems0ValueFromConfigMapKeyRef

    fieldRef?: TektonDevV1alpha1StepActionSpecEnvItems0ValueFromFieldRef

    resourceFieldRef?: TektonDevV1alpha1StepActionSpecEnvItems0ValueFromResourceFieldRef

    secretKeyRef?: TektonDevV1alpha1StepActionSpecEnvItems0ValueFromSecretKeyRef


schema TektonDevV1alpha1StepActionSpecEnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1alpha1StepActionSpecEnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema TektonDevV1alpha1StepActionSpecEnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema TektonDevV1alpha1StepActionSpecEnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1alpha1StepActionSpecParamsItems0:
    r"""
    ParamSpec defines arbitrary parameters needed beyond typed inputs (such as
    resources). Parameter values are provided by users as inputs on a TaskRun
    or PipelineRun.

    Attributes
    ----------
    default : any, default is Undefined, optional
        Default is the value a parameter takes if no input value is supplied. If
        default is set, a Task may be executed without a supplied value for the
        parameter.
    description : str, default is Undefined, optional
        Description is a user-facing description of the parameter that may be
        used to populate a UI.
    enum : [str], default is Undefined, optional
        Enum declares a set of allowed param input values for tasks/pipelines that can be validated.
        If Enum is not set, no input validation is performed for the param.
    name : str, default is Undefined, required
        Name declares the name by which a parameter is referenced.
    properties : {str:TektonDevV1alpha1StepActionSpecParamsItems0PropertiesAnon}, default is Undefined, optional
        Properties is the JSON Schema properties to support key-value pairs parameter.
    $type : str, default is Undefined, optional
        Type is the user-specified type of the parameter. The possible types
        are currently "string", "array" and "object", and "string" is the default.
    """


    default?: any

    description?: str

    enum?: [str]

    name: str

    properties?: {str:TektonDevV1alpha1StepActionSpecParamsItems0PropertiesAnon}

    $type?: str


schema TektonDevV1alpha1StepActionSpecParamsItems0PropertiesAnon:
    r"""
    PropertySpec defines the struct for object keys

    Attributes
    ----------
    $type : str, default is Undefined, optional
        ParamType indicates the type of an input parameter;
        Used to distinguish between a single string and an array of strings.
    """


    $type?: str


schema TektonDevV1alpha1StepActionSpecResultsItems0:
    r"""
    StepResult used to describe the Results of a Step.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a human-readable description of the result
    name : str, default is Undefined, required
        Name the given name
    properties : {str:TektonDevV1alpha1StepActionSpecResultsItems0PropertiesAnon}, default is Undefined, optional
        Properties is the JSON Schema properties to support key-value pairs results.
    $type : str, default is Undefined, optional
        The possible types are 'string', 'array', and 'object', with 'string' as the default.
    """


    description?: str

    name: str

    properties?: {str:TektonDevV1alpha1StepActionSpecResultsItems0PropertiesAnon}

    $type?: str


schema TektonDevV1alpha1StepActionSpecResultsItems0PropertiesAnon:
    r"""
    PropertySpec defines the struct for object keys

    Attributes
    ----------
    $type : str, default is Undefined, optional
        ParamType indicates the type of an input parameter;
        Used to distinguish between a single string and an array of strings.
    """


    $type?: str


schema TektonDevV1alpha1StepActionSpecSecurityContext:
    r"""
    SecurityContext defines the security options the Step should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    The value set in StepAction will take precedence over the value from Task.

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : TektonDevV1alpha1StepActionSpecSecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : TektonDevV1alpha1StepActionSpecSecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : TektonDevV1alpha1StepActionSpecSecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : TektonDevV1alpha1StepActionSpecSecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : TektonDevV1alpha1StepActionSpecSecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """


    allowPrivilegeEscalation?: bool

    appArmorProfile?: TektonDevV1alpha1StepActionSpecSecurityContextAppArmorProfile

    capabilities?: TektonDevV1alpha1StepActionSpecSecurityContextCapabilities

    privileged?: bool

    procMount?: str

    readOnlyRootFilesystem?: bool

    runAsGroup?: int

    runAsNonRoot?: bool

    runAsUser?: int

    seLinuxOptions?: TektonDevV1alpha1StepActionSpecSecurityContextSeLinuxOptions

    seccompProfile?: TektonDevV1alpha1StepActionSpecSecurityContextSeccompProfile

    windowsOptions?: TektonDevV1alpha1StepActionSpecSecurityContextWindowsOptions


schema TektonDevV1alpha1StepActionSpecSecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1alpha1StepActionSpecSecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """


    add?: [str]

    drop?: [str]


schema TektonDevV1alpha1StepActionSpecSecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """


    level?: str

    role?: str

    $type?: str

    user?: str


schema TektonDevV1alpha1StepActionSpecSecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1alpha1StepActionSpecSecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """


    gmsaCredentialSpec?: str

    gmsaCredentialSpecName?: str

    hostProcess?: bool

    runAsUserName?: str


schema TektonDevV1alpha1StepActionSpecVolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    recursiveReadOnly?: str

    subPath?: str

    subPathExpr?: str


