"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ResolutionRequest:
    r"""
    ResolutionRequest is an object for requesting the content of
    a Tekton resource like a pipeline.yaml.

    Attributes
    ----------
    apiVersion : str, default is "resolution.tekton.dev/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ResolutionRequest", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ResolutionTektonDevV1alpha1ResolutionRequestSpec, default is Undefined, optional
        spec
    status : ResolutionTektonDevV1alpha1ResolutionRequestStatus, default is Undefined, optional
        status
    """


    apiVersion: "resolution.tekton.dev/v1alpha1" = "resolution.tekton.dev/v1alpha1"

    kind: "ResolutionRequest" = "ResolutionRequest"

    metadata?: v1.ObjectMeta

    spec?: ResolutionTektonDevV1alpha1ResolutionRequestSpec

    status?: ResolutionTektonDevV1alpha1ResolutionRequestStatus


schema ResolutionTektonDevV1alpha1ResolutionRequestSpec:
    r"""
    Spec holds the information for the request part of the resource request.

    Attributes
    ----------
    params : {str:str}, default is Undefined, optional
        Parameters are the runtime attributes passed to
        the resolver to help it figure out how to resolve the
        resource being requested. For example: repo URL, commit SHA,
        path to file, the kind of authentication to leverage, etc.
    """


    params?: {str:str}


schema ResolutionTektonDevV1alpha1ResolutionRequestStatus:
    r"""
    Status communicates the state of the request and, ultimately,
    the content of the resolved resource.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some
        additional State as well as convey more information to the user. This is
        roughly akin to Annotations on any k8s resource, just the reconciler conveying
        richer information outwards.
    conditions : [ResolutionTektonDevV1alpha1ResolutionRequestStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    data : str, default is Undefined, required
        Data is a string representation of the resolved content
        of the requested resource in-lined into the ResolutionRequest
        object.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that
        was last processed by the controller.
    refSource : any, default is Undefined, required
        RefSource is the source reference of the remote data that records where the remote
        file came from including the url, digest and the entrypoint.
    """


    annotations?: {str:str}

    conditions?: [ResolutionTektonDevV1alpha1ResolutionRequestStatusConditionsItems0]

    data: str

    observedGeneration?: int

    refSource: any


schema ResolutionTektonDevV1alpha1ResolutionRequestStatusConditionsItems0:
    r"""
    Condition defines a readiness condition for a Knative resource.
    See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another.
        We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
        differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition.
        When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


