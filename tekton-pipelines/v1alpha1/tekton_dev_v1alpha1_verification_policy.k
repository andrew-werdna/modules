"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VerificationPolicy:
    r"""
    VerificationPolicy defines the rules to verify Tekton resources.
    VerificationPolicy can config the mapping from resources to a list of public
    keys, so when verifying the resources we can use the corresponding public keys.

    Attributes
    ----------
    apiVersion : str, default is "tekton.dev/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VerificationPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : TektonDevV1alpha1VerificationPolicySpec, default is Undefined, required
        spec
    """


    apiVersion: "tekton.dev/v1alpha1" = "tekton.dev/v1alpha1"

    kind: "VerificationPolicy" = "VerificationPolicy"

    metadata?: v1.ObjectMeta

    spec: TektonDevV1alpha1VerificationPolicySpec


schema TektonDevV1alpha1VerificationPolicySpec:
    r"""
    Spec holds the desired state of the VerificationPolicy.

    Attributes
    ----------
    authorities : [TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0], default is Undefined, required
        Authorities defines the rules for validating signatures.
    mode : str, default is Undefined, optional
        Mode controls whether a failing policy will fail the taskrun/pipelinerun, or only log the warnings
        enforce - fail the taskrun/pipelinerun if verification fails (default)
        warn - don't fail the taskrun/pipelinerun if verification fails but log warnings
    resources : [TektonDevV1alpha1VerificationPolicySpecResourcesItems0], default is Undefined, required
        Resources defines the patterns of resources sources that should be subject to this policy.
        For example, we may want to apply this Policy from a certain GitHub repo.
        Then the ResourcesPattern should be valid regex. E.g. If using gitresolver, and we want to config keys from a certain git repo.
        `ResourcesPattern` can be `https://github.com/tektoncd/catalog.git`, we will use regex to filter out those resources.
    """


    authorities: [TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0]

    mode?: str

    resources: [TektonDevV1alpha1VerificationPolicySpecResourcesItems0]


schema TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0:
    r"""
    The Authority block defines the keys for validating signatures.

    Attributes
    ----------
    key : TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0Key, default is Undefined, optional
        key
    name : str, default is Undefined, required
        Name is the name for this authority.
    """


    key?: TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0Key

    name: str


schema TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0Key:
    r"""
    Key contains the public key to validate the resource.

    Attributes
    ----------
    data : str, default is Undefined, optional
        Data contains the inline public key.
    hashAlgorithm : str, default is Undefined, optional
        HashAlgorithm always defaults to sha256 if the algorithm hasn't been explicitly set
    kms : str, default is Undefined, optional
        KMS contains the KMS url of the public key
        Supported formats differ based on the KMS system used.
        One example of a KMS url could be:
        gcpkms://projects/[PROJECT]/locations/[LOCATION]>/keyRings/[KEYRING]/cryptoKeys/[KEY]/cryptoKeyVersions/[KEY_VERSION]
        For more examples please refer https://docs.sigstore.dev/cosign/kms_support.
        Note that the KMS is not supported yet.
    secretRef : TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0KeySecretRef, default is Undefined, optional
        secret ref
    """


    data?: str

    hashAlgorithm?: str

    kms?: str

    secretRef?: TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0KeySecretRef


schema TektonDevV1alpha1VerificationPolicySpecAuthoritiesItems0KeySecretRef:
    r"""
    SecretRef sets a reference to a secret with the key.

    Attributes
    ----------
    name : str, default is Undefined, optional
        name is unique within a namespace to reference a secret resource.
    namespace : str, default is Undefined, optional
        namespace defines the space within which the secret name must be unique.
    """


    name?: str

    namespace?: str


schema TektonDevV1alpha1VerificationPolicySpecResourcesItems0:
    r"""
    ResourcePattern defines the pattern of the resource source

    Attributes
    ----------
    pattern : str, default is Undefined, required
        Pattern defines a resource pattern. Regex is created to filter resources based on `Pattern`
        Example patterns:
        GitHub resource: https://github.com/tektoncd/catalog.git, https://github.com/tektoncd/*
        Bundle resource: gcr.io/tekton-releases/catalog/upstream/git-clone, gcr.io/tekton-releases/catalog/upstream/*
        Hub resource: https://artifacthub.io/*,
    """


    pattern: str


