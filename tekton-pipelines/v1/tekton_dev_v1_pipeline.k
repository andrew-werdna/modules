"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Pipeline:
    r"""
    Pipeline describes a list of Tasks to execute. It expresses how outputs
    of tasks feed into inputs of subsequent tasks.

    Attributes
    ----------
    apiVersion : str, default is "tekton.dev/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Pipeline", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : TektonDevV1PipelineSpec, default is Undefined, optional
        spec
    """


    apiVersion: "tekton.dev/v1" = "tekton.dev/v1"

    kind: "Pipeline" = "Pipeline"

    metadata?: v1.ObjectMeta

    spec?: TektonDevV1PipelineSpec


schema TektonDevV1PipelineSpec:
    r"""
    Spec holds the desired state of the Pipeline from the client

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a user-facing description of the pipeline that may be
        used to populate a UI.
    displayName : str, default is Undefined, optional
        DisplayName is a user-facing name of the pipeline that may be
        used to populate a UI.
    finally : [TektonDevV1PipelineSpecFinallyItems0], default is Undefined, optional
        Finally declares the list of Tasks that execute just before leaving the Pipeline
        i.e. either after all Tasks are finished executing successfully
        or after a failure which would result in ending the Pipeline
    params : [TektonDevV1PipelineSpecParamsItems0], default is Undefined, optional
        Params declares a list of input parameters that must be supplied when
        this Pipeline is run.
    results : [TektonDevV1PipelineSpecResultsItems0], default is Undefined, optional
        Results are values that this pipeline can output once run
    tasks : [TektonDevV1PipelineSpecTasksItems0], default is Undefined, optional
        Tasks declares the graph of Tasks that execute when this Pipeline is run.
    workspaces : [TektonDevV1PipelineSpecWorkspacesItems0], default is Undefined, optional
        Workspaces declares a set of named workspaces that are expected to be
        provided by a PipelineRun.
    """


    description?: str

    displayName?: str

    finally?: [TektonDevV1PipelineSpecFinallyItems0]

    params?: [TektonDevV1PipelineSpecParamsItems0]

    results?: [TektonDevV1PipelineSpecResultsItems0]

    tasks?: [TektonDevV1PipelineSpecTasksItems0]

    workspaces?: [TektonDevV1PipelineSpecWorkspacesItems0]


schema TektonDevV1PipelineSpecFinallyItems0:
    r"""
    PipelineTask defines a task in a Pipeline, passing inputs from both
    Params and from the output of previous tasks.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is the description of this task within the context of a Pipeline.
        This description may be used to populate a UI.
    displayName : str, default is Undefined, optional
        DisplayName is the display name of this task within the context of a Pipeline.
        This display name may be used to populate a UI.
    matrix : TektonDevV1PipelineSpecFinallyItems0Matrix, default is Undefined, optional
        matrix
    name : str, default is Undefined, optional
        Name is the name of this task within the context of a Pipeline. Name is
        used as a coordinate with the `from` and `runAfter` fields to establish
        the execution order of tasks relative to one another.
    onError : str, default is Undefined, optional
        OnError defines the exiting behavior of a PipelineRun on error
        can be set to [ continue | stopAndFail ]
    params : [TektonDevV1PipelineSpecFinallyItems0ParamsItems0], default is Undefined, optional
        Parameters declares parameters passed to this task.
    pipelineRef : TektonDevV1PipelineSpecFinallyItems0PipelineRef, default is Undefined, optional
        pipeline ref
    pipelineSpec : any, default is Undefined, optional
        PipelineSpec is a specification of a pipeline
        Note: PipelineSpec is in preview mode and not yet supported
        Specifying PipelineSpec can be disabled by setting
        `disable-inline-spec` feature flag.
        See Pipeline.spec (API version: tekton.dev/v1)
    retries : int, default is Undefined, optional
        Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False
    runAfter : [str], default is Undefined, optional
        RunAfter is the list of PipelineTask names that should be executed before
        this Task executes. (Used to force a specific ordering in graph execution.)
    taskRef : TektonDevV1PipelineSpecFinallyItems0TaskRef, default is Undefined, optional
        task ref
    taskSpec : any, default is Undefined, optional
        TaskSpec is a specification of a task
        Specifying TaskSpec can be disabled by setting
        `disable-inline-spec` feature flag.
        See Task.spec (API version: tekton.dev/v1)
    timeout : str, default is Undefined, optional
        Time after which the TaskRun times out. Defaults to 1 hour.
        Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
    when : [TektonDevV1PipelineSpecFinallyItems0WhenItems0], default is Undefined, optional
        When is a list of when expressions that need to be true for the task to run
    workspaces : [TektonDevV1PipelineSpecFinallyItems0WorkspacesItems0], default is Undefined, optional
        Workspaces maps workspaces from the pipeline spec to the workspaces
        declared in the Task.
    """


    description?: str

    displayName?: str

    matrix?: TektonDevV1PipelineSpecFinallyItems0Matrix

    name?: str

    onError?: str

    params?: [TektonDevV1PipelineSpecFinallyItems0ParamsItems0]

    pipelineRef?: TektonDevV1PipelineSpecFinallyItems0PipelineRef

    pipelineSpec?: any

    retries?: int

    runAfter?: [str]

    taskRef?: TektonDevV1PipelineSpecFinallyItems0TaskRef

    taskSpec?: any

    timeout?: str

    when?: [TektonDevV1PipelineSpecFinallyItems0WhenItems0]

    workspaces?: [TektonDevV1PipelineSpecFinallyItems0WorkspacesItems0]


schema TektonDevV1PipelineSpecFinallyItems0Matrix:
    r"""
    Matrix declares parameters used to fan out this task.

    Attributes
    ----------
    include : [TektonDevV1PipelineSpecFinallyItems0MatrixIncludeItems0], default is Undefined, optional
        Include is a list of IncludeParams which allows passing in specific combinations of Parameters into the Matrix.
    params : [TektonDevV1PipelineSpecFinallyItems0MatrixParamsItems0], default is Undefined, optional
        Params is a list of parameters used to fan out the pipelineTask
        Params takes only `Parameters` of type `"array"`
        Each array element is supplied to the `PipelineTask` by substituting `params` of type `"string"` in the underlying `Task`.
        The names of the `params` in the `Matrix` must match the names of the `params` in the underlying `Task` that they will be substituting.
    """


    include?: [TektonDevV1PipelineSpecFinallyItems0MatrixIncludeItems0]

    params?: [TektonDevV1PipelineSpecFinallyItems0MatrixParamsItems0]


schema TektonDevV1PipelineSpecFinallyItems0MatrixIncludeItems0:
    r"""
    IncludeParams allows passing in a specific combinations of Parameters into the Matrix.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name the specified combination
    params : [TektonDevV1PipelineSpecFinallyItems0MatrixIncludeItems0ParamsItems0], default is Undefined, optional
        Params takes only `Parameters` of type `"string"`
        The names of the `params` must match the names of the `params` in the underlying `Task`
    """


    name?: str

    params?: [TektonDevV1PipelineSpecFinallyItems0MatrixIncludeItems0ParamsItems0]


schema TektonDevV1PipelineSpecFinallyItems0MatrixIncludeItems0ParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecFinallyItems0MatrixParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecFinallyItems0ParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecFinallyItems0PipelineRef:
    r"""
    PipelineRef is a reference to a pipeline definition
    Note: PipelineRef is in preview mode and not yet supported

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
    name : str, default is Undefined, optional
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    params : [TektonDevV1PipelineSpecFinallyItems0PipelineRefParamsItems0], default is Undefined, optional
        Params contains the parameters used to identify the
        referenced Tekton resource. Example entries might include
        "repo" or "path" but the set of params ultimately depends on
        the chosen resolver.
    resolver : str, default is Undefined, optional
        Resolver is the name of the resolver that should perform
        resolution of the referenced Tekton resource, such as "git".
    """


    apiVersion?: str

    name?: str

    params?: [TektonDevV1PipelineSpecFinallyItems0PipelineRefParamsItems0]

    resolver?: str


schema TektonDevV1PipelineSpecFinallyItems0PipelineRefParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecFinallyItems0TaskRef:
    r"""
    TaskRef is a reference to a task definition.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
        Note: A Task with non-empty APIVersion and Kind is considered a Custom Task
    kind : str, default is Undefined, optional
        TaskKind indicates the Kind of the Task:
        1. Namespaced Task when Kind is set to "Task". If Kind is "", it defaults to "Task".
        2. Custom Task when Kind is non-empty and APIVersion is non-empty
    name : str, default is Undefined, optional
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    params : [TektonDevV1PipelineSpecFinallyItems0TaskRefParamsItems0], default is Undefined, optional
        Params contains the parameters used to identify the
        referenced Tekton resource. Example entries might include
        "repo" or "path" but the set of params ultimately depends on
        the chosen resolver.
    resolver : str, default is Undefined, optional
        Resolver is the name of the resolver that should perform
        resolution of the referenced Tekton resource, such as "git".
    """


    apiVersion?: str

    kind?: str

    name?: str

    params?: [TektonDevV1PipelineSpecFinallyItems0TaskRefParamsItems0]

    resolver?: str


schema TektonDevV1PipelineSpecFinallyItems0TaskRefParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecFinallyItems0WhenItems0:
    r"""
    WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run
    to determine whether the Task should be executed or skipped

    Attributes
    ----------
    cel : str, default is Undefined, optional
        CEL is a string of Common Language Expression, which can be used to conditionally execute
        the task based on the result of the expression evaluation
        More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
    input : str, default is Undefined, optional
        Input is the string for guard checking which can be a static input or an output from a parent Task
    operator : str, default is Undefined, optional
        Operator that represents an Input's relationship to the values
    values : [str], default is Undefined, optional
        Values is an array of strings, which is compared against the input, for guard checking
        It must be non-empty
    """


    cel?: str

    input?: str

    operator?: str

    values?: [str]


schema TektonDevV1PipelineSpecFinallyItems0WorkspacesItems0:
    r"""
    WorkspacePipelineTaskBinding describes how a workspace passed into the pipeline should be
    mapped to a task's declared workspace.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the workspace as declared by the task
    subPath : str, default is Undefined, optional
        SubPath is optionally a directory on the volume which should be used
        for this binding (i.e. the volume will be mounted at this sub directory).
    workspace : str, default is Undefined, optional
        Workspace is the name of the workspace declared by the pipeline
    """


    name: str

    subPath?: str

    workspace?: str


schema TektonDevV1PipelineSpecParamsItems0:
    r"""
    ParamSpec defines arbitrary parameters needed beyond typed inputs (such as
    resources). Parameter values are provided by users as inputs on a TaskRun
    or PipelineRun.

    Attributes
    ----------
    default : any, default is Undefined, optional
        Default is the value a parameter takes if no input value is supplied. If
        default is set, a Task may be executed without a supplied value for the
        parameter.
    description : str, default is Undefined, optional
        Description is a user-facing description of the parameter that may be
        used to populate a UI.
    enum : [str], default is Undefined, optional
        Enum declares a set of allowed param input values for tasks/pipelines that can be validated.
        If Enum is not set, no input validation is performed for the param.
    name : str, default is Undefined, required
        Name declares the name by which a parameter is referenced.
    properties : {str:TektonDevV1PipelineSpecParamsItems0PropertiesAnon}, default is Undefined, optional
        Properties is the JSON Schema properties to support key-value pairs parameter.
    $type : str, default is Undefined, optional
        Type is the user-specified type of the parameter. The possible types
        are currently "string", "array" and "object", and "string" is the default.
    """


    default?: any

    description?: str

    enum?: [str]

    name: str

    properties?: {str:TektonDevV1PipelineSpecParamsItems0PropertiesAnon}

    $type?: str


schema TektonDevV1PipelineSpecParamsItems0PropertiesAnon:
    r"""
    PropertySpec defines the struct for object keys

    Attributes
    ----------
    $type : str, default is Undefined, optional
        ParamType indicates the type of an input parameter;
        Used to distinguish between a single string and an array of strings.
    """


    $type?: str


schema TektonDevV1PipelineSpecResultsItems0:
    r"""
    PipelineResult used to describe the results of a pipeline

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a human-readable description of the result
    name : str, default is Undefined, required
        Name the given name
    $type : str, default is Undefined, optional
        Type is the user-specified type of the result.
        The possible types are 'string', 'array', and 'object', with 'string' as the default.
        'array' and 'object' types are alpha features.
    value : any, default is Undefined, required
        Value the expression used to retrieve the value
    """


    description?: str

    name: str

    $type?: str

    value: any


schema TektonDevV1PipelineSpecTasksItems0:
    r"""
    PipelineTask defines a task in a Pipeline, passing inputs from both
    Params and from the output of previous tasks.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is the description of this task within the context of a Pipeline.
        This description may be used to populate a UI.
    displayName : str, default is Undefined, optional
        DisplayName is the display name of this task within the context of a Pipeline.
        This display name may be used to populate a UI.
    matrix : TektonDevV1PipelineSpecTasksItems0Matrix, default is Undefined, optional
        matrix
    name : str, default is Undefined, optional
        Name is the name of this task within the context of a Pipeline. Name is
        used as a coordinate with the `from` and `runAfter` fields to establish
        the execution order of tasks relative to one another.
    onError : str, default is Undefined, optional
        OnError defines the exiting behavior of a PipelineRun on error
        can be set to [ continue | stopAndFail ]
    params : [TektonDevV1PipelineSpecTasksItems0ParamsItems0], default is Undefined, optional
        Parameters declares parameters passed to this task.
    pipelineRef : TektonDevV1PipelineSpecTasksItems0PipelineRef, default is Undefined, optional
        pipeline ref
    pipelineSpec : any, default is Undefined, optional
        PipelineSpec is a specification of a pipeline
        Note: PipelineSpec is in preview mode and not yet supported
        Specifying PipelineSpec can be disabled by setting
        `disable-inline-spec` feature flag.
        See Pipeline.spec (API version: tekton.dev/v1)
    retries : int, default is Undefined, optional
        Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False
    runAfter : [str], default is Undefined, optional
        RunAfter is the list of PipelineTask names that should be executed before
        this Task executes. (Used to force a specific ordering in graph execution.)
    taskRef : TektonDevV1PipelineSpecTasksItems0TaskRef, default is Undefined, optional
        task ref
    taskSpec : any, default is Undefined, optional
        TaskSpec is a specification of a task
        Specifying TaskSpec can be disabled by setting
        `disable-inline-spec` feature flag.
        See Task.spec (API version: tekton.dev/v1)
    timeout : str, default is Undefined, optional
        Time after which the TaskRun times out. Defaults to 1 hour.
        Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
    when : [TektonDevV1PipelineSpecTasksItems0WhenItems0], default is Undefined, optional
        When is a list of when expressions that need to be true for the task to run
    workspaces : [TektonDevV1PipelineSpecTasksItems0WorkspacesItems0], default is Undefined, optional
        Workspaces maps workspaces from the pipeline spec to the workspaces
        declared in the Task.
    """


    description?: str

    displayName?: str

    matrix?: TektonDevV1PipelineSpecTasksItems0Matrix

    name?: str

    onError?: str

    params?: [TektonDevV1PipelineSpecTasksItems0ParamsItems0]

    pipelineRef?: TektonDevV1PipelineSpecTasksItems0PipelineRef

    pipelineSpec?: any

    retries?: int

    runAfter?: [str]

    taskRef?: TektonDevV1PipelineSpecTasksItems0TaskRef

    taskSpec?: any

    timeout?: str

    when?: [TektonDevV1PipelineSpecTasksItems0WhenItems0]

    workspaces?: [TektonDevV1PipelineSpecTasksItems0WorkspacesItems0]


schema TektonDevV1PipelineSpecTasksItems0Matrix:
    r"""
    Matrix declares parameters used to fan out this task.

    Attributes
    ----------
    include : [TektonDevV1PipelineSpecTasksItems0MatrixIncludeItems0], default is Undefined, optional
        Include is a list of IncludeParams which allows passing in specific combinations of Parameters into the Matrix.
    params : [TektonDevV1PipelineSpecTasksItems0MatrixParamsItems0], default is Undefined, optional
        Params is a list of parameters used to fan out the pipelineTask
        Params takes only `Parameters` of type `"array"`
        Each array element is supplied to the `PipelineTask` by substituting `params` of type `"string"` in the underlying `Task`.
        The names of the `params` in the `Matrix` must match the names of the `params` in the underlying `Task` that they will be substituting.
    """


    include?: [TektonDevV1PipelineSpecTasksItems0MatrixIncludeItems0]

    params?: [TektonDevV1PipelineSpecTasksItems0MatrixParamsItems0]


schema TektonDevV1PipelineSpecTasksItems0MatrixIncludeItems0:
    r"""
    IncludeParams allows passing in a specific combinations of Parameters into the Matrix.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name the specified combination
    params : [TektonDevV1PipelineSpecTasksItems0MatrixIncludeItems0ParamsItems0], default is Undefined, optional
        Params takes only `Parameters` of type `"string"`
        The names of the `params` must match the names of the `params` in the underlying `Task`
    """


    name?: str

    params?: [TektonDevV1PipelineSpecTasksItems0MatrixIncludeItems0ParamsItems0]


schema TektonDevV1PipelineSpecTasksItems0MatrixIncludeItems0ParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecTasksItems0MatrixParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecTasksItems0ParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecTasksItems0PipelineRef:
    r"""
    PipelineRef is a reference to a pipeline definition
    Note: PipelineRef is in preview mode and not yet supported

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
    name : str, default is Undefined, optional
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    params : [TektonDevV1PipelineSpecTasksItems0PipelineRefParamsItems0], default is Undefined, optional
        Params contains the parameters used to identify the
        referenced Tekton resource. Example entries might include
        "repo" or "path" but the set of params ultimately depends on
        the chosen resolver.
    resolver : str, default is Undefined, optional
        Resolver is the name of the resolver that should perform
        resolution of the referenced Tekton resource, such as "git".
    """


    apiVersion?: str

    name?: str

    params?: [TektonDevV1PipelineSpecTasksItems0PipelineRefParamsItems0]

    resolver?: str


schema TektonDevV1PipelineSpecTasksItems0PipelineRefParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecTasksItems0TaskRef:
    r"""
    TaskRef is a reference to a task definition.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
        Note: A Task with non-empty APIVersion and Kind is considered a Custom Task
    kind : str, default is Undefined, optional
        TaskKind indicates the Kind of the Task:
        1. Namespaced Task when Kind is set to "Task". If Kind is "", it defaults to "Task".
        2. Custom Task when Kind is non-empty and APIVersion is non-empty
    name : str, default is Undefined, optional
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    params : [TektonDevV1PipelineSpecTasksItems0TaskRefParamsItems0], default is Undefined, optional
        Params contains the parameters used to identify the
        referenced Tekton resource. Example entries might include
        "repo" or "path" but the set of params ultimately depends on
        the chosen resolver.
    resolver : str, default is Undefined, optional
        Resolver is the name of the resolver that should perform
        resolution of the referenced Tekton resource, such as "git".
    """


    apiVersion?: str

    kind?: str

    name?: str

    params?: [TektonDevV1PipelineSpecTasksItems0TaskRefParamsItems0]

    resolver?: str


schema TektonDevV1PipelineSpecTasksItems0TaskRefParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1PipelineSpecTasksItems0WhenItems0:
    r"""
    WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run
    to determine whether the Task should be executed or skipped

    Attributes
    ----------
    cel : str, default is Undefined, optional
        CEL is a string of Common Language Expression, which can be used to conditionally execute
        the task based on the result of the expression evaluation
        More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
    input : str, default is Undefined, optional
        Input is the string for guard checking which can be a static input or an output from a parent Task
    operator : str, default is Undefined, optional
        Operator that represents an Input's relationship to the values
    values : [str], default is Undefined, optional
        Values is an array of strings, which is compared against the input, for guard checking
        It must be non-empty
    """


    cel?: str

    input?: str

    operator?: str

    values?: [str]


schema TektonDevV1PipelineSpecTasksItems0WorkspacesItems0:
    r"""
    WorkspacePipelineTaskBinding describes how a workspace passed into the pipeline should be
    mapped to a task's declared workspace.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the workspace as declared by the task
    subPath : str, default is Undefined, optional
        SubPath is optionally a directory on the volume which should be used
        for this binding (i.e. the volume will be mounted at this sub directory).
    workspace : str, default is Undefined, optional
        Workspace is the name of the workspace declared by the pipeline
    """


    name: str

    subPath?: str

    workspace?: str


schema TektonDevV1PipelineSpecWorkspacesItems0:
    r"""
    PipelineWorkspaceDeclaration creates a named slot in a Pipeline that a PipelineRun
    is expected to populate with a workspace binding.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a human readable string describing how the workspace will be
        used in the Pipeline. It can be useful to include a bit of detail about which
        tasks are intended to have access to the data on the workspace.
    name : str, default is Undefined, required
        Name is the name of a workspace to be provided by a PipelineRun.
    optional : bool, default is Undefined, optional
        Optional marks a Workspace as not being required in PipelineRuns. By default
        this field is false and so declared workspaces are required.
    """


    description?: str

    name: str

    optional?: bool


