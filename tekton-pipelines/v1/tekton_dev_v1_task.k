"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema Task:
    r"""
    Task represents a collection of sequential steps that are run as part of a
    Pipeline using a set of inputs and producing a set of outputs. Tasks execute
    when TaskRuns are created that provide the input parameters and resources and
    output resources the Task requires.

    Attributes
    ----------
    apiVersion : str, default is "tekton.dev/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Task", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : TektonDevV1TaskSpec, default is Undefined, optional
        spec
    """


    apiVersion: "tekton.dev/v1" = "tekton.dev/v1"

    kind: "Task" = "Task"

    metadata?: v1.ObjectMeta

    spec?: TektonDevV1TaskSpec


schema TektonDevV1TaskSpec:
    r"""
    Spec holds the desired state of the Task from the client

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a user-facing description of the task that may be
        used to populate a UI.
    displayName : str, default is Undefined, optional
        DisplayName is a user-facing name of the task that may be
        used to populate a UI.
    params : [TektonDevV1TaskSpecParamsItems0], default is Undefined, optional
        Params is a list of input parameters required to run the task. Params
        must be supplied as inputs in TaskRuns unless they declare a default
        value.
    results : [TektonDevV1TaskSpecResultsItems0], default is Undefined, optional
        Results are values that this Task can output
    sidecars : [TektonDevV1TaskSpecSidecarsItems0], default is Undefined, optional
        Sidecars are run alongside the Task's step containers. They begin before
        the steps start and end after the steps complete.
    stepTemplate : TektonDevV1TaskSpecStepTemplate, default is Undefined, optional
        step template
    steps : [TektonDevV1TaskSpecStepsItems0], default is Undefined, optional
        Steps are the steps of the build; each step is run sequentially with the
        source mounted into /workspace.
    volumes : any, default is Undefined, optional
        Volumes is a collection of volumes that are available to mount into the
        steps of the build.
        See Pod.spec.volumes (API version: v1)
    workspaces : [TektonDevV1TaskSpecWorkspacesItems0], default is Undefined, optional
        Workspaces are the volumes that this Task requires.
    """


    description?: str

    displayName?: str

    params?: [TektonDevV1TaskSpecParamsItems0]

    results?: [TektonDevV1TaskSpecResultsItems0]

    sidecars?: [TektonDevV1TaskSpecSidecarsItems0]

    stepTemplate?: TektonDevV1TaskSpecStepTemplate

    steps?: [TektonDevV1TaskSpecStepsItems0]

    volumes?: any

    workspaces?: [TektonDevV1TaskSpecWorkspacesItems0]


schema TektonDevV1TaskSpecParamsItems0:
    r"""
    ParamSpec defines arbitrary parameters needed beyond typed inputs (such as
    resources). Parameter values are provided by users as inputs on a TaskRun
    or PipelineRun.

    Attributes
    ----------
    default : any, default is Undefined, optional
        Default is the value a parameter takes if no input value is supplied. If
        default is set, a Task may be executed without a supplied value for the
        parameter.
    description : str, default is Undefined, optional
        Description is a user-facing description of the parameter that may be
        used to populate a UI.
    enum : [str], default is Undefined, optional
        Enum declares a set of allowed param input values for tasks/pipelines that can be validated.
        If Enum is not set, no input validation is performed for the param.
    name : str, default is Undefined, required
        Name declares the name by which a parameter is referenced.
    properties : {str:TektonDevV1TaskSpecParamsItems0PropertiesAnon}, default is Undefined, optional
        Properties is the JSON Schema properties to support key-value pairs parameter.
    $type : str, default is Undefined, optional
        Type is the user-specified type of the parameter. The possible types
        are currently "string", "array" and "object", and "string" is the default.
    """


    default?: any

    description?: str

    enum?: [str]

    name: str

    properties?: {str:TektonDevV1TaskSpecParamsItems0PropertiesAnon}

    $type?: str


schema TektonDevV1TaskSpecParamsItems0PropertiesAnon:
    r"""
    PropertySpec defines the struct for object keys

    Attributes
    ----------
    $type : str, default is Undefined, optional
        ParamType indicates the type of an input parameter;
        Used to distinguish between a single string and an array of strings.
    """


    $type?: str


schema TektonDevV1TaskSpecResultsItems0:
    r"""
    TaskResult used to describe the results of a task

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a human-readable description of the result
    name : str, default is Undefined, required
        Name the given name
    properties : {str:TektonDevV1TaskSpecResultsItems0PropertiesAnon}, default is Undefined, optional
        Properties is the JSON Schema properties to support key-value pairs results.
    $type : str, default is Undefined, optional
        Type is the user-specified type of the result. The possible type
        is currently "string" and will support "array" in following work.
    value : any, default is Undefined, optional
        Value the expression used to retrieve the value of the result from an underlying Step.
    """


    description?: str

    name: str

    properties?: {str:TektonDevV1TaskSpecResultsItems0PropertiesAnon}

    $type?: str

    value?: any


schema TektonDevV1TaskSpecResultsItems0PropertiesAnon:
    r"""
    PropertySpec defines the struct for object keys

    Attributes
    ----------
    $type : str, default is Undefined, optional
        ParamType indicates the type of an input parameter;
        Used to distinguish between a single string and an array of strings.
    """


    $type?: str


schema TektonDevV1TaskSpecSidecarsItems0:
    r"""
    Sidecar has nearly the same data structure as Step but does not have the ability to timeout.

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    computeResources : TektonDevV1TaskSpecSidecarsItems0ComputeResources, default is Undefined, optional
        compute resources
    env : [TektonDevV1TaskSpecSidecarsItems0EnvItems0], default is Undefined, optional
        List of environment variables to set in the Sidecar.
        Cannot be updated.
    envFrom : [TektonDevV1TaskSpecSidecarsItems0EnvFromItems0], default is Undefined, optional
        List of sources to populate environment variables in the Sidecar.
        The keys defined within a source must be a C_IDENTIFIER. All invalid keys
        will be reported as an event when the container is starting. When a key exists in multiple
        sources, the value associated with the last source will take precedence.
        Values defined by an Env with a duplicate key will take precedence.
        Cannot be updated.
    image : str, default is Undefined, optional
        Image reference name.
        More info: https://kubernetes.io/docs/concepts/containers/images
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of Always, Never, IfNotPresent.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    lifecycle : TektonDevV1TaskSpecSidecarsItems0Lifecycle, default is Undefined, optional
        lifecycle
    livenessProbe : TektonDevV1TaskSpecSidecarsItems0LivenessProbe, default is Undefined, optional
        liveness probe
    name : str, default is Undefined, required
        Name of the Sidecar specified as a DNS_LABEL.
        Each Sidecar in a Task must have a unique name (DNS_LABEL).
        Cannot be updated.
    ports : [TektonDevV1TaskSpecSidecarsItems0PortsItems0], default is Undefined, optional
        List of ports to expose from the Sidecar. Exposing a port here gives
        the system additional information about the network connections a
        container uses, but is primarily informational. Not specifying a port here
        DOES NOT prevent that port from being exposed. Any port which is
        listening on the default "0.0.0.0" address inside a container will be
        accessible from the network.
        Cannot be updated.
    readinessProbe : TektonDevV1TaskSpecSidecarsItems0ReadinessProbe, default is Undefined, optional
        readiness probe
    restartPolicy : str, default is Undefined, optional
        RestartPolicy refers to kubernetes RestartPolicy. It can only be set for an
        initContainer and must have it's policy set to "Always". It is currently
        left optional to help support Kubernetes versions prior to 1.29 when this feature
        was introduced.
    script : str, default is Undefined, optional
        Script is the contents of an executable file to execute.

        If Script is not empty, the Step cannot have an Command or Args.
    securityContext : TektonDevV1TaskSpecSidecarsItems0SecurityContext, default is Undefined, optional
        security context
    startupProbe : TektonDevV1TaskSpecSidecarsItems0StartupProbe, default is Undefined, optional
        startup probe
    stdin : bool, default is Undefined, optional
        Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this
        is not set, reads from stdin in the Sidecar will always result in EOF.
        Default is false.
    stdinOnce : bool, default is Undefined, optional
        Whether the container runtime should close the stdin channel after it has been opened by
        a single attach. When stdin is true the stdin stream will remain open across multiple attach
        sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the
        first client attaches to stdin, and then remains open and accepts data until the client disconnects,
        at which time stdin is closed and remains closed until the Sidecar is restarted. If this
        flag is false, a container processes that reads from stdin will never receive an EOF.
        Default is false
    terminationMessagePath : str, default is Undefined, optional
        Optional: Path at which the file to which the Sidecar's termination message
        will be written is mounted into the Sidecar's filesystem.
        Message written is intended to be brief final status, such as an assertion failure message.
        Will be truncated by the node if greater than 4096 bytes. The total message length across
        all containers will be limited to 12kb.
        Defaults to /dev/termination-log.
        Cannot be updated.
    terminationMessagePolicy : str, default is Undefined, optional
        Indicate how the termination message should be populated. File will use the contents of
        terminationMessagePath to populate the Sidecar status message on both success and failure.
        FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination
        message file is empty and the Sidecar exited with an error.
        The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
        Defaults to File.
        Cannot be updated.
    tty : bool, default is Undefined, optional
        Whether this Sidecar should allocate a TTY for itself, also requires 'stdin' to be true.
        Default is false.
    volumeDevices : [TektonDevV1TaskSpecSidecarsItems0VolumeDevicesItems0], default is Undefined, optional
        volumeDevices is the list of block devices to be used by the Sidecar.
    volumeMounts : [TektonDevV1TaskSpecSidecarsItems0VolumeMountsItems0], default is Undefined, optional
        Volumes to mount into the Sidecar's filesystem.
        Cannot be updated.
    workingDir : str, default is Undefined, optional
        Sidecar's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    workspaces : [TektonDevV1TaskSpecSidecarsItems0WorkspacesItems0], default is Undefined, optional
        This is an alpha field. You must set the "enable-api-fields" feature flag to "alpha"
        for this field to be supported.

        Workspaces is a list of workspaces from the Task that this Sidecar wants
        exclusive access to. Adding a workspace to this list means that any
        other Step or Sidecar that does not also request this Workspace will
        not have access to it.
    """


    args?: [str]

    command?: [str]

    computeResources?: TektonDevV1TaskSpecSidecarsItems0ComputeResources

    env?: [TektonDevV1TaskSpecSidecarsItems0EnvItems0]

    envFrom?: [TektonDevV1TaskSpecSidecarsItems0EnvFromItems0]

    image?: str

    imagePullPolicy?: str

    lifecycle?: TektonDevV1TaskSpecSidecarsItems0Lifecycle

    livenessProbe?: TektonDevV1TaskSpecSidecarsItems0LivenessProbe

    name: str

    ports?: [TektonDevV1TaskSpecSidecarsItems0PortsItems0]

    readinessProbe?: TektonDevV1TaskSpecSidecarsItems0ReadinessProbe

    restartPolicy?: str

    script?: str

    securityContext?: TektonDevV1TaskSpecSidecarsItems0SecurityContext

    startupProbe?: TektonDevV1TaskSpecSidecarsItems0StartupProbe

    stdin?: bool

    stdinOnce?: bool

    terminationMessagePath?: str

    terminationMessagePolicy?: str

    tty?: bool

    volumeDevices?: [TektonDevV1TaskSpecSidecarsItems0VolumeDevicesItems0]

    volumeMounts?: [TektonDevV1TaskSpecSidecarsItems0VolumeMountsItems0]

    workingDir?: str

    workspaces?: [TektonDevV1TaskSpecSidecarsItems0WorkspacesItems0]


schema TektonDevV1TaskSpecSidecarsItems0ComputeResources:
    r"""
    ComputeResources required by this Sidecar.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

    Attributes
    ----------
    claims : [TektonDevV1TaskSpecSidecarsItems0ComputeResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    claims?: [TektonDevV1TaskSpecSidecarsItems0ComputeResourcesClaimsItems0]

    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, limits in limits { _regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits } if limits
        all _, requests in requests { _regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests } if requests


schema TektonDevV1TaskSpecSidecarsItems0ComputeResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """


    name: str

    request?: str


schema TektonDevV1TaskSpecSidecarsItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps

    Attributes
    ----------
    configMapRef : TektonDevV1TaskSpecSidecarsItems0EnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    secretRef : TektonDevV1TaskSpecSidecarsItems0EnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """


    configMapRef?: TektonDevV1TaskSpecSidecarsItems0EnvFromItems0ConfigMapRef

    prefix?: str

    secretRef?: TektonDevV1TaskSpecSidecarsItems0EnvFromItems0SecretRef


schema TektonDevV1TaskSpecSidecarsItems0EnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """


    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecSidecarsItems0EnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """


    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecSidecarsItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFrom


schema TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromConfigMapKeyRef

    fieldRef?: TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromFieldRef

    resourceFieldRef?: TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromResourceFieldRef

    secretKeyRef?: TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromSecretKeyRef


schema TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema TektonDevV1TaskSpecSidecarsItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecSidecarsItems0Lifecycle:
    r"""
    Actions that the management system should take in response to Sidecar lifecycle events.
    Cannot be updated.

    Attributes
    ----------
    postStart : TektonDevV1TaskSpecSidecarsItems0LifecyclePostStart, default is Undefined, optional
        post start
    preStop : TektonDevV1TaskSpecSidecarsItems0LifecyclePreStop, default is Undefined, optional
        pre stop
    """


    postStart?: TektonDevV1TaskSpecSidecarsItems0LifecyclePostStart

    preStop?: TektonDevV1TaskSpecSidecarsItems0LifecyclePreStop


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePostStart:
    r"""
    PostStart is called immediately after a container is created. If the handler fails,
    the container is terminated and restarted according to its restart policy.
    Other management of the container blocks until the hook completes.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartExec, default is Undefined, optional
        exec
    httpGet : TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartHTTPGet, default is Undefined, optional
        http get
    sleep : TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartSleep, default is Undefined, optional
        sleep
    tcpSocket : TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartTCPSocket, default is Undefined, optional
        tcp socket
    """


    exec?: TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartExec

    httpGet?: TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartHTTPGet

    sleep?: TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartSleep

    tcpSocket?: TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartTCPSocket


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """


    command?: [str]


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """


    host?: str

    httpHeaders?: [TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartHTTPGetHTTPHeadersItems0]

    path?: str

    port: int | str

    scheme?: str


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """


    name: str

    value: str


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """


    seconds: int


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePostStartTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """


    host?: str

    port: int | str


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePreStop:
    r"""
    PreStop is called immediately before a container is terminated due to an
    API request or management event such as liveness/startup probe failure,
    preemption, resource contention, etc. The handler is not called if the
    container crashes or exits. The Pod's termination grace period countdown begins before the
    PreStop hook is executed. Regardless of the outcome of the handler, the
    container will eventually terminate within the Pod's termination grace
    period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    or until the termination grace period is reached.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopExec, default is Undefined, optional
        exec
    httpGet : TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopHTTPGet, default is Undefined, optional
        http get
    sleep : TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopSleep, default is Undefined, optional
        sleep
    tcpSocket : TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopTCPSocket, default is Undefined, optional
        tcp socket
    """


    exec?: TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopExec

    httpGet?: TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopHTTPGet

    sleep?: TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopSleep

    tcpSocket?: TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopTCPSocket


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """


    command?: [str]


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """


    host?: str

    httpHeaders?: [TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopHTTPGetHTTPHeadersItems0]

    path?: str

    port: int | str

    scheme?: str


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """


    name: str

    value: str


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """


    seconds: int


schema TektonDevV1TaskSpecSidecarsItems0LifecyclePreStopTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """


    host?: str

    port: int | str


schema TektonDevV1TaskSpecSidecarsItems0LivenessProbe:
    r"""
    Periodic probe of Sidecar liveness.
    Container will be restarted if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : TektonDevV1TaskSpecSidecarsItems0LivenessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : TektonDevV1TaskSpecSidecarsItems0LivenessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : TektonDevV1TaskSpecSidecarsItems0LivenessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : TektonDevV1TaskSpecSidecarsItems0LivenessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """


    exec?: TektonDevV1TaskSpecSidecarsItems0LivenessProbeExec

    failureThreshold?: int

    grpc?: TektonDevV1TaskSpecSidecarsItems0LivenessProbeGrpc

    httpGet?: TektonDevV1TaskSpecSidecarsItems0LivenessProbeHTTPGet

    initialDelaySeconds?: int

    periodSeconds?: int

    successThreshold?: int

    tcpSocket?: TektonDevV1TaskSpecSidecarsItems0LivenessProbeTCPSocket

    terminationGracePeriodSeconds?: int

    timeoutSeconds?: int


schema TektonDevV1TaskSpecSidecarsItems0LivenessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """


    command?: [str]


schema TektonDevV1TaskSpecSidecarsItems0LivenessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """


    port: int

    service?: str = ""


schema TektonDevV1TaskSpecSidecarsItems0LivenessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [TektonDevV1TaskSpecSidecarsItems0LivenessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """


    host?: str

    httpHeaders?: [TektonDevV1TaskSpecSidecarsItems0LivenessProbeHTTPGetHTTPHeadersItems0]

    path?: str

    port: int | str

    scheme?: str


schema TektonDevV1TaskSpecSidecarsItems0LivenessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """


    name: str

    value: str


schema TektonDevV1TaskSpecSidecarsItems0LivenessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """


    host?: str

    port: int | str


schema TektonDevV1TaskSpecSidecarsItems0PortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, default is Undefined, required
        Number of port to expose on the pod's IP address.
        This must be a valid port number, 0 < x < 65536.
    hostIP : str, default is Undefined, optional
        What host IP to bind the external port to.
    hostPort : int, default is Undefined, optional
        Number of port to expose on the host.
        If specified, this must be a valid port number, 0 < x < 65536.
        If HostNetwork is specified, this must match ContainerPort.
        Most containers do not need this.
    name : str, default is Undefined, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
        named port in a pod must have a unique name. Name for the port that can be
        referred to by services.
    $protocol : str, default is "TCP", optional
        Protocol for port. Must be UDP, TCP, or SCTP.
        Defaults to "TCP".
    """


    containerPort: int

    hostIP?: str

    hostPort?: int

    name?: str

    $protocol?: str = "TCP"


schema TektonDevV1TaskSpecSidecarsItems0ReadinessProbe:
    r"""
    Periodic probe of Sidecar service readiness.
    Container will be removed from service endpoints if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : TektonDevV1TaskSpecSidecarsItems0ReadinessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : TektonDevV1TaskSpecSidecarsItems0ReadinessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : TektonDevV1TaskSpecSidecarsItems0ReadinessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : TektonDevV1TaskSpecSidecarsItems0ReadinessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """


    exec?: TektonDevV1TaskSpecSidecarsItems0ReadinessProbeExec

    failureThreshold?: int

    grpc?: TektonDevV1TaskSpecSidecarsItems0ReadinessProbeGrpc

    httpGet?: TektonDevV1TaskSpecSidecarsItems0ReadinessProbeHTTPGet

    initialDelaySeconds?: int

    periodSeconds?: int

    successThreshold?: int

    tcpSocket?: TektonDevV1TaskSpecSidecarsItems0ReadinessProbeTCPSocket

    terminationGracePeriodSeconds?: int

    timeoutSeconds?: int


schema TektonDevV1TaskSpecSidecarsItems0ReadinessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """


    command?: [str]


schema TektonDevV1TaskSpecSidecarsItems0ReadinessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """


    port: int

    service?: str = ""


schema TektonDevV1TaskSpecSidecarsItems0ReadinessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [TektonDevV1TaskSpecSidecarsItems0ReadinessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """


    host?: str

    httpHeaders?: [TektonDevV1TaskSpecSidecarsItems0ReadinessProbeHTTPGetHTTPHeadersItems0]

    path?: str

    port: int | str

    scheme?: str


schema TektonDevV1TaskSpecSidecarsItems0ReadinessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """


    name: str

    value: str


schema TektonDevV1TaskSpecSidecarsItems0ReadinessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """


    host?: str

    port: int | str


schema TektonDevV1TaskSpecSidecarsItems0SecurityContext:
    r"""
    SecurityContext defines the security options the Sidecar should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : TektonDevV1TaskSpecSidecarsItems0SecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : TektonDevV1TaskSpecSidecarsItems0SecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : TektonDevV1TaskSpecSidecarsItems0SecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : TektonDevV1TaskSpecSidecarsItems0SecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : TektonDevV1TaskSpecSidecarsItems0SecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """


    allowPrivilegeEscalation?: bool

    appArmorProfile?: TektonDevV1TaskSpecSidecarsItems0SecurityContextAppArmorProfile

    capabilities?: TektonDevV1TaskSpecSidecarsItems0SecurityContextCapabilities

    privileged?: bool

    procMount?: str

    readOnlyRootFilesystem?: bool

    runAsGroup?: int

    runAsNonRoot?: bool

    runAsUser?: int

    seLinuxOptions?: TektonDevV1TaskSpecSidecarsItems0SecurityContextSeLinuxOptions

    seccompProfile?: TektonDevV1TaskSpecSidecarsItems0SecurityContextSeccompProfile

    windowsOptions?: TektonDevV1TaskSpecSidecarsItems0SecurityContextWindowsOptions


schema TektonDevV1TaskSpecSidecarsItems0SecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1TaskSpecSidecarsItems0SecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """


    add?: [str]

    drop?: [str]


schema TektonDevV1TaskSpecSidecarsItems0SecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """


    level?: str

    role?: str

    $type?: str

    user?: str


schema TektonDevV1TaskSpecSidecarsItems0SecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1TaskSpecSidecarsItems0SecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """


    gmsaCredentialSpec?: str

    gmsaCredentialSpecName?: str

    hostProcess?: bool

    runAsUserName?: str


schema TektonDevV1TaskSpecSidecarsItems0StartupProbe:
    r"""
    StartupProbe indicates that the Pod the Sidecar is running in has successfully initialized.
    If specified, no other probes are executed until this completes successfully.
    If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
    This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
    when it might take a long time to load data or warm a cache, than during steady-state operation.
    This cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : TektonDevV1TaskSpecSidecarsItems0StartupProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : TektonDevV1TaskSpecSidecarsItems0StartupProbeGrpc, default is Undefined, optional
        grpc
    httpGet : TektonDevV1TaskSpecSidecarsItems0StartupProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : TektonDevV1TaskSpecSidecarsItems0StartupProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """


    exec?: TektonDevV1TaskSpecSidecarsItems0StartupProbeExec

    failureThreshold?: int

    grpc?: TektonDevV1TaskSpecSidecarsItems0StartupProbeGrpc

    httpGet?: TektonDevV1TaskSpecSidecarsItems0StartupProbeHTTPGet

    initialDelaySeconds?: int

    periodSeconds?: int

    successThreshold?: int

    tcpSocket?: TektonDevV1TaskSpecSidecarsItems0StartupProbeTCPSocket

    terminationGracePeriodSeconds?: int

    timeoutSeconds?: int


schema TektonDevV1TaskSpecSidecarsItems0StartupProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """


    command?: [str]


schema TektonDevV1TaskSpecSidecarsItems0StartupProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """


    port: int

    service?: str = ""


schema TektonDevV1TaskSpecSidecarsItems0StartupProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [TektonDevV1TaskSpecSidecarsItems0StartupProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """


    host?: str

    httpHeaders?: [TektonDevV1TaskSpecSidecarsItems0StartupProbeHTTPGetHTTPHeadersItems0]

    path?: str

    port: int | str

    scheme?: str


schema TektonDevV1TaskSpecSidecarsItems0StartupProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """


    name: str

    value: str


schema TektonDevV1TaskSpecSidecarsItems0StartupProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """


    host?: str

    port: int | str


schema TektonDevV1TaskSpecSidecarsItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, default is Undefined, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, default is Undefined, required
        name must match the name of a persistentVolumeClaim in the pod
    """


    devicePath: str

    name: str


schema TektonDevV1TaskSpecSidecarsItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    recursiveReadOnly?: str

    subPath?: str

    subPathExpr?: str


schema TektonDevV1TaskSpecSidecarsItems0WorkspacesItems0:
    r"""
    WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access
    to a Workspace defined in a Task.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        MountPath is the path that the workspace should be mounted to inside the Step or Sidecar,
        overriding any MountPath specified in the Task's WorkspaceDeclaration.
    name : str, default is Undefined, required
        Name is the name of the workspace this Step or Sidecar wants access to.
    """


    mountPath: str

    name: str


schema TektonDevV1TaskSpecStepTemplate:
    r"""
    StepTemplate can be used as the basis for all step containers within the
    Task, so that the steps inherit settings on the base container.

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    computeResources : TektonDevV1TaskSpecStepTemplateComputeResources, default is Undefined, optional
        compute resources
    env : [TektonDevV1TaskSpecStepTemplateEnvItems0], default is Undefined, optional
        List of environment variables to set in the Step.
        Cannot be updated.
    envFrom : [TektonDevV1TaskSpecStepTemplateEnvFromItems0], default is Undefined, optional
        List of sources to populate environment variables in the Step.
        The keys defined within a source must be a C_IDENTIFIER. All invalid keys
        will be reported as an event when the Step is starting. When a key exists in multiple
        sources, the value associated with the last source will take precedence.
        Values defined by an Env with a duplicate key will take precedence.
        Cannot be updated.
    image : str, default is Undefined, optional
        Image reference name.
        More info: https://kubernetes.io/docs/concepts/containers/images
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of Always, Never, IfNotPresent.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    securityContext : TektonDevV1TaskSpecStepTemplateSecurityContext, default is Undefined, optional
        security context
    volumeDevices : [TektonDevV1TaskSpecStepTemplateVolumeDevicesItems0], default is Undefined, optional
        volumeDevices is the list of block devices to be used by the Step.
    volumeMounts : [TektonDevV1TaskSpecStepTemplateVolumeMountsItems0], default is Undefined, optional
        Volumes to mount into the Step's filesystem.
        Cannot be updated.
    workingDir : str, default is Undefined, optional
        Step's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    """


    args?: [str]

    command?: [str]

    computeResources?: TektonDevV1TaskSpecStepTemplateComputeResources

    env?: [TektonDevV1TaskSpecStepTemplateEnvItems0]

    envFrom?: [TektonDevV1TaskSpecStepTemplateEnvFromItems0]

    image?: str

    imagePullPolicy?: str

    securityContext?: TektonDevV1TaskSpecStepTemplateSecurityContext

    volumeDevices?: [TektonDevV1TaskSpecStepTemplateVolumeDevicesItems0]

    volumeMounts?: [TektonDevV1TaskSpecStepTemplateVolumeMountsItems0]

    workingDir?: str


schema TektonDevV1TaskSpecStepTemplateComputeResources:
    r"""
    ComputeResources required by this Step.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

    Attributes
    ----------
    claims : [TektonDevV1TaskSpecStepTemplateComputeResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    claims?: [TektonDevV1TaskSpecStepTemplateComputeResourcesClaimsItems0]

    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, limits in limits { _regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits } if limits
        all _, requests in requests { _regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests } if requests


schema TektonDevV1TaskSpecStepTemplateComputeResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """


    name: str

    request?: str


schema TektonDevV1TaskSpecStepTemplateEnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps

    Attributes
    ----------
    configMapRef : TektonDevV1TaskSpecStepTemplateEnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    secretRef : TektonDevV1TaskSpecStepTemplateEnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """


    configMapRef?: TektonDevV1TaskSpecStepTemplateEnvFromItems0ConfigMapRef

    prefix?: str

    secretRef?: TektonDevV1TaskSpecStepTemplateEnvFromItems0SecretRef


schema TektonDevV1TaskSpecStepTemplateEnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """


    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepTemplateEnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """


    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepTemplateEnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : TektonDevV1TaskSpecStepTemplateEnvItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: TektonDevV1TaskSpecStepTemplateEnvItems0ValueFrom


schema TektonDevV1TaskSpecStepTemplateEnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromConfigMapKeyRef

    fieldRef?: TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromFieldRef

    resourceFieldRef?: TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromResourceFieldRef

    secretKeyRef?: TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromSecretKeyRef


schema TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema TektonDevV1TaskSpecStepTemplateEnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepTemplateSecurityContext:
    r"""
    SecurityContext defines the security options the Step should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : TektonDevV1TaskSpecStepTemplateSecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : TektonDevV1TaskSpecStepTemplateSecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : TektonDevV1TaskSpecStepTemplateSecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : TektonDevV1TaskSpecStepTemplateSecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : TektonDevV1TaskSpecStepTemplateSecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """


    allowPrivilegeEscalation?: bool

    appArmorProfile?: TektonDevV1TaskSpecStepTemplateSecurityContextAppArmorProfile

    capabilities?: TektonDevV1TaskSpecStepTemplateSecurityContextCapabilities

    privileged?: bool

    procMount?: str

    readOnlyRootFilesystem?: bool

    runAsGroup?: int

    runAsNonRoot?: bool

    runAsUser?: int

    seLinuxOptions?: TektonDevV1TaskSpecStepTemplateSecurityContextSeLinuxOptions

    seccompProfile?: TektonDevV1TaskSpecStepTemplateSecurityContextSeccompProfile

    windowsOptions?: TektonDevV1TaskSpecStepTemplateSecurityContextWindowsOptions


schema TektonDevV1TaskSpecStepTemplateSecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1TaskSpecStepTemplateSecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """


    add?: [str]

    drop?: [str]


schema TektonDevV1TaskSpecStepTemplateSecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """


    level?: str

    role?: str

    $type?: str

    user?: str


schema TektonDevV1TaskSpecStepTemplateSecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1TaskSpecStepTemplateSecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """


    gmsaCredentialSpec?: str

    gmsaCredentialSpecName?: str

    hostProcess?: bool

    runAsUserName?: str


schema TektonDevV1TaskSpecStepTemplateVolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, default is Undefined, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, default is Undefined, required
        name must match the name of a persistentVolumeClaim in the pod
    """


    devicePath: str

    name: str


schema TektonDevV1TaskSpecStepTemplateVolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    recursiveReadOnly?: str

    subPath?: str

    subPathExpr?: str


schema TektonDevV1TaskSpecStepsItems0:
    r"""
    Step runs a subcomponent of a Task

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    computeResources : TektonDevV1TaskSpecStepsItems0ComputeResources, default is Undefined, optional
        compute resources
    env : [TektonDevV1TaskSpecStepsItems0EnvItems0], default is Undefined, optional
        List of environment variables to set in the Step.
        Cannot be updated.
    envFrom : [TektonDevV1TaskSpecStepsItems0EnvFromItems0], default is Undefined, optional
        List of sources to populate environment variables in the Step.
        The keys defined within a source must be a C_IDENTIFIER. All invalid keys
        will be reported as an event when the Step is starting. When a key exists in multiple
        sources, the value associated with the last source will take precedence.
        Values defined by an Env with a duplicate key will take precedence.
        Cannot be updated.
    image : str, default is Undefined, optional
        Docker image name.
        More info: https://kubernetes.io/docs/concepts/containers/images
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of Always, Never, IfNotPresent.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    name : str, default is Undefined, required
        Name of the Step specified as a DNS_LABEL.
        Each Step in a Task must have a unique name.
    onError : str, default is Undefined, optional
        OnError defines the exiting behavior of a container on error
        can be set to [ continue | stopAndFail ]
    params : [TektonDevV1TaskSpecStepsItems0ParamsItems0], default is Undefined, optional
        Params declares parameters passed to this step action.
    ref : TektonDevV1TaskSpecStepsItems0Ref, default is Undefined, optional
        ref
    results : [TektonDevV1TaskSpecStepsItems0ResultsItems0], default is Undefined, optional
        Results declares StepResults produced by the Step.

        It can be used in an inlined Step when used to store Results to $(step.results.resultName.path).
        It cannot be used when referencing StepActions using [v1.Step.Ref].
        The Results declared by the StepActions will be stored here instead.
    script : str, default is Undefined, optional
        Script is the contents of an executable file to execute.

        If Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.
    securityContext : TektonDevV1TaskSpecStepsItems0SecurityContext, default is Undefined, optional
        security context
    stderrConfig : TektonDevV1TaskSpecStepsItems0StderrConfig, default is Undefined, optional
        stderr config
    stdoutConfig : TektonDevV1TaskSpecStepsItems0StdoutConfig, default is Undefined, optional
        stdout config
    timeout : str, default is Undefined, optional
        Timeout is the time after which the step times out. Defaults to never.
        Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration
    volumeDevices : [TektonDevV1TaskSpecStepsItems0VolumeDevicesItems0], default is Undefined, optional
        volumeDevices is the list of block devices to be used by the Step.
    volumeMounts : [TektonDevV1TaskSpecStepsItems0VolumeMountsItems0], default is Undefined, optional
        Volumes to mount into the Step's filesystem.
        Cannot be updated.
    when : [TektonDevV1TaskSpecStepsItems0WhenItems0], default is Undefined, optional
        When is a list of when expressions that need to be true for the task to run
    workingDir : str, default is Undefined, optional
        Step's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    workspaces : [TektonDevV1TaskSpecStepsItems0WorkspacesItems0], default is Undefined, optional
        This is an alpha field. You must set the "enable-api-fields" feature flag to "alpha"
        for this field to be supported.

        Workspaces is a list of workspaces from the Task that this Step wants
        exclusive access to. Adding a workspace to this list means that any
        other Step or Sidecar that does not also request this Workspace will
        not have access to it.
    """


    args?: [str]

    command?: [str]

    computeResources?: TektonDevV1TaskSpecStepsItems0ComputeResources

    env?: [TektonDevV1TaskSpecStepsItems0EnvItems0]

    envFrom?: [TektonDevV1TaskSpecStepsItems0EnvFromItems0]

    image?: str

    imagePullPolicy?: str

    name: str

    onError?: str

    params?: [TektonDevV1TaskSpecStepsItems0ParamsItems0]

    ref?: TektonDevV1TaskSpecStepsItems0Ref

    results?: [TektonDevV1TaskSpecStepsItems0ResultsItems0]

    script?: str

    securityContext?: TektonDevV1TaskSpecStepsItems0SecurityContext

    stderrConfig?: TektonDevV1TaskSpecStepsItems0StderrConfig

    stdoutConfig?: TektonDevV1TaskSpecStepsItems0StdoutConfig

    timeout?: str

    volumeDevices?: [TektonDevV1TaskSpecStepsItems0VolumeDevicesItems0]

    volumeMounts?: [TektonDevV1TaskSpecStepsItems0VolumeMountsItems0]

    when?: [TektonDevV1TaskSpecStepsItems0WhenItems0]

    workingDir?: str

    workspaces?: [TektonDevV1TaskSpecStepsItems0WorkspacesItems0]


schema TektonDevV1TaskSpecStepsItems0ComputeResources:
    r"""
    ComputeResources required by this Step.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

    Attributes
    ----------
    claims : [TektonDevV1TaskSpecStepsItems0ComputeResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    claims?: [TektonDevV1TaskSpecStepsItems0ComputeResourcesClaimsItems0]

    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, limits in limits { _regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits } if limits
        all _, requests in requests { _regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests } if requests


schema TektonDevV1TaskSpecStepsItems0ComputeResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """


    name: str

    request?: str


schema TektonDevV1TaskSpecStepsItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps

    Attributes
    ----------
    configMapRef : TektonDevV1TaskSpecStepsItems0EnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
    secretRef : TektonDevV1TaskSpecStepsItems0EnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """


    configMapRef?: TektonDevV1TaskSpecStepsItems0EnvFromItems0ConfigMapRef

    prefix?: str

    secretRef?: TektonDevV1TaskSpecStepsItems0EnvFromItems0SecretRef


schema TektonDevV1TaskSpecStepsItems0EnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """


    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepsItems0EnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """


    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepsItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : TektonDevV1TaskSpecStepsItems0EnvItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: TektonDevV1TaskSpecStepsItems0EnvItems0ValueFrom


schema TektonDevV1TaskSpecStepsItems0EnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromConfigMapKeyRef

    fieldRef?: TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromFieldRef

    resourceFieldRef?: TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromResourceFieldRef

    secretKeyRef?: TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromSecretKeyRef


schema TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema TektonDevV1TaskSpecStepsItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1TaskSpecStepsItems0ParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1TaskSpecStepsItems0Ref:
    r"""
    Contains the reference to an existing StepAction.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referenced step
    params : [TektonDevV1TaskSpecStepsItems0RefParamsItems0], default is Undefined, optional
        Params contains the parameters used to identify the
        referenced Tekton resource. Example entries might include
        "repo" or "path" but the set of params ultimately depends on
        the chosen resolver.
    resolver : str, default is Undefined, optional
        Resolver is the name of the resolver that should perform
        resolution of the referenced Tekton resource, such as "git".
    """


    name?: str

    params?: [TektonDevV1TaskSpecStepsItems0RefParamsItems0]

    resolver?: str


schema TektonDevV1TaskSpecStepsItems0RefParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1TaskSpecStepsItems0ResultsItems0:
    r"""
    StepResult used to describe the Results of a Step.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a human-readable description of the result
    name : str, default is Undefined, required
        Name the given name
    properties : {str:TektonDevV1TaskSpecStepsItems0ResultsItems0PropertiesAnon}, default is Undefined, optional
        Properties is the JSON Schema properties to support key-value pairs results.
    $type : str, default is Undefined, optional
        The possible types are 'string', 'array', and 'object', with 'string' as the default.
    """


    description?: str

    name: str

    properties?: {str:TektonDevV1TaskSpecStepsItems0ResultsItems0PropertiesAnon}

    $type?: str


schema TektonDevV1TaskSpecStepsItems0ResultsItems0PropertiesAnon:
    r"""
    PropertySpec defines the struct for object keys

    Attributes
    ----------
    $type : str, default is Undefined, optional
        ParamType indicates the type of an input parameter;
        Used to distinguish between a single string and an array of strings.
    """


    $type?: str


schema TektonDevV1TaskSpecStepsItems0SecurityContext:
    r"""
    SecurityContext defines the security options the Step should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : TektonDevV1TaskSpecStepsItems0SecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : TektonDevV1TaskSpecStepsItems0SecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : TektonDevV1TaskSpecStepsItems0SecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : TektonDevV1TaskSpecStepsItems0SecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : TektonDevV1TaskSpecStepsItems0SecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """


    allowPrivilegeEscalation?: bool

    appArmorProfile?: TektonDevV1TaskSpecStepsItems0SecurityContextAppArmorProfile

    capabilities?: TektonDevV1TaskSpecStepsItems0SecurityContextCapabilities

    privileged?: bool

    procMount?: str

    readOnlyRootFilesystem?: bool

    runAsGroup?: int

    runAsNonRoot?: bool

    runAsUser?: int

    seLinuxOptions?: TektonDevV1TaskSpecStepsItems0SecurityContextSeLinuxOptions

    seccompProfile?: TektonDevV1TaskSpecStepsItems0SecurityContextSeccompProfile

    windowsOptions?: TektonDevV1TaskSpecStepsItems0SecurityContextWindowsOptions


schema TektonDevV1TaskSpecStepsItems0SecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1TaskSpecStepsItems0SecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """


    add?: [str]

    drop?: [str]


schema TektonDevV1TaskSpecStepsItems0SecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """


    level?: str

    role?: str

    $type?: str

    user?: str


schema TektonDevV1TaskSpecStepsItems0SecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """


    localhostProfile?: str

    $type: str


schema TektonDevV1TaskSpecStepsItems0SecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """


    gmsaCredentialSpec?: str

    gmsaCredentialSpecName?: str

    hostProcess?: bool

    runAsUserName?: str


schema TektonDevV1TaskSpecStepsItems0StderrConfig:
    r"""
    Stores configuration for the stderr stream of the step.

    Attributes
    ----------
    path : str, default is Undefined, optional
        Path to duplicate stdout stream to on container's local filesystem.
    """


    path?: str


schema TektonDevV1TaskSpecStepsItems0StdoutConfig:
    r"""
    Stores configuration for the stdout stream of the step.

    Attributes
    ----------
    path : str, default is Undefined, optional
        Path to duplicate stdout stream to on container's local filesystem.
    """


    path?: str


schema TektonDevV1TaskSpecStepsItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, default is Undefined, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, default is Undefined, required
        name must match the name of a persistentVolumeClaim in the pod
    """


    devicePath: str

    name: str


schema TektonDevV1TaskSpecStepsItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    recursiveReadOnly?: str

    subPath?: str

    subPathExpr?: str


schema TektonDevV1TaskSpecStepsItems0WhenItems0:
    r"""
    WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run
    to determine whether the Task should be executed or skipped

    Attributes
    ----------
    cel : str, default is Undefined, optional
        CEL is a string of Common Language Expression, which can be used to conditionally execute
        the task based on the result of the expression evaluation
        More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
    input : str, default is Undefined, optional
        Input is the string for guard checking which can be a static input or an output from a parent Task
    operator : str, default is Undefined, optional
        Operator that represents an Input's relationship to the values
    values : [str], default is Undefined, optional
        Values is an array of strings, which is compared against the input, for guard checking
        It must be non-empty
    """


    cel?: str

    input?: str

    operator?: str

    values?: [str]


schema TektonDevV1TaskSpecStepsItems0WorkspacesItems0:
    r"""
    WorkspaceUsage is used by a Step or Sidecar to declare that it wants isolated access
    to a Workspace defined in a Task.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        MountPath is the path that the workspace should be mounted to inside the Step or Sidecar,
        overriding any MountPath specified in the Task's WorkspaceDeclaration.
    name : str, default is Undefined, required
        Name is the name of the workspace this Step or Sidecar wants access to.
    """


    mountPath: str

    name: str


schema TektonDevV1TaskSpecWorkspacesItems0:
    r"""
    WorkspaceDeclaration is a declaration of a volume that a Task requires.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is an optional human readable description of this volume.
    mountPath : str, default is Undefined, optional
        MountPath overrides the directory that the volume will be made available at.
    name : str, default is Undefined, required
        Name is the name by which you can bind the volume at runtime.
    optional : bool, default is Undefined, optional
        Optional marks a Workspace as not being required in TaskRuns. By default
        this field is false and so declared workspaces are required.
    readOnly : bool, default is Undefined, optional
        ReadOnly dictates whether a mounted volume is writable. By default this
        field is false and so mounted volumes are writable.
    """


    description?: str

    mountPath?: str

    name: str

    optional?: bool

    readOnly?: bool


