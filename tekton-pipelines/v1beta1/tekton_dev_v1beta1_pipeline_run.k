"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema PipelineRun:
    r"""
    PipelineRun represents a single execution of a Pipeline. PipelineRuns are how
    the graph of Tasks declared in a Pipeline are executed; they specify inputs
    to Pipelines such as parameter values and capture operational aspects of the
    Tasks execution such as service account and tolerations. Creating a
    PipelineRun creates TaskRuns for Tasks in the referenced Pipeline.

    Deprecated: Please use v1.PipelineRun instead.

    Attributes
    ----------
    apiVersion : str, default is "tekton.dev/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "PipelineRun", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : TektonDevV1beta1PipelineRunSpec, default is Undefined, optional
        spec
    status : TektonDevV1beta1PipelineRunStatus, default is Undefined, optional
        status
    """


    apiVersion: "tekton.dev/v1beta1" = "tekton.dev/v1beta1"

    kind: "PipelineRun" = "PipelineRun"

    metadata?: v1.ObjectMeta

    spec?: TektonDevV1beta1PipelineRunSpec

    status?: TektonDevV1beta1PipelineRunStatus


schema TektonDevV1beta1PipelineRunSpec:
    r"""
    PipelineRunSpec defines the desired state of PipelineRun

    Attributes
    ----------
    params : [TektonDevV1beta1PipelineRunSpecParamsItems0], default is Undefined, optional
        Params is a list of parameter names and values.
    pipelineRef : TektonDevV1beta1PipelineRunSpecPipelineRef, default is Undefined, optional
        pipeline ref
    pipelineSpec : any, default is Undefined, optional
        Specifying PipelineSpec can be disabled by setting
        `disable-inline-spec` feature flag.
        See Pipeline.spec (API version: tekton.dev/v1beta1)
    podTemplate : TektonDevV1beta1PipelineRunSpecPodTemplate, default is Undefined, optional
        pod template
    resources : [TektonDevV1beta1PipelineRunSpecResourcesItems0], default is Undefined, optional
        Resources is a list of bindings specifying which actual instances of
        PipelineResources to use for the resources the Pipeline has declared
        it needs.

        Deprecated: Unused, preserved only for backwards compatibility
    serviceAccountName : str, default is Undefined, optional
        service account name
    status : str, default is Undefined, optional
        Used for cancelling a pipelinerun (and maybe more later on)
    taskRunSpecs : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0], default is Undefined, optional
        TaskRunSpecs holds a set of runtime specs
    timeout : str, default is Undefined, optional
        Timeout is the Time after which the Pipeline times out.
        Defaults to never.
        Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration

        Deprecated: use pipelineRunSpec.Timeouts.Pipeline instead
    timeouts : TektonDevV1beta1PipelineRunSpecTimeouts, default is Undefined, optional
        timeouts
    workspaces : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0], default is Undefined, optional
        Workspaces holds a set of workspace bindings that must match names
        with those declared in the pipeline.
    """


    params?: [TektonDevV1beta1PipelineRunSpecParamsItems0]

    pipelineRef?: TektonDevV1beta1PipelineRunSpecPipelineRef

    pipelineSpec?: any

    podTemplate?: TektonDevV1beta1PipelineRunSpecPodTemplate

    resources?: [TektonDevV1beta1PipelineRunSpecResourcesItems0]

    serviceAccountName?: str

    status?: str

    taskRunSpecs?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0]

    timeout?: str

    timeouts?: TektonDevV1beta1PipelineRunSpecTimeouts

    workspaces?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0]


schema TektonDevV1beta1PipelineRunSpecParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1beta1PipelineRunSpecPipelineRef:
    r"""
    PipelineRef can be used to refer to a specific instance of a Pipeline.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
    bundle : str, default is Undefined, optional
        Bundle url reference to a Tekton Bundle.

        Deprecated: Please use ResolverRef with the bundles resolver instead.
        The field is staying there for go client backward compatibility, but is not used/allowed anymore.
    name : str, default is Undefined, optional
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    params : [TektonDevV1beta1PipelineRunSpecPipelineRefParamsItems0], default is Undefined, optional
        Params contains the parameters used to identify the
        referenced Tekton resource. Example entries might include
        "repo" or "path" but the set of params ultimately depends on
        the chosen resolver.
    resolver : str, default is Undefined, optional
        Resolver is the name of the resolver that should perform
        resolution of the referenced Tekton resource, such as "git".
    """


    apiVersion?: str

    bundle?: str

    name?: str

    params?: [TektonDevV1beta1PipelineRunSpecPipelineRefParamsItems0]

    resolver?: str


schema TektonDevV1beta1PipelineRunSpecPipelineRefParamsItems0:
    r"""
    Param declares an ParamValues to use for the parameter called name.

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : any, default is Undefined, required
        value
    """


    name: str

    value: any


schema TektonDevV1beta1PipelineRunSpecPodTemplate:
    r"""
    PodTemplate holds pod specific configuration

    Attributes
    ----------
    affinity : any, default is Undefined, optional
        If specified, the pod's scheduling constraints.
        See Pod.spec.affinity (API version: v1)
    automountServiceAccountToken : bool, default is Undefined, optional
        AutomountServiceAccountToken indicates whether pods running as this
        service account should have an API token automatically mounted.
    dnsConfig : TektonDevV1beta1PipelineRunSpecPodTemplateDNSConfig, default is Undefined, optional
        dns config
    dnsPolicy : str, default is Undefined, optional
        Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are
        'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig
        will be merged with the policy selected with DNSPolicy.
    enableServiceLinks : bool, default is Undefined, optional
        EnableServiceLinks indicates whether information about services should be injected into pod's
        environment variables, matching the syntax of Docker links.
        Optional: Defaults to true.
    env : [TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0], default is Undefined, optional
        List of environment variables that can be provided to the containers belonging to the pod.
    hostAliases : [TektonDevV1beta1PipelineRunSpecPodTemplateHostAliasesItems0], default is Undefined, optional
        HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
        file if specified. This is only valid for non-hostNetwork pods.
    hostNetwork : bool, default is Undefined, optional
        HostNetwork specifies whether the pod may use the node network namespace
    imagePullSecrets : [TektonDevV1beta1PipelineRunSpecPodTemplateImagePullSecretsItems0], default is Undefined, optional
        ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    priorityClassName : str, default is Undefined, optional
        If specified, indicates the pod's priority. "system-node-critical" and
        "system-cluster-critical" are two special keywords which indicate the
        highest priorities with the former being the highest priority. Any other
        name must be defined by creating a PriorityClass object with that name.
        If not specified, the pod priority will be default or zero if there is no
        default.
    runtimeClassName : str, default is Undefined, optional
        RuntimeClassName refers to a RuntimeClass object in the node.k8s.io
        group, which should be used to run this pod. If no RuntimeClass resource
        matches the named class, the pod will not be run. If unset or empty, the
        "legacy" RuntimeClass will be used, which is an implicit class with an
        empty definition that uses the default runtime handler.
        More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
        This is a beta feature as of Kubernetes v1.14.
    schedulerName : str, default is Undefined, optional
        SchedulerName specifies the scheduler to be used to dispatch the Pod
    securityContext : any, default is Undefined, optional
        SecurityContext holds pod-level security attributes and common container settings.
        Optional: Defaults to empty.  See type description for default values of each field.
        See Pod.spec.securityContext (API version: v1)
    tolerations : [TektonDevV1beta1PipelineRunSpecPodTemplateTolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    topologySpreadConstraints : [TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0], default is Undefined, optional
        TopologySpreadConstraints controls how Pods are spread across your cluster among
        failure-domains such as regions, zones, nodes, and other user-defined topology domains.
    volumes : any, default is Undefined, optional
        List of volumes that can be mounted by containers belonging to the pod.
        More info: https://kubernetes.io/docs/concepts/storage/volumes
        See Pod.spec.volumes (API version: v1)
    """


    affinity?: any

    automountServiceAccountToken?: bool

    dnsConfig?: TektonDevV1beta1PipelineRunSpecPodTemplateDNSConfig

    dnsPolicy?: str

    enableServiceLinks?: bool

    env?: [TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0]

    hostAliases?: [TektonDevV1beta1PipelineRunSpecPodTemplateHostAliasesItems0]

    hostNetwork?: bool

    imagePullSecrets?: [TektonDevV1beta1PipelineRunSpecPodTemplateImagePullSecretsItems0]

    nodeSelector?: {str:str}

    priorityClassName?: str

    runtimeClassName?: str

    schedulerName?: str

    securityContext?: any

    tolerations?: [TektonDevV1beta1PipelineRunSpecPodTemplateTolerationsItems0]

    topologySpreadConstraints?: [TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0]

    volumes?: any


schema TektonDevV1beta1PipelineRunSpecPodTemplateDNSConfig:
    r"""
    Specifies the DNS parameters of a pod.
    Parameters specified here will be merged to the generated DNS
    configuration based on DNSPolicy.

    Attributes
    ----------
    nameservers : [str], default is Undefined, optional
        A list of DNS name server IP addresses.
        This will be appended to the base nameservers generated from DNSPolicy.
        Duplicated nameservers will be removed.
    options : [TektonDevV1beta1PipelineRunSpecPodTemplateDNSConfigOptionsItems0], default is Undefined, optional
        A list of DNS resolver options.
        This will be merged with the base options generated from DNSPolicy.
        Duplicated entries will be removed. Resolution options given in Options
        will override those that appear in the base DNSPolicy.
    searches : [str], default is Undefined, optional
        A list of DNS search domains for host-name lookup.
        This will be appended to the base search paths generated from DNSPolicy.
        Duplicated search paths will be removed.
    """


    nameservers?: [str]

    options?: [TektonDevV1beta1PipelineRunSpecPodTemplateDNSConfigOptionsItems0]

    searches?: [str]


schema TektonDevV1beta1PipelineRunSpecPodTemplateDNSConfigOptionsItems0:
    r"""
    PodDNSConfigOption defines DNS resolver options of a pod.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name is this DNS resolver option's name.
        Required.
    value : str, default is Undefined, optional
        Value is this DNS resolver option's value.
    """


    name?: str

    value?: str


schema TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFrom


schema TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromConfigMapKeyRef

    fieldRef?: TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromFieldRef

    resourceFieldRef?: TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromResourceFieldRef

    secretKeyRef?: TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromSecretKeyRef


schema TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema TektonDevV1beta1PipelineRunSpecPodTemplateEnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1beta1PipelineRunSpecPodTemplateHostAliasesItems0:
    r"""
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
    pod's hosts file.

    Attributes
    ----------
    hostnames : [str], default is Undefined, optional
        Hostnames for the above IP address.
    ip : str, default is Undefined, required
        IP address of the host file entry.
    """


    hostnames?: [str]

    ip: str


schema TektonDevV1beta1PipelineRunSpecPodTemplateImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    name?: str = ""


schema TektonDevV1beta1PipelineRunSpecPodTemplateTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0:
    r"""
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    Attributes
    ----------
    labelSelector : TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select the pods over which
        spreading will be calculated. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are ANDed with labelSelector
        to select the group of existing pods over which spreading will be calculated
        for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
        MatchLabelKeys cannot be set when LabelSelector isn't set.
        Keys that don't exist in the incoming pod labels will
        be ignored. A null or empty list means only match against labelSelector.

        This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    maxSkew : int, default is Undefined, required
        MaxSkew describes the degree to which pods may be unevenly distributed.
        When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
        between the number of matching pods in the target topology and the global minimum.
        The global minimum is the minimum number of matching pods in an eligible domain
        or zero if the number of eligible domains is less than MinDomains.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 2/2/1:
        In this case, the global minimum is 1.
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |   P   |
        - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
        scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
        violate MaxSkew(1).
        - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
        When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
        to topologies that satisfy it.
        It's a required field. Default value is 1 and 0 is not allowed.
    minDomains : int, default is Undefined, optional
        MinDomains indicates a minimum number of eligible domains.
        When the number of eligible domains with matching topology keys is less than minDomains,
        Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
        And when the number of eligible domains with matching topology keys equals or greater than minDomains,
        this value has no effect on scheduling.
        As a result, when the number of eligible domains is less than minDomains,
        scheduler won't schedule more than maxSkew Pods to those domains.
        If value is nil, the constraint behaves as if MinDomains is equal to 1.
        Valid values are integers greater than 0.
        When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

        For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
        labelSelector spread as 2/2/2:
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |  P P  |
        The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
        In this situation, new pod with the same labelSelector cannot be scheduled,
        because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
        it will violate MaxSkew.
    nodeAffinityPolicy : str, default is Undefined, optional
        NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
        when calculating pod topology spread skew. Options are:
        - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
        - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

        If this value is nil, the behavior is equivalent to the Honor policy.
        This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    nodeTaintsPolicy : str, default is Undefined, optional
        NodeTaintsPolicy indicates how we will treat node taints when calculating
        pod topology spread skew. Options are:
        - Honor: nodes without taints, along with tainted nodes for which the incoming pod
        has a toleration, are included.
        - Ignore: node taints are ignored. All nodes are included.

        If this value is nil, the behavior is equivalent to the Ignore policy.
        This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    topologyKey : str, default is Undefined, required
        TopologyKey is the key of node labels. Nodes that have a label with this key
        and identical values are considered to be in the same topology.
        We consider each <key, value> as a "bucket", and try to put balanced number
        of pods into each bucket.
        We define a domain as a particular instance of a topology.
        Also, we define an eligible domain as a domain whose nodes meet the requirements of
        nodeAffinityPolicy and nodeTaintsPolicy.
        e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
        And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
        It's a required field.
    whenUnsatisfiable : str, default is Undefined, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
        the spread constraint.
        - DoNotSchedule (default) tells the scheduler not to schedule it.
        - ScheduleAnyway tells the scheduler to schedule the pod in any location,
          but giving higher precedence to topologies that would help reduce the
          skew.
        A constraint is considered "Unsatisfiable" for an incoming pod
        if and only if every possible node assignment for that pod would violate
        "MaxSkew" on some topology.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 3/1/1:
        | zone1 | zone2 | zone3 |
        | P P P |   P   |   P   |
        If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
        to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
        MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
        won't make it *more* imbalanced.
        It's a required field.
    """


    labelSelector?: TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0LabelSelector

    matchLabelKeys?: [str]

    maxSkew: int

    minDomains?: int

    nodeAffinityPolicy?: str

    nodeTaintsPolicy?: str

    topologyKey: str

    whenUnsatisfiable: str


schema TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0LabelSelector:
    r"""
    LabelSelector is used to find matching pods.
    Pods that match this label selector are counted to determine the number of pods
    in their corresponding topology domain.

    Attributes
    ----------
    matchExpressions : [TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema TektonDevV1beta1PipelineRunSpecPodTemplateTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema TektonDevV1beta1PipelineRunSpecResourcesItems0:
    r"""
    PipelineResourceBinding connects a reference to an instance of a PipelineResource
    with a PipelineResource dependency that the Pipeline has declared

    Deprecated: Unused, preserved only for backwards compatibility

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name is the name of the PipelineResource in the Pipeline's declaration
    resourceRef : TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceRef, default is Undefined, optional
        resource ref
    resourceSpec : TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpec, default is Undefined, optional
        resource spec
    """


    name?: str

    resourceRef?: TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceRef

    resourceSpec?: TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpec


schema TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceRef:
    r"""
    ResourceRef is a reference to the instance of the actual PipelineResource
    that should be used

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent
    name : str, default is Undefined, optional
        Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
    """


    apiVersion?: str

    name?: str


schema TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpec:
    r"""
    ResourceSpec is specification of a resource that should be created and
    consumed by the task

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a user-facing description of the resource that may be
        used to populate a UI.
    params : [TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpecParamsItems0], default is Undefined, required
        params
    secrets : [TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpecSecretsItems0], default is Undefined, optional
        Secrets to fetch to populate some of resource fields
    $type : str, default is Undefined, required
        PipelineResourceType represents the type of endpoint the pipelineResource is, so that the
        controller will know this pipelineResource shouldx be fetched and optionally what
        additional metatdata should be provided for it.

        Deprecated: Unused, preserved only for backwards compatibility
    """


    description?: str

    params: [TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpecParamsItems0]

    secrets?: [TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpecSecretsItems0]

    $type: str


schema TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpecParamsItems0:
    r"""
    ResourceParam declares a string value to use for the parameter called Name, and is used in
    the specific context of PipelineResources.

    Deprecated: Unused, preserved only for backwards compatibility

    Attributes
    ----------
    name : str, default is Undefined, required
        name
    value : str, default is Undefined, required
        value
    """


    name: str

    value: str


schema TektonDevV1beta1PipelineRunSpecResourcesItems0ResourceSpecSecretsItems0:
    r"""
    SecretParam indicates which secret can be used to populate a field of the resource

    Deprecated: Unused, preserved only for backwards compatibility

    Attributes
    ----------
    fieldName : str, default is Undefined, required
        field name
    secretKey : str, default is Undefined, required
        secret key
    secretName : str, default is Undefined, required
        secret name
    """


    fieldName: str

    secretKey: str

    secretName: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0:
    r"""
    PipelineTaskRunSpec  can be used to configure specific
    specs for a concrete Task

    Attributes
    ----------
    computeResources : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0ComputeResources, default is Undefined, optional
        compute resources
    metadata : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0Metadata, default is Undefined, optional
        metadata
    pipelineTaskName : str, default is Undefined, optional
        pipeline task name
    sidecarOverrides : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0], default is Undefined, optional
        sidecar overrides
    stepOverrides : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0], default is Undefined, optional
        step overrides
    taskPodTemplate : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplate, default is Undefined, optional
        task pod template
    taskServiceAccountName : str, default is Undefined, optional
        task service account name
    """


    computeResources?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0ComputeResources

    metadata?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0Metadata

    pipelineTaskName?: str

    sidecarOverrides?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0]

    stepOverrides?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0]

    taskPodTemplate?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplate

    taskServiceAccountName?: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0ComputeResources:
    r"""
    Compute resources to use for this TaskRun

    Attributes
    ----------
    claims : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0ComputeResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    claims?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0ComputeResourcesClaimsItems0]

    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, limits in limits { _regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits } if limits
        all _, requests in requests { _regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests } if requests


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0ComputeResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """


    name: str

    request?: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0Metadata:
    r"""
    PipelineTaskMetadata contains the labels or annotations for an EmbeddedTask

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        annotations
    labels : {str:str}, default is Undefined, optional
        labels
    """


    annotations?: {str:str}

    labels?: {str:str}


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0:
    r"""
    TaskRunSidecarOverride is used to override the values of a Sidecar in the corresponding Task.

    Attributes
    ----------
    name : str, default is Undefined, required
        The name of the Sidecar to override.
    resources : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0Resources, default is Undefined, required
        resources
    """


    name: str

    resources: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0Resources


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0Resources:
    r"""
    The resource requirements to apply to the Sidecar.

    Attributes
    ----------
    claims : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0ResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    claims?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0ResourcesClaimsItems0]

    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, limits in limits { _regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits } if limits
        all _, requests in requests { _regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests } if requests


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0SidecarOverridesItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """


    name: str

    request?: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0:
    r"""
    TaskRunStepOverride is used to override the values of a Step in the corresponding Task.

    Attributes
    ----------
    name : str, default is Undefined, required
        The name of the Step to override.
    resources : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0Resources, default is Undefined, required
        resources
    """


    name: str

    resources: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0Resources


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0Resources:
    r"""
    The resource requirements to apply to the Step.

    Attributes
    ----------
    claims : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0ResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """


    claims?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0ResourcesClaimsItems0]

    limits?: {str:int | str}

    requests?: {str:int | str}


    check:
        all _, limits in limits { _regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits } if limits
        all _, requests in requests { _regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests } if requests


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0StepOverridesItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """


    name: str

    request?: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplate:
    r"""
    PodTemplate holds pod specific configuration

    Attributes
    ----------
    affinity : any, default is Undefined, optional
        If specified, the pod's scheduling constraints.
        See Pod.spec.affinity (API version: v1)
    automountServiceAccountToken : bool, default is Undefined, optional
        AutomountServiceAccountToken indicates whether pods running as this
        service account should have an API token automatically mounted.
    dnsConfig : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateDNSConfig, default is Undefined, optional
        dns config
    dnsPolicy : str, default is Undefined, optional
        Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are
        'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig
        will be merged with the policy selected with DNSPolicy.
    enableServiceLinks : bool, default is Undefined, optional
        EnableServiceLinks indicates whether information about services should be injected into pod's
        environment variables, matching the syntax of Docker links.
        Optional: Defaults to true.
    env : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0], default is Undefined, optional
        List of environment variables that can be provided to the containers belonging to the pod.
    hostAliases : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateHostAliasesItems0], default is Undefined, optional
        HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
        file if specified. This is only valid for non-hostNetwork pods.
    hostNetwork : bool, default is Undefined, optional
        HostNetwork specifies whether the pod may use the node network namespace
    imagePullSecrets : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateImagePullSecretsItems0], default is Undefined, optional
        ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    priorityClassName : str, default is Undefined, optional
        If specified, indicates the pod's priority. "system-node-critical" and
        "system-cluster-critical" are two special keywords which indicate the
        highest priorities with the former being the highest priority. Any other
        name must be defined by creating a PriorityClass object with that name.
        If not specified, the pod priority will be default or zero if there is no
        default.
    runtimeClassName : str, default is Undefined, optional
        RuntimeClassName refers to a RuntimeClass object in the node.k8s.io
        group, which should be used to run this pod. If no RuntimeClass resource
        matches the named class, the pod will not be run. If unset or empty, the
        "legacy" RuntimeClass will be used, which is an implicit class with an
        empty definition that uses the default runtime handler.
        More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
        This is a beta feature as of Kubernetes v1.14.
    schedulerName : str, default is Undefined, optional
        SchedulerName specifies the scheduler to be used to dispatch the Pod
    securityContext : any, default is Undefined, optional
        SecurityContext holds pod-level security attributes and common container settings.
        Optional: Defaults to empty.  See type description for default values of each field.
        See Pod.spec.securityContext (API version: v1)
    tolerations : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    topologySpreadConstraints : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0], default is Undefined, optional
        TopologySpreadConstraints controls how Pods are spread across your cluster among
        failure-domains such as regions, zones, nodes, and other user-defined topology domains.
    volumes : any, default is Undefined, optional
        List of volumes that can be mounted by containers belonging to the pod.
        More info: https://kubernetes.io/docs/concepts/storage/volumes
        See Pod.spec.volumes (API version: v1)
    """


    affinity?: any

    automountServiceAccountToken?: bool

    dnsConfig?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateDNSConfig

    dnsPolicy?: str

    enableServiceLinks?: bool

    env?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0]

    hostAliases?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateHostAliasesItems0]

    hostNetwork?: bool

    imagePullSecrets?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateImagePullSecretsItems0]

    nodeSelector?: {str:str}

    priorityClassName?: str

    runtimeClassName?: str

    schedulerName?: str

    securityContext?: any

    tolerations?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTolerationsItems0]

    topologySpreadConstraints?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0]

    volumes?: any


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateDNSConfig:
    r"""
    Specifies the DNS parameters of a pod.
    Parameters specified here will be merged to the generated DNS
    configuration based on DNSPolicy.

    Attributes
    ----------
    nameservers : [str], default is Undefined, optional
        A list of DNS name server IP addresses.
        This will be appended to the base nameservers generated from DNSPolicy.
        Duplicated nameservers will be removed.
    options : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateDNSConfigOptionsItems0], default is Undefined, optional
        A list of DNS resolver options.
        This will be merged with the base options generated from DNSPolicy.
        Duplicated entries will be removed. Resolution options given in Options
        will override those that appear in the base DNSPolicy.
    searches : [str], default is Undefined, optional
        A list of DNS search domains for host-name lookup.
        This will be appended to the base search paths generated from DNSPolicy.
        Duplicated search paths will be removed.
    """


    nameservers?: [str]

    options?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateDNSConfigOptionsItems0]

    searches?: [str]


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateDNSConfigOptionsItems0:
    r"""
    PodDNSConfigOption defines DNS resolver options of a pod.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name is this DNS resolver option's name.
        Required.
    value : str, default is Undefined, optional
        Value is this DNS resolver option's value.
    """


    name?: str

    value?: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFrom


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromConfigMapKeyRef

    fieldRef?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromFieldRef

    resourceFieldRef?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromResourceFieldRef

    secretKeyRef?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromSecretKeyRef


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateEnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str = ""

    optional?: bool


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateHostAliasesItems0:
    r"""
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
    pod's hosts file.

    Attributes
    ----------
    hostnames : [str], default is Undefined, optional
        Hostnames for the above IP address.
    ip : str, default is Undefined, required
        IP address of the host file entry.
    """


    hostnames?: [str]

    ip: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    name?: str = ""


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0:
    r"""
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    Attributes
    ----------
    labelSelector : TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select the pods over which
        spreading will be calculated. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are ANDed with labelSelector
        to select the group of existing pods over which spreading will be calculated
        for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
        MatchLabelKeys cannot be set when LabelSelector isn't set.
        Keys that don't exist in the incoming pod labels will
        be ignored. A null or empty list means only match against labelSelector.

        This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    maxSkew : int, default is Undefined, required
        MaxSkew describes the degree to which pods may be unevenly distributed.
        When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
        between the number of matching pods in the target topology and the global minimum.
        The global minimum is the minimum number of matching pods in an eligible domain
        or zero if the number of eligible domains is less than MinDomains.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 2/2/1:
        In this case, the global minimum is 1.
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |   P   |
        - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
        scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
        violate MaxSkew(1).
        - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
        When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
        to topologies that satisfy it.
        It's a required field. Default value is 1 and 0 is not allowed.
    minDomains : int, default is Undefined, optional
        MinDomains indicates a minimum number of eligible domains.
        When the number of eligible domains with matching topology keys is less than minDomains,
        Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
        And when the number of eligible domains with matching topology keys equals or greater than minDomains,
        this value has no effect on scheduling.
        As a result, when the number of eligible domains is less than minDomains,
        scheduler won't schedule more than maxSkew Pods to those domains.
        If value is nil, the constraint behaves as if MinDomains is equal to 1.
        Valid values are integers greater than 0.
        When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

        For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
        labelSelector spread as 2/2/2:
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |  P P  |
        The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
        In this situation, new pod with the same labelSelector cannot be scheduled,
        because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
        it will violate MaxSkew.
    nodeAffinityPolicy : str, default is Undefined, optional
        NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
        when calculating pod topology spread skew. Options are:
        - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
        - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

        If this value is nil, the behavior is equivalent to the Honor policy.
        This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    nodeTaintsPolicy : str, default is Undefined, optional
        NodeTaintsPolicy indicates how we will treat node taints when calculating
        pod topology spread skew. Options are:
        - Honor: nodes without taints, along with tainted nodes for which the incoming pod
        has a toleration, are included.
        - Ignore: node taints are ignored. All nodes are included.

        If this value is nil, the behavior is equivalent to the Ignore policy.
        This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
    topologyKey : str, default is Undefined, required
        TopologyKey is the key of node labels. Nodes that have a label with this key
        and identical values are considered to be in the same topology.
        We consider each <key, value> as a "bucket", and try to put balanced number
        of pods into each bucket.
        We define a domain as a particular instance of a topology.
        Also, we define an eligible domain as a domain whose nodes meet the requirements of
        nodeAffinityPolicy and nodeTaintsPolicy.
        e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
        And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
        It's a required field.
    whenUnsatisfiable : str, default is Undefined, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
        the spread constraint.
        - DoNotSchedule (default) tells the scheduler not to schedule it.
        - ScheduleAnyway tells the scheduler to schedule the pod in any location,
          but giving higher precedence to topologies that would help reduce the
          skew.
        A constraint is considered "Unsatisfiable" for an incoming pod
        if and only if every possible node assignment for that pod would violate
        "MaxSkew" on some topology.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 3/1/1:
        | zone1 | zone2 | zone3 |
        | P P P |   P   |   P   |
        If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
        to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
        MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
        won't make it *more* imbalanced.
        It's a required field.
    """


    labelSelector?: TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0LabelSelector

    matchLabelKeys?: [str]

    maxSkew: int

    minDomains?: int

    nodeAffinityPolicy?: str

    nodeTaintsPolicy?: str

    topologyKey: str

    whenUnsatisfiable: str


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0LabelSelector:
    r"""
    LabelSelector is used to find matching pods.
    Pods that match this label selector are counted to determine the number of pods
    in their corresponding topology domain.

    Attributes
    ----------
    matchExpressions : [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema TektonDevV1beta1PipelineRunSpecTaskRunSpecsItems0TaskPodTemplateTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema TektonDevV1beta1PipelineRunSpecTimeouts:
    r"""
    Time after which the Pipeline times out.
    Currently three keys are accepted in the map
    pipeline, tasks and finally
    with Timeouts.pipeline >= Timeouts.tasks + Timeouts.finally

    Attributes
    ----------
    finally : str, default is Undefined, optional
        Finally sets the maximum allowed duration of this pipeline's finally
    pipeline : str, default is Undefined, optional
        Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.
    tasks : str, default is Undefined, optional
        Tasks sets the maximum allowed duration of this pipeline's tasks
    """


    finally?: str

    pipeline?: str

    tasks?: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0:
    r"""
    WorkspaceBinding maps a Task's declared workspace to a Volume.

    Attributes
    ----------
    configMap : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ConfigMap, default is Undefined, optional
        config map
    csi : TektonDevV1beta1PipelineRunSpecWorkspacesItems0Csi, default is Undefined, optional
        csi
    emptyDir : TektonDevV1beta1PipelineRunSpecWorkspacesItems0EmptyDir, default is Undefined, optional
        empty dir
    name : str, default is Undefined, required
        Name is the name of the workspace populated by the volume.
    persistentVolumeClaim : TektonDevV1beta1PipelineRunSpecWorkspacesItems0PersistentVolumeClaim, default is Undefined, optional
        persistent volume claim
    projected : TektonDevV1beta1PipelineRunSpecWorkspacesItems0Projected, default is Undefined, optional
        projected
    secret : TektonDevV1beta1PipelineRunSpecWorkspacesItems0Secret, default is Undefined, optional
        secret
    subPath : str, default is Undefined, optional
        SubPath is optionally a directory on the volume which should be used
        for this binding (i.e. the volume will be mounted at this sub directory).
    volumeClaimTemplate : any, default is Undefined, optional
        VolumeClaimTemplate is a template for a claim that will be created in the same namespace.
        The PipelineRun controller is responsible for creating a unique claim for each instance of PipelineRun.
        See PersistentVolumeClaim (API version: v1)
    """


    configMap?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ConfigMap

    csi?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0Csi

    emptyDir?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0EmptyDir

    name: str

    persistentVolumeClaim?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0PersistentVolumeClaim

    projected?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0Projected

    secret?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0Secret

    subPath?: str

    volumeClaimTemplate?: any


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ConfigMap:
    r"""
    ConfigMap represents a configMap that should populate this workspace.

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode is optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ConfigMapItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        ConfigMap will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the ConfigMap,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional specify whether the ConfigMap or its keys must be defined
    """


    defaultMode?: int

    items?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ConfigMapItemsItems0]

    name?: str = ""

    optional?: bool


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """


    key: str

    mode?: int

    path: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0Csi:
    r"""
    CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.

    Attributes
    ----------
    driver : str, default is Undefined, required
        driver is the name of the CSI driver that handles this volume.
        Consult with your admin for the correct name as registered in the cluster.
    fsType : str, default is Undefined, optional
        fsType to mount. Ex. "ext4", "xfs", "ntfs".
        If not provided, the empty value is passed to the associated CSI driver
        which will determine the default filesystem to apply.
    nodePublishSecretRef : TektonDevV1beta1PipelineRunSpecWorkspacesItems0CsiNodePublishSecretRef, default is Undefined, optional
        node publish secret ref
    readOnly : bool, default is Undefined, optional
        readOnly specifies a read-only configuration for the volume.
        Defaults to false (read/write).
    volumeAttributes : {str:str}, default is Undefined, optional
        volumeAttributes stores driver-specific properties that are passed to the CSI
        driver. Consult your driver's documentation for supported values.
    """


    driver: str

    fsType?: str

    nodePublishSecretRef?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0CsiNodePublishSecretRef

    readOnly?: bool

    volumeAttributes?: {str:str}


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0CsiNodePublishSecretRef:
    r"""
    nodePublishSecretRef is a reference to the secret object containing
    sensitive information to pass to the CSI driver to complete the CSI
    NodePublishVolume and NodeUnpublishVolume calls.
    This field is optional, and  may be empty if no secret is required. If the
    secret object contains more than one secret, all secret references are passed.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    name?: str = ""


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0EmptyDir:
    r"""
    EmptyDir represents a temporary directory that shares a Task's lifetime.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    Either this OR PersistentVolumeClaim can be used.

    Attributes
    ----------
    medium : str, default is Undefined, optional
        medium represents what type of storage medium should back this directory.
        The default is "" which means to use the node's default medium.
        Must be an empty string (default) or Memory.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    sizeLimit : int | str, default is Undefined, optional
        sizeLimit is the total amount of local storage required for this EmptyDir volume.
        The size limit is also applicable for memory medium.
        The maximum usage on memory medium EmptyDir would be the minimum value between
        the SizeLimit specified here and the sum of memory limits of all containers in a pod.
        The default is nil which means that the limit is undefined.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """


    medium?: str

    sizeLimit?: int | str


    check:
        _regex_match(str(sizeLimit), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if sizeLimit


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0PersistentVolumeClaim:
    r"""
    PersistentVolumeClaimVolumeSource represents a reference to a
    PersistentVolumeClaim in the same namespace. Either this OR EmptyDir can be used.

    Attributes
    ----------
    claimName : str, default is Undefined, required
        claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    readOnly : bool, default is Undefined, optional
        readOnly Will force the ReadOnly setting in VolumeMounts.
        Default false.
    """


    claimName: str

    readOnly?: bool


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0Projected:
    r"""
    Projected represents a projected volume that should populate this workspace.

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode are the mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    sources : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0], default is Undefined, optional
        sources is the list of volume projections. Each entry in this list
        handles one source.
    """


    defaultMode?: int

    sources?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0]


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0:
    r"""
    Projection that may be projected along with other supported volume types.
    Exactly one of these fields must be set.

    Attributes
    ----------
    clusterTrustBundle : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundle, default is Undefined, optional
        cluster trust bundle
    configMap : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ConfigMap, default is Undefined, optional
        config map
    downwardAPI : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPI, default is Undefined, optional
        downward API
    secret : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0Secret, default is Undefined, optional
        secret
    serviceAccountToken : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ServiceAccountToken, default is Undefined, optional
        service account token
    """


    clusterTrustBundle?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundle

    configMap?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ConfigMap

    downwardAPI?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPI

    secret?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0Secret

    serviceAccountToken?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ServiceAccountToken


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundle:
    r"""
    ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
    of ClusterTrustBundle objects in an auto-updating file.

    Alpha, gated by the ClusterTrustBundleProjection feature gate.

    ClusterTrustBundle objects can either be selected by name, or by the
    combination of signer name and a label selector.

    Kubelet performs aggressive normalization of the PEM contents written
    into the pod filesystem.  Esoteric PEM features such as inter-block
    comments and block headers are stripped.  Certificates are deduplicated.
    The ordering of certificates within the file is arbitrary, and Kubelet
    may change the order over time.

    Attributes
    ----------
    labelSelector : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector, default is Undefined, optional
        label selector
    name : str, default is Undefined, optional
        Select a single ClusterTrustBundle by object name.  Mutually-exclusive
        with signerName and labelSelector.
    optional : bool, default is Undefined, optional
        If true, don't block pod startup if the referenced ClusterTrustBundle(s)
        aren't available.  If using name, then the named ClusterTrustBundle is
        allowed not to exist.  If using signerName, then the combination of
        signerName and labelSelector is allowed to match zero
        ClusterTrustBundles.
    path : str, default is Undefined, required
        Relative path from the volume root to write the bundle.
    signerName : str, default is Undefined, optional
        Select all ClusterTrustBundles that match this signer name.
        Mutually-exclusive with name.  The contents of all selected
        ClusterTrustBundles will be unified and deduplicated.
    """


    labelSelector?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector

    name?: str

    optional?: bool

    path: str

    signerName?: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector:
    r"""
    Select all ClusterTrustBundles that match this label selector.  Only has
    effect if signerName is set.  Mutually-exclusive with name.  If unset,
    interpreted as "match nothing".  If set but empty, interpreted as "match
    everything".

    Attributes
    ----------
    matchExpressions : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ConfigMap:
    r"""
    configMap information about the configMap data to project

    Attributes
    ----------
    items : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ConfigMapItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        ConfigMap will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the ConfigMap,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional specify whether the ConfigMap or its keys must be defined
    """


    items?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ConfigMapItemsItems0]

    name?: str = ""

    optional?: bool


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """


    key: str

    mode?: int

    path: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPI:
    r"""
    downwardAPI information about the downwardAPI data to project

    Attributes
    ----------
    items : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0], default is Undefined, optional
        Items is a list of DownwardAPIVolume file
    """


    items?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0]


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef, default is Undefined, optional
        field ref
    mode : int, default is Undefined, optional
        Optional: mode bits used to set permissions on this file, must be an octal value
        between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef, default is Undefined, optional
        resource field ref
    """


    fieldRef?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef

    mode?: int

    path: str

    resourceFieldRef?: TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef:
    r"""
    Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0Secret:
    r"""
    secret information about the secret data to project

    Attributes
    ----------
    items : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0SecretItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        Secret will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the Secret,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional field specify whether the Secret or its key must be defined
    """


    items?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0SecretItemsItems0]

    name?: str = ""

    optional?: bool


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """


    key: str

    mode?: int

    path: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0ProjectedSourcesItems0ServiceAccountToken:
    r"""
    serviceAccountToken is information about the serviceAccountToken data to project

    Attributes
    ----------
    audience : str, default is Undefined, optional
        audience is the intended audience of the token. A recipient of a token
        must identify itself with an identifier specified in the audience of the
        token, and otherwise should reject the token. The audience defaults to the
        identifier of the apiserver.
    expirationSeconds : int, default is Undefined, optional
        expirationSeconds is the requested duration of validity of the service
        account token. As the token approaches expiration, the kubelet volume
        plugin will proactively rotate the service account token. The kubelet will
        start trying to rotate the token if the token is older than 80 percent of
        its time to live or if the token is older than 24 hours.Defaults to 1 hour
        and must be at least 10 minutes.
    path : str, default is Undefined, required
        path is the path relative to the mount point of the file to project the
        token into.
    """


    audience?: str

    expirationSeconds?: int

    path: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0Secret:
    r"""
    Secret represents a secret that should populate this workspace.

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode is Optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values
        for mode bits. Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [TektonDevV1beta1PipelineRunSpecWorkspacesItems0SecretItemsItems0], default is Undefined, optional
        items If unspecified, each key-value pair in the Data field of the referenced
        Secret will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the Secret,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    optional : bool, default is Undefined, optional
        optional field specify whether the Secret or its keys must be defined
    secretName : str, default is Undefined, optional
        secretName is the name of the secret in the pod's namespace to use.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    """


    defaultMode?: int

    items?: [TektonDevV1beta1PipelineRunSpecWorkspacesItems0SecretItemsItems0]

    optional?: bool

    secretName?: str


schema TektonDevV1beta1PipelineRunSpecWorkspacesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """


    key: str

    mode?: int

    path: str


schema TektonDevV1beta1PipelineRunStatus:
    r"""
    PipelineRunStatus defines the observed state of PipelineRun

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some
        additional State as well as convey more information to the user. This is
        roughly akin to Annotations on any k8s resource, just the reconciler conveying
        richer information outwards.
    childReferences : [TektonDevV1beta1PipelineRunStatusChildReferencesItems0], default is Undefined, optional
        list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.
    completionTime : str, default is Undefined, optional
        CompletionTime is the time the PipelineRun completed.
    conditions : [TektonDevV1beta1PipelineRunStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    finallyStartTime : str, default is Undefined, optional
        FinallyStartTime is when all non-finally tasks have been completed and only finally tasks are being executed.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that
        was last processed by the controller.
    pipelineResults : [TektonDevV1beta1PipelineRunStatusPipelineResultsItems0], default is Undefined, optional
        PipelineResults are the list of results written out by the pipeline task's containers
    pipelineSpec : any, default is Undefined, optional
        PipelineSpec contains the exact spec used to instantiate the run.
        See Pipeline.spec (API version: tekton.dev/v1beta1)
    provenance : TektonDevV1beta1PipelineRunStatusProvenance, default is Undefined, optional
        provenance
    runs : {str:TektonDevV1beta1PipelineRunStatusRunsAnon}, default is Undefined, optional
        Runs is a map of PipelineRunRunStatus with the run name as the key

        Deprecated: use ChildReferences instead. As of v0.45.0, this field is no
        longer populated and is only included for backwards compatibility with
        older server versions.
    skippedTasks : [TektonDevV1beta1PipelineRunStatusSkippedTasksItems0], default is Undefined, optional
        list of tasks that were skipped due to when expressions evaluating to false
    spanContext : {str:str}, default is Undefined, optional
        SpanContext contains tracing span context fields
    startTime : str, default is Undefined, optional
        StartTime is the time the PipelineRun is actually started.
    taskRuns : {str:TektonDevV1beta1PipelineRunStatusTaskRunsAnon}, default is Undefined, optional
        TaskRuns is a map of PipelineRunTaskRunStatus with the taskRun name as the key.

        Deprecated: use ChildReferences instead. As of v0.45.0, this field is no
        longer populated and is only included for backwards compatibility with
        older server versions.
    """


    annotations?: {str:str}

    childReferences?: [TektonDevV1beta1PipelineRunStatusChildReferencesItems0]

    completionTime?: str

    conditions?: [TektonDevV1beta1PipelineRunStatusConditionsItems0]

    finallyStartTime?: str

    observedGeneration?: int

    pipelineResults?: [TektonDevV1beta1PipelineRunStatusPipelineResultsItems0]

    pipelineSpec?: any

    provenance?: TektonDevV1beta1PipelineRunStatusProvenance

    runs?: {str:TektonDevV1beta1PipelineRunStatusRunsAnon}

    skippedTasks?: [TektonDevV1beta1PipelineRunStatusSkippedTasksItems0]

    spanContext?: {str:str}

    startTime?: str

    taskRuns?: {str:TektonDevV1beta1PipelineRunStatusTaskRunsAnon}


schema TektonDevV1beta1PipelineRunStatusChildReferencesItems0:
    r"""
    ChildStatusReference is used to point to the statuses of individual TaskRuns and Runs within this PipelineRun.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        api version
    displayName : str, default is Undefined, optional
        DisplayName is a user-facing name of the pipelineTask that may be
        used to populate a UI.
    kind : str, default is Undefined, optional
        kind
    name : str, default is Undefined, optional
        Name is the name of the TaskRun or Run this is referencing.
    pipelineTaskName : str, default is Undefined, optional
        PipelineTaskName is the name of the PipelineTask this is referencing.
    whenExpressions : [TektonDevV1beta1PipelineRunStatusChildReferencesItems0WhenExpressionsItems0], default is Undefined, optional
        WhenExpressions is the list of checks guarding the execution of the PipelineTask
    """


    apiVersion?: str

    displayName?: str

    kind?: str

    name?: str

    pipelineTaskName?: str

    whenExpressions?: [TektonDevV1beta1PipelineRunStatusChildReferencesItems0WhenExpressionsItems0]


schema TektonDevV1beta1PipelineRunStatusChildReferencesItems0WhenExpressionsItems0:
    r"""
    WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run
    to determine whether the Task should be executed or skipped

    Attributes
    ----------
    cel : str, default is Undefined, optional
        CEL is a string of Common Language Expression, which can be used to conditionally execute
        the task based on the result of the expression evaluation
        More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
    input : str, default is Undefined, optional
        Input is the string for guard checking which can be a static input or an output from a parent Task
    operator : str, default is Undefined, optional
        Operator that represents an Input's relationship to the values
    values : [str], default is Undefined, optional
        Values is an array of strings, which is compared against the input, for guard checking
        It must be non-empty
    """


    cel?: str

    input?: str

    operator?: str

    values?: [str]


schema TektonDevV1beta1PipelineRunStatusConditionsItems0:
    r"""
    Condition defines a readiness condition for a Knative resource.
    See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another.
        We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
        differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition.
        When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema TektonDevV1beta1PipelineRunStatusPipelineResultsItems0:
    r"""
    PipelineRunResult used to describe the results of a pipeline

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the result's name as declared by the Pipeline
    value : any, default is Undefined, required
        Value is the result returned from the execution of this PipelineRun
    """


    name: str

    value: any


schema TektonDevV1beta1PipelineRunStatusProvenance:
    r"""
    Provenance contains some key authenticated metadata about how a software artifact was built (what sources, what inputs/outputs, etc.).

    Attributes
    ----------
    configSource : TektonDevV1beta1PipelineRunStatusProvenanceConfigSource, default is Undefined, optional
        config source
    featureFlags : TektonDevV1beta1PipelineRunStatusProvenanceFeatureFlags, default is Undefined, optional
        feature flags
    refSource : TektonDevV1beta1PipelineRunStatusProvenanceRefSource, default is Undefined, optional
        ref source
    """


    configSource?: TektonDevV1beta1PipelineRunStatusProvenanceConfigSource

    featureFlags?: TektonDevV1beta1PipelineRunStatusProvenanceFeatureFlags

    refSource?: TektonDevV1beta1PipelineRunStatusProvenanceRefSource


schema TektonDevV1beta1PipelineRunStatusProvenanceConfigSource:
    r"""
    Deprecated: Use RefSource instead

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
        Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
    entryPoint : str, default is Undefined, optional
        EntryPoint identifies the entry point into the build. This is often a path to a
        build definition file and/or a target label within that file.
        Example: "task/git-clone/0.8/git-clone.yaml"
    uri : str, default is Undefined, optional
        URI indicates the identity of the source of the build definition.
        Example: "https://github.com/tektoncd/catalog"
    """


    digest?: {str:str}

    entryPoint?: str

    uri?: str


schema TektonDevV1beta1PipelineRunStatusProvenanceFeatureFlags:
    r"""
    FeatureFlags identifies the feature flags that were used during the task/pipeline run

    Attributes
    ----------
    awaitSidecarReadiness : bool, default is Undefined, optional
        await sidecar readiness
    coschedule : str, default is Undefined, optional
        coschedule
    disableCredsInit : bool, default is Undefined, optional
        disable creds init
    disableInlineSpec : str, default is Undefined, optional
        disable inline spec
    enableAPIFields : str, default is Undefined, optional
        enable API fields
    enableArtifacts : bool, default is Undefined, optional
        enable artifacts
    enableCELInWhenExpression : bool, default is Undefined, optional
        enable c e l in when expression
    enableConciseResolverSyntax : bool, default is Undefined, optional
        enable concise resolver syntax
    enableKeepPodOnCancel : bool, default is Undefined, optional
        enable keep pod on cancel
    enableKubernetesSidecar : bool, default is Undefined, optional
        enable kubernetes sidecar
    enableParamEnum : bool, default is Undefined, optional
        enable param enum
    enableProvenanceInStatus : bool, default is Undefined, optional
        enable provenance in status
    enableStepActions : bool, default is Undefined, optional
        EnableStepActions is a no-op flag since StepActions are stable
    enforceNonfalsifiability : str, default is Undefined, optional
        enforce nonfalsifiability
    maxResultSize : int, default is Undefined, optional
        max result size
    requireGitSSHSecretKnownHosts : bool, default is Undefined, optional
        require git SSH secret known hosts
    resultExtractionMethod : str, default is Undefined, optional
        result extraction method
    runningInEnvWithInjectedSidecars : bool, default is Undefined, optional
        running in env with injected sidecars
    sendCloudEventsForRuns : bool, default is Undefined, optional
        send cloud events for runs
    setSecurityContext : bool, default is Undefined, optional
        set security context
    setSecurityContextReadOnlyRootFilesystem : bool, default is Undefined, optional
        set security context read only root filesystem
    verificationNoMatchPolicy : str, default is Undefined, optional
        VerificationNoMatchPolicy is the feature flag for "trusted-resources-verification-no-match-policy"
        VerificationNoMatchPolicy can be set to "ignore", "warn" and "fail" values.
        ignore: skip trusted resources verification when no matching verification policies found
        warn: skip trusted resources verification when no matching verification policies found and log a warning
        fail: fail the taskrun or pipelines run if no matching verification policies found
    """


    awaitSidecarReadiness?: bool

    coschedule?: str

    disableCredsInit?: bool

    disableInlineSpec?: str

    enableAPIFields?: str

    enableArtifacts?: bool

    enableCELInWhenExpression?: bool

    enableConciseResolverSyntax?: bool

    enableKeepPodOnCancel?: bool

    enableKubernetesSidecar?: bool

    enableParamEnum?: bool

    enableProvenanceInStatus?: bool

    enableStepActions?: bool

    enforceNonfalsifiability?: str

    maxResultSize?: int

    requireGitSSHSecretKnownHosts?: bool

    resultExtractionMethod?: str

    runningInEnvWithInjectedSidecars?: bool

    sendCloudEventsForRuns?: bool

    setSecurityContext?: bool

    setSecurityContextReadOnlyRootFilesystem?: bool

    verificationNoMatchPolicy?: str


schema TektonDevV1beta1PipelineRunStatusProvenanceRefSource:
    r"""
    RefSource identifies the source where a remote task/pipeline came from.

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
        Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
    entryPoint : str, default is Undefined, optional
        EntryPoint identifies the entry point into the build. This is often a path to a
        build definition file and/or a target label within that file.
        Example: "task/git-clone/0.8/git-clone.yaml"
    uri : str, default is Undefined, optional
        URI indicates the identity of the source of the build definition.
        Example: "https://github.com/tektoncd/catalog"
    """


    digest?: {str:str}

    entryPoint?: str

    uri?: str


schema TektonDevV1beta1PipelineRunStatusRunsAnon:
    r"""
    PipelineRunRunStatus contains the name of the PipelineTask for this CustomRun or Run and the CustomRun or Run's Status

    Attributes
    ----------
    pipelineTaskName : str, default is Undefined, optional
        PipelineTaskName is the name of the PipelineTask.
    status : TektonDevV1beta1PipelineRunStatusRunsAnonStatus, default is Undefined, optional
        status
    whenExpressions : [TektonDevV1beta1PipelineRunStatusRunsAnonWhenExpressionsItems0], default is Undefined, optional
        WhenExpressions is the list of checks guarding the execution of the PipelineTask
    """


    pipelineTaskName?: str

    status?: TektonDevV1beta1PipelineRunStatusRunsAnonStatus

    whenExpressions?: [TektonDevV1beta1PipelineRunStatusRunsAnonWhenExpressionsItems0]


schema TektonDevV1beta1PipelineRunStatusRunsAnonStatus:
    r"""
    Status is the CustomRunStatus for the corresponding CustomRun or Run

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some
        additional State as well as convey more information to the user. This is
        roughly akin to Annotations on any k8s resource, just the reconciler conveying
        richer information outwards.
    completionTime : str, default is Undefined, optional
        CompletionTime is the time the build completed.
    conditions : [TektonDevV1beta1PipelineRunStatusRunsAnonStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    extraFields : any, default is Undefined, optional
        ExtraFields holds arbitrary fields provided by the custom task
        controller.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that
        was last processed by the controller.
    results : [TektonDevV1beta1PipelineRunStatusRunsAnonStatusResultsItems0], default is Undefined, optional
        Results reports any output result values to be consumed by later
        tasks in a pipeline.
    retriesStatus : any, default is Undefined, optional
        RetriesStatus contains the history of CustomRunStatus, in case of a retry.
        See CustomRun.status (API version: tekton.dev/v1beta1)
    startTime : str, default is Undefined, optional
        StartTime is the time the build is actually started.
    """


    annotations?: {str:str}

    completionTime?: str

    conditions?: [TektonDevV1beta1PipelineRunStatusRunsAnonStatusConditionsItems0]

    extraFields?: any

    observedGeneration?: int

    results?: [TektonDevV1beta1PipelineRunStatusRunsAnonStatusResultsItems0]

    retriesStatus?: any

    startTime?: str


schema TektonDevV1beta1PipelineRunStatusRunsAnonStatusConditionsItems0:
    r"""
    Condition defines a readiness condition for a Knative resource.
    See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another.
        We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
        differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition.
        When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema TektonDevV1beta1PipelineRunStatusRunsAnonStatusResultsItems0:
    r"""
    CustomRunResult used to describe the results of a task

    Attributes
    ----------
    name : str, default is Undefined, required
        Name the given name
    value : str, default is Undefined, required
        Value the given value of the result
    """


    name: str

    value: str


schema TektonDevV1beta1PipelineRunStatusRunsAnonWhenExpressionsItems0:
    r"""
    WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run
    to determine whether the Task should be executed or skipped

    Attributes
    ----------
    cel : str, default is Undefined, optional
        CEL is a string of Common Language Expression, which can be used to conditionally execute
        the task based on the result of the expression evaluation
        More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
    input : str, default is Undefined, optional
        Input is the string for guard checking which can be a static input or an output from a parent Task
    operator : str, default is Undefined, optional
        Operator that represents an Input's relationship to the values
    values : [str], default is Undefined, optional
        Values is an array of strings, which is compared against the input, for guard checking
        It must be non-empty
    """


    cel?: str

    input?: str

    operator?: str

    values?: [str]


schema TektonDevV1beta1PipelineRunStatusSkippedTasksItems0:
    r"""
    SkippedTask is used to describe the Tasks that were skipped due to their When Expressions
    evaluating to False. This is a struct because we are looking into including more details
    about the When Expressions that caused this Task to be skipped.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the Pipeline Task name
    reason : str, default is Undefined, required
        Reason is the cause of the PipelineTask being skipped.
    whenExpressions : [TektonDevV1beta1PipelineRunStatusSkippedTasksItems0WhenExpressionsItems0], default is Undefined, optional
        WhenExpressions is the list of checks guarding the execution of the PipelineTask
    """


    name: str

    reason: str

    whenExpressions?: [TektonDevV1beta1PipelineRunStatusSkippedTasksItems0WhenExpressionsItems0]


schema TektonDevV1beta1PipelineRunStatusSkippedTasksItems0WhenExpressionsItems0:
    r"""
    WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run
    to determine whether the Task should be executed or skipped

    Attributes
    ----------
    cel : str, default is Undefined, optional
        CEL is a string of Common Language Expression, which can be used to conditionally execute
        the task based on the result of the expression evaluation
        More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
    input : str, default is Undefined, optional
        Input is the string for guard checking which can be a static input or an output from a parent Task
    operator : str, default is Undefined, optional
        Operator that represents an Input's relationship to the values
    values : [str], default is Undefined, optional
        Values is an array of strings, which is compared against the input, for guard checking
        It must be non-empty
    """


    cel?: str

    input?: str

    operator?: str

    values?: [str]


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnon:
    r"""
    PipelineRunTaskRunStatus contains the name of the PipelineTask for this TaskRun and the TaskRun's Status

    Attributes
    ----------
    pipelineTaskName : str, default is Undefined, optional
        PipelineTaskName is the name of the PipelineTask.
    status : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatus, default is Undefined, optional
        status
    whenExpressions : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonWhenExpressionsItems0], default is Undefined, optional
        WhenExpressions is the list of checks guarding the execution of the PipelineTask
    """


    pipelineTaskName?: str

    status?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatus

    whenExpressions?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonWhenExpressionsItems0]


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatus:
    r"""
    Status is the TaskRunStatus for the corresponding TaskRun

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some
        additional State as well as convey more information to the user. This is
        roughly akin to Annotations on any k8s resource, just the reconciler conveying
        richer information outwards.
    cloudEvents : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusCloudEventsItems0], default is Undefined, optional
        CloudEvents describe the state of each cloud event requested via a
        CloudEventResource.

        Deprecated: Removed in v0.44.0.
    completionTime : str, default is Undefined, optional
        CompletionTime is the time the build completed.
    conditions : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that
        was last processed by the controller.
    podName : str, default is Undefined, required
        PodName is the name of the pod responsible for executing this task's steps.
    provenance : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenance, default is Undefined, optional
        provenance
    resourcesResult : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusResourcesResultItems0], default is Undefined, optional
        Results from Resources built during the TaskRun.
        This is tomb-stoned along with the removal of pipelineResources
        Deprecated: this field is not populated and is preserved only for backwards compatibility
    retriesStatus : any, default is Undefined, optional
        RetriesStatus contains the history of TaskRunStatus in case of a retry in order to keep record of failures.
        All TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.
        See TaskRun.status (API version: tekton.dev/v1beta1)
    sidecars : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0], default is Undefined, optional
        The list has one entry per sidecar in the manifest. Each entry is
        represents the imageid of the corresponding sidecar.
    spanContext : {str:str}, default is Undefined, optional
        SpanContext contains tracing span context fields
    startTime : str, default is Undefined, optional
        StartTime is the time the build is actually started.
    steps : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0], default is Undefined, optional
        Steps describes the state of each build step container.
    taskResults : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusTaskResultsItems0], default is Undefined, optional
        TaskRunResults are the list of results written out by the task's containers
    taskSpec : any, default is Undefined, optional
        TaskSpec contains the Spec from the dereferenced Task definition used to instantiate this TaskRun.
        See Task.spec (API version tekton.dev/v1beta1)
    """


    annotations?: {str:str}

    cloudEvents?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusCloudEventsItems0]

    completionTime?: str

    conditions?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusConditionsItems0]

    observedGeneration?: int

    podName: str

    provenance?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenance

    resourcesResult?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusResourcesResultItems0]

    retriesStatus?: any

    sidecars?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0]

    spanContext?: {str:str}

    startTime?: str

    steps?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0]

    taskResults?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusTaskResultsItems0]

    taskSpec?: any


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusCloudEventsItems0:
    r"""
    CloudEventDelivery is the target of a cloud event along with the state of
    delivery.

    Attributes
    ----------
    status : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusCloudEventsItems0Status, default is Undefined, optional
        status
    target : str, default is Undefined, optional
        Target points to an addressable
    """


    status?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusCloudEventsItems0Status

    target?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusCloudEventsItems0Status:
    r"""
    CloudEventDeliveryState reports the state of a cloud event to be sent.

    Attributes
    ----------
    condition : str, default is Undefined, optional
        Current status
    message : str, default is Undefined, required
        Error is the text of error (if any)
    retryCount : int, default is Undefined, required
        RetryCount is the number of attempts of sending the cloud event
    sentAt : str, default is Undefined, optional
        SentAt is the time at which the last attempt to send the event was made
    """


    condition?: str

    message: str

    retryCount: int

    sentAt?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusConditionsItems0:
    r"""
    Condition defines a readiness condition for a Knative resource.
    See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another.
        We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
        differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition.
        When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenance:
    r"""
    Provenance contains some key authenticated metadata about how a software artifact was built (what sources, what inputs/outputs, etc.).

    Attributes
    ----------
    configSource : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceConfigSource, default is Undefined, optional
        config source
    featureFlags : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceFeatureFlags, default is Undefined, optional
        feature flags
    refSource : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceRefSource, default is Undefined, optional
        ref source
    """


    configSource?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceConfigSource

    featureFlags?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceFeatureFlags

    refSource?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceRefSource


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceConfigSource:
    r"""
    Deprecated: Use RefSource instead

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
        Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
    entryPoint : str, default is Undefined, optional
        EntryPoint identifies the entry point into the build. This is often a path to a
        build definition file and/or a target label within that file.
        Example: "task/git-clone/0.8/git-clone.yaml"
    uri : str, default is Undefined, optional
        URI indicates the identity of the source of the build definition.
        Example: "https://github.com/tektoncd/catalog"
    """


    digest?: {str:str}

    entryPoint?: str

    uri?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceFeatureFlags:
    r"""
    FeatureFlags identifies the feature flags that were used during the task/pipeline run

    Attributes
    ----------
    awaitSidecarReadiness : bool, default is Undefined, optional
        await sidecar readiness
    coschedule : str, default is Undefined, optional
        coschedule
    disableCredsInit : bool, default is Undefined, optional
        disable creds init
    disableInlineSpec : str, default is Undefined, optional
        disable inline spec
    enableAPIFields : str, default is Undefined, optional
        enable API fields
    enableArtifacts : bool, default is Undefined, optional
        enable artifacts
    enableCELInWhenExpression : bool, default is Undefined, optional
        enable c e l in when expression
    enableConciseResolverSyntax : bool, default is Undefined, optional
        enable concise resolver syntax
    enableKeepPodOnCancel : bool, default is Undefined, optional
        enable keep pod on cancel
    enableKubernetesSidecar : bool, default is Undefined, optional
        enable kubernetes sidecar
    enableParamEnum : bool, default is Undefined, optional
        enable param enum
    enableProvenanceInStatus : bool, default is Undefined, optional
        enable provenance in status
    enableStepActions : bool, default is Undefined, optional
        EnableStepActions is a no-op flag since StepActions are stable
    enforceNonfalsifiability : str, default is Undefined, optional
        enforce nonfalsifiability
    maxResultSize : int, default is Undefined, optional
        max result size
    requireGitSSHSecretKnownHosts : bool, default is Undefined, optional
        require git SSH secret known hosts
    resultExtractionMethod : str, default is Undefined, optional
        result extraction method
    runningInEnvWithInjectedSidecars : bool, default is Undefined, optional
        running in env with injected sidecars
    sendCloudEventsForRuns : bool, default is Undefined, optional
        send cloud events for runs
    setSecurityContext : bool, default is Undefined, optional
        set security context
    setSecurityContextReadOnlyRootFilesystem : bool, default is Undefined, optional
        set security context read only root filesystem
    verificationNoMatchPolicy : str, default is Undefined, optional
        VerificationNoMatchPolicy is the feature flag for "trusted-resources-verification-no-match-policy"
        VerificationNoMatchPolicy can be set to "ignore", "warn" and "fail" values.
        ignore: skip trusted resources verification when no matching verification policies found
        warn: skip trusted resources verification when no matching verification policies found and log a warning
        fail: fail the taskrun or pipelines run if no matching verification policies found
    """


    awaitSidecarReadiness?: bool

    coschedule?: str

    disableCredsInit?: bool

    disableInlineSpec?: str

    enableAPIFields?: str

    enableArtifacts?: bool

    enableCELInWhenExpression?: bool

    enableConciseResolverSyntax?: bool

    enableKeepPodOnCancel?: bool

    enableKubernetesSidecar?: bool

    enableParamEnum?: bool

    enableProvenanceInStatus?: bool

    enableStepActions?: bool

    enforceNonfalsifiability?: str

    maxResultSize?: int

    requireGitSSHSecretKnownHosts?: bool

    resultExtractionMethod?: str

    runningInEnvWithInjectedSidecars?: bool

    sendCloudEventsForRuns?: bool

    setSecurityContext?: bool

    setSecurityContextReadOnlyRootFilesystem?: bool

    verificationNoMatchPolicy?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusProvenanceRefSource:
    r"""
    RefSource identifies the source where a remote task/pipeline came from.

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
        Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
    entryPoint : str, default is Undefined, optional
        EntryPoint identifies the entry point into the build. This is often a path to a
        build definition file and/or a target label within that file.
        Example: "task/git-clone/0.8/git-clone.yaml"
    uri : str, default is Undefined, optional
        URI indicates the identity of the source of the build definition.
        Example: "https://github.com/tektoncd/catalog"
    """


    digest?: {str:str}

    entryPoint?: str

    uri?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusResourcesResultItems0:
    r"""
    RunResult is used to write key/value pairs to TaskRun pod termination messages.
    The key/value pairs may come from the entrypoint binary, or represent a TaskRunResult.
    If they represent a TaskRunResult, the key is the name of the result and the value is the
    JSON-serialized value of the result.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    resourceName : str, default is Undefined, optional
        ResourceName may be used in tests, but it is not populated in termination messages.
        It is preserved here for backwards compatibility and will not be ported to v1.
    $type : int, default is Undefined, optional
        ResultType used to find out whether a RunResult is from a task result or not
        Note that ResultsType is another type which is used to define the data type
        (e.g. string, array, etc) we used for Results
    value : str, default is Undefined, required
        value
    """


    key: str

    resourceName?: str

    $type?: int

    value: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0:
    r"""
    SidecarState reports the results of running a sidecar in a Task.

    Attributes
    ----------
    container : str, default is Undefined, optional
        container
    imageID : str, default is Undefined, optional
        image ID
    name : str, default is Undefined, optional
        name
    running : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Running, default is Undefined, optional
        running
    terminated : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Terminated, default is Undefined, optional
        terminated
    waiting : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Waiting, default is Undefined, optional
        waiting
    """


    container?: str

    imageID?: str

    name?: str

    running?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Running

    terminated?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Terminated

    waiting?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Waiting


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Running:
    r"""
    Details about a running container

    Attributes
    ----------
    startedAt : str, default is Undefined, optional
        Time at which the container was last (re-)started
    """


    startedAt?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Terminated:
    r"""
    Details about a terminated container

    Attributes
    ----------
    containerID : str, default is Undefined, optional
        Container's ID in the format '<type>://<container_id>'
    exitCode : int, default is Undefined, required
        Exit status from the last termination of the container
    finishedAt : str, default is Undefined, optional
        Time at which the container last terminated
    message : str, default is Undefined, optional
        Message regarding the last termination of the container
    reason : str, default is Undefined, optional
        (brief) reason from the last termination of the container
    signal : int, default is Undefined, optional
        Signal from the last termination of the container
    startedAt : str, default is Undefined, optional
        Time at which previous execution of the container started
    """


    containerID?: str

    exitCode: int

    finishedAt?: str

    message?: str

    reason?: str

    signal?: int

    startedAt?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusSidecarsItems0Waiting:
    r"""
    Details about a waiting container

    Attributes
    ----------
    message : str, default is Undefined, optional
        Message regarding why the container is not yet running.
    reason : str, default is Undefined, optional
        (brief) reason the container is not yet running.
    """


    message?: str

    reason?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0:
    r"""
    StepState reports the results of running a step in a Task.

    Attributes
    ----------
    container : str, default is Undefined, optional
        container
    imageID : str, default is Undefined, optional
        image ID
    inputs : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0InputsItems0], default is Undefined, optional
        inputs
    name : str, default is Undefined, optional
        name
    outputs : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0OutputsItems0], default is Undefined, optional
        outputs
    provenance : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Provenance, default is Undefined, optional
        provenance
    results : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ResultsItems0], default is Undefined, optional
        results
    running : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Running, default is Undefined, optional
        running
    terminated : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Terminated, default is Undefined, optional
        terminated
    waiting : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Waiting, default is Undefined, optional
        waiting
    """


    container?: str

    imageID?: str

    inputs?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0InputsItems0]

    name?: str

    outputs?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0OutputsItems0]

    provenance?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Provenance

    results?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ResultsItems0]

    running?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Running

    terminated?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Terminated

    waiting?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Waiting


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0InputsItems0:
    r"""
    Artifact represents an artifact within a system, potentially containing multiple values
    associated with it.

    Attributes
    ----------
    buildOutput : bool, default is Undefined, optional
        Indicate if the artifact is a build output or a by-product
    name : str, default is Undefined, optional
        The artifact's identifying category name
    values : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0InputsItems0ValuesItems0], default is Undefined, optional
        A collection of values related to the artifact
    """


    buildOutput?: bool

    name?: str

    values?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0InputsItems0ValuesItems0]


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0InputsItems0ValuesItems0:
    r"""
    ArtifactValue represents a specific value or data element within an Artifact.

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        digest
    uri : str, default is Undefined, optional
        uri
    """


    digest?: {str:str}

    uri?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0OutputsItems0:
    r"""
    Artifact represents an artifact within a system, potentially containing multiple values
    associated with it.

    Attributes
    ----------
    buildOutput : bool, default is Undefined, optional
        Indicate if the artifact is a build output or a by-product
    name : str, default is Undefined, optional
        The artifact's identifying category name
    values : [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0OutputsItems0ValuesItems0], default is Undefined, optional
        A collection of values related to the artifact
    """


    buildOutput?: bool

    name?: str

    values?: [TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0OutputsItems0ValuesItems0]


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0OutputsItems0ValuesItems0:
    r"""
    ArtifactValue represents a specific value or data element within an Artifact.

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        digest
    uri : str, default is Undefined, optional
        uri
    """


    digest?: {str:str}

    uri?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Provenance:
    r"""
    Provenance contains metadata about resources used in the TaskRun/PipelineRun
    such as the source from where a remote build definition was fetched.
    This field aims to carry minimum amoumt of metadata in *Run status so that
    Tekton Chains can capture them in the provenance.

    Attributes
    ----------
    configSource : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceConfigSource, default is Undefined, optional
        config source
    featureFlags : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceFeatureFlags, default is Undefined, optional
        feature flags
    refSource : TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceRefSource, default is Undefined, optional
        ref source
    """


    configSource?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceConfigSource

    featureFlags?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceFeatureFlags

    refSource?: TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceRefSource


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceConfigSource:
    r"""
    Deprecated: Use RefSource instead

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
        Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
    entryPoint : str, default is Undefined, optional
        EntryPoint identifies the entry point into the build. This is often a path to a
        build definition file and/or a target label within that file.
        Example: "task/git-clone/0.8/git-clone.yaml"
    uri : str, default is Undefined, optional
        URI indicates the identity of the source of the build definition.
        Example: "https://github.com/tektoncd/catalog"
    """


    digest?: {str:str}

    entryPoint?: str

    uri?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceFeatureFlags:
    r"""
    FeatureFlags identifies the feature flags that were used during the task/pipeline run

    Attributes
    ----------
    awaitSidecarReadiness : bool, default is Undefined, optional
        await sidecar readiness
    coschedule : str, default is Undefined, optional
        coschedule
    disableCredsInit : bool, default is Undefined, optional
        disable creds init
    disableInlineSpec : str, default is Undefined, optional
        disable inline spec
    enableAPIFields : str, default is Undefined, optional
        enable API fields
    enableArtifacts : bool, default is Undefined, optional
        enable artifacts
    enableCELInWhenExpression : bool, default is Undefined, optional
        enable c e l in when expression
    enableConciseResolverSyntax : bool, default is Undefined, optional
        enable concise resolver syntax
    enableKeepPodOnCancel : bool, default is Undefined, optional
        enable keep pod on cancel
    enableKubernetesSidecar : bool, default is Undefined, optional
        enable kubernetes sidecar
    enableParamEnum : bool, default is Undefined, optional
        enable param enum
    enableProvenanceInStatus : bool, default is Undefined, optional
        enable provenance in status
    enableStepActions : bool, default is Undefined, optional
        EnableStepActions is a no-op flag since StepActions are stable
    enforceNonfalsifiability : str, default is Undefined, optional
        enforce nonfalsifiability
    maxResultSize : int, default is Undefined, optional
        max result size
    requireGitSSHSecretKnownHosts : bool, default is Undefined, optional
        require git SSH secret known hosts
    resultExtractionMethod : str, default is Undefined, optional
        result extraction method
    runningInEnvWithInjectedSidecars : bool, default is Undefined, optional
        running in env with injected sidecars
    sendCloudEventsForRuns : bool, default is Undefined, optional
        send cloud events for runs
    setSecurityContext : bool, default is Undefined, optional
        set security context
    setSecurityContextReadOnlyRootFilesystem : bool, default is Undefined, optional
        set security context read only root filesystem
    verificationNoMatchPolicy : str, default is Undefined, optional
        VerificationNoMatchPolicy is the feature flag for "trusted-resources-verification-no-match-policy"
        VerificationNoMatchPolicy can be set to "ignore", "warn" and "fail" values.
        ignore: skip trusted resources verification when no matching verification policies found
        warn: skip trusted resources verification when no matching verification policies found and log a warning
        fail: fail the taskrun or pipelines run if no matching verification policies found
    """


    awaitSidecarReadiness?: bool

    coschedule?: str

    disableCredsInit?: bool

    disableInlineSpec?: str

    enableAPIFields?: str

    enableArtifacts?: bool

    enableCELInWhenExpression?: bool

    enableConciseResolverSyntax?: bool

    enableKeepPodOnCancel?: bool

    enableKubernetesSidecar?: bool

    enableParamEnum?: bool

    enableProvenanceInStatus?: bool

    enableStepActions?: bool

    enforceNonfalsifiability?: str

    maxResultSize?: int

    requireGitSSHSecretKnownHosts?: bool

    resultExtractionMethod?: str

    runningInEnvWithInjectedSidecars?: bool

    sendCloudEventsForRuns?: bool

    setSecurityContext?: bool

    setSecurityContextReadOnlyRootFilesystem?: bool

    verificationNoMatchPolicy?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ProvenanceRefSource:
    r"""
    RefSource identifies the source where a remote task/pipeline came from.

    Attributes
    ----------
    digest : {str:str}, default is Undefined, optional
        Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.
        Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
    entryPoint : str, default is Undefined, optional
        EntryPoint identifies the entry point into the build. This is often a path to a
        build definition file and/or a target label within that file.
        Example: "task/git-clone/0.8/git-clone.yaml"
    uri : str, default is Undefined, optional
        URI indicates the identity of the source of the build definition.
        Example: "https://github.com/tektoncd/catalog"
    """


    digest?: {str:str}

    entryPoint?: str

    uri?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0ResultsItems0:
    r"""
    TaskRunResult used to describe the results of a task

    Attributes
    ----------
    name : str, default is Undefined, required
        Name the given name
    $type : str, default is Undefined, optional
        Type is the user-specified type of the result. The possible type
        is currently "string" and will support "array" in following work.
    value : any, default is Undefined, required
        Value the given value of the result
    """


    name: str

    $type?: str

    value: any


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Running:
    r"""
    Details about a running container

    Attributes
    ----------
    startedAt : str, default is Undefined, optional
        Time at which the container was last (re-)started
    """


    startedAt?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Terminated:
    r"""
    Details about a terminated container

    Attributes
    ----------
    containerID : str, default is Undefined, optional
        Container's ID in the format '<type>://<container_id>'
    exitCode : int, default is Undefined, required
        Exit status from the last termination of the container
    finishedAt : str, default is Undefined, optional
        Time at which the container last terminated
    message : str, default is Undefined, optional
        Message regarding the last termination of the container
    reason : str, default is Undefined, optional
        (brief) reason from the last termination of the container
    signal : int, default is Undefined, optional
        Signal from the last termination of the container
    startedAt : str, default is Undefined, optional
        Time at which previous execution of the container started
    """


    containerID?: str

    exitCode: int

    finishedAt?: str

    message?: str

    reason?: str

    signal?: int

    startedAt?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusStepsItems0Waiting:
    r"""
    Details about a waiting container

    Attributes
    ----------
    message : str, default is Undefined, optional
        Message regarding why the container is not yet running.
    reason : str, default is Undefined, optional
        (brief) reason the container is not yet running.
    """


    message?: str

    reason?: str


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonStatusTaskResultsItems0:
    r"""
    TaskRunResult used to describe the results of a task

    Attributes
    ----------
    name : str, default is Undefined, required
        Name the given name
    $type : str, default is Undefined, optional
        Type is the user-specified type of the result. The possible type
        is currently "string" and will support "array" in following work.
    value : any, default is Undefined, required
        Value the given value of the result
    """


    name: str

    $type?: str

    value: any


schema TektonDevV1beta1PipelineRunStatusTaskRunsAnonWhenExpressionsItems0:
    r"""
    WhenExpression allows a PipelineTask to declare expressions to be evaluated before the Task is run
    to determine whether the Task should be executed or skipped

    Attributes
    ----------
    cel : str, default is Undefined, optional
        CEL is a string of Common Language Expression, which can be used to conditionally execute
        the task based on the result of the expression evaluation
        More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md
    input : str, default is Undefined, optional
        Input is the string for guard checking which can be a static input or an output from a parent Task
    operator : str, default is Undefined, optional
        Operator that represents an Input's relationship to the values
    values : [str], default is Undefined, optional
        Values is an array of strings, which is compared against the input, for guard checking
        It must be non-empty
    """


    cel?: str

    input?: str

    operator?: str

    values?: [str]


