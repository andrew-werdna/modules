"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema ImageUpdateAutomation:
    r"""
    ImageUpdateAutomation is the Schema for the imageupdateautomations API

    Attributes
    ----------
    apiVersion : str, default is "image.toolkit.fluxcd.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ImageUpdateAutomation", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpec, default is Undefined, optional
        spec
    status : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationStatus, default is Undefined, optional
        status
    """


    apiVersion: "image.toolkit.fluxcd.io/v1beta1" = "image.toolkit.fluxcd.io/v1beta1"

    kind: "ImageUpdateAutomation" = "ImageUpdateAutomation"

    metadata?: v1.ObjectMeta

    spec?: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpec

    status?: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationStatus


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpec:
    r"""
    ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation

    Attributes
    ----------
    git : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGit, default is Undefined, optional
        git
    interval : str, default is Undefined, required
        Interval gives an lower bound for how often the automation
        run should be attempted.
    sourceRef : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecSourceRef, default is Undefined, required
        source ref
    suspend : bool, default is Undefined, optional
        Suspend tells the controller to not run this automation, until
        it is unset (or set to false). Defaults to false.
    update : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecUpdate, default is Undefined, optional
        update
    """


    git?: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGit

    interval: str

    sourceRef: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecSourceRef

    suspend?: bool

    update?: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecUpdate


    check:
        _regex_match(str(interval), r"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$")


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGit:
    r"""
    GitSpec contains all the git-specific definitions. This is
    technically optional, but in practice mandatory until there are
    other kinds of source allowed.

    Attributes
    ----------
    checkout : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCheckout, default is Undefined, optional
        checkout
    commit : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommit, default is Undefined, required
        commit
    push : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitPush, default is Undefined, optional
        push
    """


    checkout?: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCheckout

    commit: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommit

    push?: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitPush


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCheckout:
    r"""
    Checkout gives the parameters for cloning the git repository,
    ready to make changes. If not present, the `spec.ref` field from the
    referenced `GitRepository` or its default will be used.

    Attributes
    ----------
    ref : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCheckoutRef, default is Undefined, required
        ref
    """


    ref: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCheckoutRef


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCheckoutRef:
    r"""
    Reference gives a branch, tag or commit to clone from the Git
    repository.

    Attributes
    ----------
    branch : str, default is Undefined, optional
        Branch to check out, defaults to 'master' if no other field is defined.
    commit : str, default is Undefined, optional
        Commit SHA to check out, takes precedence over all reference fields.

        This can be combined with Branch to shallow clone the branch, in which
        the commit is expected to exist.
    name : str, default is Undefined, optional
        Name of the reference to check out; takes precedence over Branch, Tag and SemVer.

        It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
        Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
    semver : str, default is Undefined, optional
        SemVer tag expression to check out, takes precedence over Tag.
    tag : str, default is Undefined, optional
        Tag to check out, takes precedence over Branch.
    """


    branch?: str

    commit?: str

    name?: str

    semver?: str

    tag?: str


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommit:
    r"""
    Commit specifies how to commit to the git repository.

    Attributes
    ----------
    author : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitAuthor, default is Undefined, required
        author
    messageTemplate : str, default is Undefined, optional
        MessageTemplate provides a template for the commit message,
        into which will be interpolated the details of the change made.
    signingKey : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitSigningKey, default is Undefined, optional
        signing key
    """


    author: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitAuthor

    messageTemplate?: str

    signingKey?: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitSigningKey


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitAuthor:
    r"""
    Author gives the email and optionally the name to use as the
    author of commits.

    Attributes
    ----------
    email : str, default is Undefined, required
        Email gives the email to provide when making a commit.
    name : str, default is Undefined, optional
        Name gives the name to provide when making a commit.
    """


    email: str

    name?: str


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitSigningKey:
    r"""
    SigningKey provides the option to sign commits with a GPG key

    Attributes
    ----------
    secretRef : ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitSigningKeySecretRef, default is Undefined, required
        secret ref
    """


    secretRef: ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitSigningKeySecretRef


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitCommitSigningKeySecretRef:
    r"""
    SecretRef holds the name to a secret that contains a 'git.asc' key
    corresponding to the ASCII Armored file containing the GPG signing
    keypair as the value. It must be in the same namespace as the
    ImageUpdateAutomation.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referent.
    """


    name: str


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecGitPush:
    r"""
    Push specifies how and where to push commits made by the
    automation. If missing, commits are pushed (back) to
    `.spec.checkout.branch` or its default.

    Attributes
    ----------
    branch : str, default is Undefined, optional
        Branch specifies that commits should be pushed to the branch
        named. The branch is created using `.spec.checkout.branch` as the
        starting point, if it doesn't already exist.
    options : {str:str}, default is Undefined, optional
        Options specifies the push options that are sent to the Git
        server when performing a push operation. For details, see:
        https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
    refspec : str, default is Undefined, optional
        Refspec specifies the Git Refspec to use for a push operation.
        If both Branch and Refspec are provided, then the commit is pushed
        to the branch and also using the specified refspec.
        For more details about Git Refspecs, see:
        https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
    """


    branch?: str

    options?: {str:str}

    refspec?: str


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecSourceRef:
    r"""
    SourceRef refers to the resource giving access details
    to a git repository.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is "GitRepository", required
        Kind of the referent.
    name : str, default is Undefined, required
        Name of the referent.
    namespace : str, default is Undefined, optional
        Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
    """


    apiVersion?: str

    kind: "GitRepository" = "GitRepository"

    name: str

    namespace?: str


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationSpecUpdate:
    r"""
    Update gives the specification for how to update the files in
    the repository. This can be left empty, to use the default
    value.

    Attributes
    ----------
    path : str, default is Undefined, optional
        Path to the directory containing the manifests to be updated.
        Defaults to 'None', which translates to the root path
        of the GitRepositoryRef.
    strategy : str, default is "Setters", required
        Strategy names the strategy to be used.
    """


    path?: str

    strategy: "Setters" = "Setters"


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationStatus:
    r"""
    ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation

    Attributes
    ----------
    conditions : [ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationStatusConditionsItems0], default is Undefined, optional
        conditions
    lastAutomationRunTime : str, default is Undefined, optional
        LastAutomationRunTime records the last time the controller ran
        this automation through to completion (even if no updates were
        made).
    lastHandledReconcileAt : str, default is Undefined, optional
        LastHandledReconcileAt holds the value of the most recent
        reconcile request value, so a change of the annotation value
        can be detected.
    lastPushCommit : str, default is Undefined, optional
        LastPushCommit records the SHA1 of the last commit made by the
        controller, for this automation object
    lastPushTime : str, default is Undefined, optional
        LastPushTime records the time of the last pushed change.
    observedGeneration : int, default is Undefined, optional
        observed generation
    """


    conditions?: [ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationStatusConditionsItems0]

    lastAutomationRunTime?: str

    lastHandledReconcileAt?: str

    lastPushCommit?: str

    lastPushTime?: str

    observedGeneration?: int


schema ImageToolkitFluxcdIoV1beta1ImageUpdateAutomationStatusConditionsItems0:
    r"""
    Condition contains details for one aspect of the current state of this API Resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
    """


    lastTransitionTime: str

    message: str

    observedGeneration?: int

    reason: str

    status: "True" | "False" | "Unknown"

    $type: str


    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")


