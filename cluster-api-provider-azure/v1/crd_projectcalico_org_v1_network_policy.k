"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema NetworkPolicy:
    r"""
    crd projectcalico org v1 network policy

    Attributes
    ----------
    apiVersion : str, default is "crd.projectcalico.org/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "NetworkPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CrdProjectcalicoOrgV1NetworkPolicySpec, default is Undefined, optional
        spec
    """


    apiVersion: "crd.projectcalico.org/v1" = "crd.projectcalico.org/v1"

    kind: "NetworkPolicy" = "NetworkPolicy"

    metadata?: v1.ObjectMeta

    spec?: CrdProjectcalicoOrgV1NetworkPolicySpec


schema CrdProjectcalicoOrgV1NetworkPolicySpec:
    r"""
    crd projectcalico org v1 network policy spec

    Attributes
    ----------
    egress : [CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0], default is Undefined, optional
        The ordered set of egress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.
    ingress : [CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0], default is Undefined, optional
        The ordered set of ingress rules.  Each rule contains a set of packet match criteria and a corresponding action to apply.
    order : float, default is Undefined, optional
        Order is an optional field that specifies the order in which the policy is applied. Policies with higher "order" are applied after those with lower order.  If the order is omitted, it may be considered to be "infinite" - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy "Name".
    selector : str, default is Undefined, optional
        The selector is an expression used to pick pick out the endpoints that the policy should be applied to. 
         Selector expressions follow this syntax: 
         	label == "string_literal"  ->  comparison, e.g. my_label == "foo bar" 	label != "string_literal"   ->  not equal; also matches if label is not present 	label in { "a", "b", "c", ... }  ->  true if the value of label X is one of "a", "b", "c" 	label not in { "a", "b", "c", ... }  ->  true if the value of label X is not one of "a", "b", "c" 	has(label_name)  -> True if that label is present 	! expr -> negation of expr 	expr && expr  -> Short-circuit and 	expr || expr  -> Short-circuit or 	( expr ) -> parens for grouping 	all() or the empty selector -> matches all endpoints. 
         Label names are allowed to contain alphanumerics, -, _ and /. String literals are more permissive but they do not support escape characters. 
         Examples (with made-up labels): 
         	type == "webserver" && deployment == "prod" 	type in {"frontend", "backend"} 	deployment != "dev" 	! has(label_name)
    serviceAccountSelector : str, default is Undefined, optional
        ServiceAccountSelector is an optional field for an expression used to select a pod based on service accounts.
    types : [str], default is Undefined, optional
        Types indicates whether this policy applies to ingress, or to egress, or to both.  When not explicitly specified (and so the value on creation is empty or nil), Calico defaults Types according to what Ingress and Egress are present in the policy.  The default is: 
         - [ PolicyTypeIngress ], if there are no Egress rules (including the case where there are   also no Ingress rules) 
         - [ PolicyTypeEgress ], if there are Egress rules but no Ingress rules 
         - [ PolicyTypeIngress, PolicyTypeEgress ], if there are both Ingress and Egress rules. 
         When the policy is read back again, Types will always be one of these values, never empty or nil.
    """


    egress?: [CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0]

    ingress?: [CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0]

    order?: float

    selector?: str

    serviceAccountSelector?: str

    types?: [str]


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0:
    r"""
    A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. 
     Each positive match criteria has a negated version, prefixed with "Not". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.

    Attributes
    ----------
    action : str, default is Undefined, required
        action
    destination : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Destination, default is Undefined, optional
        destination
    http : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0HTTP, default is Undefined, optional
        http
    icmp : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Icmp, default is Undefined, optional
        icmp
    ipVersion : int, default is Undefined, optional
        IPVersion is an optional field that restricts the rule to only match a specific IP version.
    metadata : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Metadata, default is Undefined, optional
        metadata
    notICMP : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0NotICMP, default is Undefined, optional
        not i c m p
    notProtocol : int | str, default is Undefined, optional
        NotProtocol is the negated version of the Protocol field.
    $protocol : int | str, default is Undefined, optional
        Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). 
         Must be one of these string values: "TCP", "UDP", "ICMP", "ICMPv6", "SCTP", "UDPLite" or an integer in the range 1-255.
    source : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Source, default is Undefined, optional
        source
    """


    action: str

    destination?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Destination

    http?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0HTTP

    icmp?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Icmp

    ipVersion?: int

    metadata?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Metadata

    notICMP?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0NotICMP

    notProtocol?: int | str

    $protocol?: int | str

    source?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Source


    check:
        _regex_match(str(notProtocol), r"^.*") if notProtocol
        _regex_match(str($protocol), r"^.*") if $protocol


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Destination:
    r"""
    Destination contains the match criteria that apply to destination entity.

    Attributes
    ----------
    namespaceSelector : str, default is Undefined, optional
        NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. 
         For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. 
         For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. 
         For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.
    nets : [str], default is Undefined, optional
        Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.
    notNets : [str], default is Undefined, optional
        NotNets is the negated version of the Nets field.
    notPorts : [int | str], default is Undefined, optional
        NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    notSelector : str, default is Undefined, optional
        NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.
    ports : [int | str], default is Undefined, optional
        Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. 
         Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    selector : str, default is Undefined, optional
        Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. 
         Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: 
         	Selector = "!has(my_label)" matches packets that are from other Calico-controlled 	endpoints that do not have the label "my_label". 
         	NotSelector = "has(my_label)" matches packets that are not from Calico-controlled 	endpoints that do have the label "my_label". 
         The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.
    serviceAccounts : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0DestinationServiceAccounts, default is Undefined, optional
        service accounts
    services : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0DestinationServices, default is Undefined, optional
        services
    """


    namespaceSelector?: str

    nets?: [str]

    notNets?: [str]

    notPorts?: [int | str]

    notSelector?: str

    ports?: [int | str]

    selector?: str

    serviceAccounts?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0DestinationServiceAccounts

    services?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0DestinationServices


    check:
        all notPorts in notPorts { _regex_match(str(notPorts), r"^.*") if notPorts } if notPorts
        all ports in ports { _regex_match(str(ports), r"^.*") if ports } if ports


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0DestinationServiceAccounts:
    r"""
    ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.

    Attributes
    ----------
    names : [str], default is Undefined, optional
        Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.
    selector : str, default is Undefined, optional
        Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.
    """


    names?: [str]

    selector?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0DestinationServices:
    r"""
    Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. 
     Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. 
     Ports and NotPorts can only be specified with Services on ingress rules.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name specifies the name of a Kubernetes Service to match.
    namespace : str, default is Undefined, optional
        Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.
    """


    name?: str

    namespace?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0HTTP:
    r"""
    HTTP contains match criteria that apply to HTTP requests.

    Attributes
    ----------
    methods : [str], default is Undefined, optional
        Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.
    paths : [CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0HTTPPathsItems0], default is Undefined, optional
        Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.
    """


    methods?: [str]

    paths?: [CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0HTTPPathsItems0]


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0HTTPPathsItems0:
    r"""
    HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix

    Attributes
    ----------
    exact : str, default is Undefined, optional
        exact
    prefix : str, default is Undefined, optional
        prefix
    """


    exact?: str

    prefix?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Icmp:
    r"""
    ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to "ICMP" or "ICMPv6".

    Attributes
    ----------
    code : int, default is Undefined, optional
        Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.
    $type : int, default is Undefined, optional
        Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).
    """


    code?: int

    $type?: int


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Metadata:
    r"""
    Metadata contains additional information for this rule

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a set of key value pairs that give extra information about the rule
    """


    annotations?: {str:str}


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0NotICMP:
    r"""
    NotICMP is the negated version of the ICMP field.

    Attributes
    ----------
    code : int, default is Undefined, optional
        Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.
    $type : int, default is Undefined, optional
        Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).
    """


    code?: int

    $type?: int


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0Source:
    r"""
    Source contains the match criteria that apply to source entity.

    Attributes
    ----------
    namespaceSelector : str, default is Undefined, optional
        NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. 
         For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. 
         For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. 
         For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.
    nets : [str], default is Undefined, optional
        Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.
    notNets : [str], default is Undefined, optional
        NotNets is the negated version of the Nets field.
    notPorts : [int | str], default is Undefined, optional
        NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    notSelector : str, default is Undefined, optional
        NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.
    ports : [int | str], default is Undefined, optional
        Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. 
         Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    selector : str, default is Undefined, optional
        Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. 
         Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: 
         	Selector = "!has(my_label)" matches packets that are from other Calico-controlled 	endpoints that do not have the label "my_label". 
         	NotSelector = "has(my_label)" matches packets that are not from Calico-controlled 	endpoints that do have the label "my_label". 
         The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.
    serviceAccounts : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0SourceServiceAccounts, default is Undefined, optional
        service accounts
    services : CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0SourceServices, default is Undefined, optional
        services
    """


    namespaceSelector?: str

    nets?: [str]

    notNets?: [str]

    notPorts?: [int | str]

    notSelector?: str

    ports?: [int | str]

    selector?: str

    serviceAccounts?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0SourceServiceAccounts

    services?: CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0SourceServices


    check:
        all notPorts in notPorts { _regex_match(str(notPorts), r"^.*") if notPorts } if notPorts
        all ports in ports { _regex_match(str(ports), r"^.*") if ports } if ports


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0SourceServiceAccounts:
    r"""
    ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.

    Attributes
    ----------
    names : [str], default is Undefined, optional
        Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.
    selector : str, default is Undefined, optional
        Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.
    """


    names?: [str]

    selector?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecEgressItems0SourceServices:
    r"""
    Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. 
     Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. 
     Ports and NotPorts can only be specified with Services on ingress rules.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name specifies the name of a Kubernetes Service to match.
    namespace : str, default is Undefined, optional
        Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.
    """


    name?: str

    namespace?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0:
    r"""
    A Rule encapsulates a set of match criteria and an action.  Both selector-based security Policy and security Profiles reference rules - separated out as a list of rules for both ingress and egress packet matching. 
     Each positive match criteria has a negated version, prefixed with "Not". All the match criteria within a rule must be satisfied for a packet to match. A single rule can contain the positive and negative version of a match and both must be satisfied for the rule to match.

    Attributes
    ----------
    action : str, default is Undefined, required
        action
    destination : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Destination, default is Undefined, optional
        destination
    http : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0HTTP, default is Undefined, optional
        http
    icmp : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Icmp, default is Undefined, optional
        icmp
    ipVersion : int, default is Undefined, optional
        IPVersion is an optional field that restricts the rule to only match a specific IP version.
    metadata : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Metadata, default is Undefined, optional
        metadata
    notICMP : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0NotICMP, default is Undefined, optional
        not i c m p
    notProtocol : int | str, default is Undefined, optional
        NotProtocol is the negated version of the Protocol field.
    $protocol : int | str, default is Undefined, optional
        Protocol is an optional field that restricts the rule to only apply to traffic of a specific IP protocol. Required if any of the EntityRules contain Ports (because ports only apply to certain protocols). 
         Must be one of these string values: "TCP", "UDP", "ICMP", "ICMPv6", "SCTP", "UDPLite" or an integer in the range 1-255.
    source : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Source, default is Undefined, optional
        source
    """


    action: str

    destination?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Destination

    http?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0HTTP

    icmp?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Icmp

    ipVersion?: int

    metadata?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Metadata

    notICMP?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0NotICMP

    notProtocol?: int | str

    $protocol?: int | str

    source?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Source


    check:
        _regex_match(str(notProtocol), r"^.*") if notProtocol
        _regex_match(str($protocol), r"^.*") if $protocol


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Destination:
    r"""
    Destination contains the match criteria that apply to destination entity.

    Attributes
    ----------
    namespaceSelector : str, default is Undefined, optional
        NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. 
         For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. 
         For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. 
         For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.
    nets : [str], default is Undefined, optional
        Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.
    notNets : [str], default is Undefined, optional
        NotNets is the negated version of the Nets field.
    notPorts : [int | str], default is Undefined, optional
        NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    notSelector : str, default is Undefined, optional
        NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.
    ports : [int | str], default is Undefined, optional
        Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. 
         Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    selector : str, default is Undefined, optional
        Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. 
         Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: 
         	Selector = "!has(my_label)" matches packets that are from other Calico-controlled 	endpoints that do not have the label "my_label". 
         	NotSelector = "has(my_label)" matches packets that are not from Calico-controlled 	endpoints that do have the label "my_label". 
         The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.
    serviceAccounts : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0DestinationServiceAccounts, default is Undefined, optional
        service accounts
    services : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0DestinationServices, default is Undefined, optional
        services
    """


    namespaceSelector?: str

    nets?: [str]

    notNets?: [str]

    notPorts?: [int | str]

    notSelector?: str

    ports?: [int | str]

    selector?: str

    serviceAccounts?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0DestinationServiceAccounts

    services?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0DestinationServices


    check:
        all notPorts in notPorts { _regex_match(str(notPorts), r"^.*") if notPorts } if notPorts
        all ports in ports { _regex_match(str(ports), r"^.*") if ports } if ports


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0DestinationServiceAccounts:
    r"""
    ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.

    Attributes
    ----------
    names : [str], default is Undefined, optional
        Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.
    selector : str, default is Undefined, optional
        Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.
    """


    names?: [str]

    selector?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0DestinationServices:
    r"""
    Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. 
     Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. 
     Ports and NotPorts can only be specified with Services on ingress rules.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name specifies the name of a Kubernetes Service to match.
    namespace : str, default is Undefined, optional
        Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.
    """


    name?: str

    namespace?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0HTTP:
    r"""
    HTTP contains match criteria that apply to HTTP requests.

    Attributes
    ----------
    methods : [str], default is Undefined, optional
        Methods is an optional field that restricts the rule to apply only to HTTP requests that use one of the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple methods are OR'd together.
    paths : [CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0HTTPPathsItems0], default is Undefined, optional
        Paths is an optional field that restricts the rule to apply to HTTP requests that use one of the listed HTTP Paths. Multiple paths are OR'd together. e.g: - exact: /foo - prefix: /bar NOTE: Each entry may ONLY specify either a `exact` or a `prefix` match. The validator will check for it.
    """


    methods?: [str]

    paths?: [CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0HTTPPathsItems0]


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0HTTPPathsItems0:
    r"""
    HTTPPath specifies an HTTP path to match. It may be either of the form: exact: <path>: which matches the path exactly or prefix: <path-prefix>: which matches the path prefix

    Attributes
    ----------
    exact : str, default is Undefined, optional
        exact
    prefix : str, default is Undefined, optional
        prefix
    """


    exact?: str

    prefix?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Icmp:
    r"""
    ICMP is an optional field that restricts the rule to apply to a specific type and code of ICMP traffic.  This should only be specified if the Protocol field is set to "ICMP" or "ICMPv6".

    Attributes
    ----------
    code : int, default is Undefined, optional
        Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.
    $type : int, default is Undefined, optional
        Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).
    """


    code?: int

    $type?: int


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Metadata:
    r"""
    Metadata contains additional information for this rule

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is a set of key value pairs that give extra information about the rule
    """


    annotations?: {str:str}


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0NotICMP:
    r"""
    NotICMP is the negated version of the ICMP field.

    Attributes
    ----------
    code : int, default is Undefined, optional
        Match on a specific ICMP code.  If specified, the Type value must also be specified. This is a technical limitation imposed by the kernel's iptables firewall, which Calico uses to enforce the rule.
    $type : int, default is Undefined, optional
        Match on a specific ICMP type.  For example a value of 8 refers to ICMP Echo Request (i.e. pings).
    """


    code?: int

    $type?: int


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0Source:
    r"""
    Source contains the match criteria that apply to source entity.

    Attributes
    ----------
    namespaceSelector : str, default is Undefined, optional
        NamespaceSelector is an optional field that contains a selector expression. Only traffic that originates from (or terminates at) endpoints within the selected namespaces will be matched. When both NamespaceSelector and another selector are defined on the same rule, then only workload endpoints that are matched by both selectors will be selected by the rule. 
         For NetworkPolicy, an empty NamespaceSelector implies that the Selector is limited to selecting only workload endpoints in the same namespace as the NetworkPolicy. 
         For NetworkPolicy, `global()` NamespaceSelector implies that the Selector is limited to selecting only GlobalNetworkSet or HostEndpoint. 
         For GlobalNetworkPolicy, an empty NamespaceSelector implies the Selector applies to workload endpoints across all namespaces.
    nets : [str], default is Undefined, optional
        Nets is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) IP addresses in any of the given subnets.
    notNets : [str], default is Undefined, optional
        NotNets is the negated version of the Nets field.
    notPorts : [int | str], default is Undefined, optional
        NotPorts is the negated version of the Ports field. Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    notSelector : str, default is Undefined, optional
        NotSelector is the negated version of the Selector field.  See Selector field for subtleties with negated selectors.
    ports : [int | str], default is Undefined, optional
        Ports is an optional field that restricts the rule to only apply to traffic that has a source (destination) port that matches one of these ranges/values. This value is a list of integers or strings that represent ranges of ports. 
         Since only some protocols have ports, if any ports are specified it requires the Protocol match in the Rule to be set to "TCP" or "UDP".
    selector : str, default is Undefined, optional
        Selector is an optional field that contains a selector expression (see Policy for sample syntax).  Only traffic that originates from (terminates at) endpoints matching the selector will be matched. 
         Note that: in addition to the negated version of the Selector (see NotSelector below), the selector expression syntax itself supports negation.  The two types of negation are subtly different. One negates the set of matched endpoints, the other negates the whole match: 
         	Selector = "!has(my_label)" matches packets that are from other Calico-controlled 	endpoints that do not have the label "my_label". 
         	NotSelector = "has(my_label)" matches packets that are not from Calico-controlled 	endpoints that do have the label "my_label". 
         The effect is that the latter will accept packets from non-Calico sources whereas the former is limited to packets from Calico-controlled endpoints.
    serviceAccounts : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0SourceServiceAccounts, default is Undefined, optional
        service accounts
    services : CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0SourceServices, default is Undefined, optional
        services
    """


    namespaceSelector?: str

    nets?: [str]

    notNets?: [str]

    notPorts?: [int | str]

    notSelector?: str

    ports?: [int | str]

    selector?: str

    serviceAccounts?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0SourceServiceAccounts

    services?: CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0SourceServices


    check:
        all notPorts in notPorts { _regex_match(str(notPorts), r"^.*") if notPorts } if notPorts
        all ports in ports { _regex_match(str(ports), r"^.*") if ports } if ports


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0SourceServiceAccounts:
    r"""
    ServiceAccounts is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a matching service account.

    Attributes
    ----------
    names : [str], default is Undefined, optional
        Names is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account whose name is in the list.
    selector : str, default is Undefined, optional
        Selector is an optional field that restricts the rule to only apply to traffic that originates from (or terminates at) a pod running as a service account that matches the given label selector. If both Names and Selector are specified then they are AND'ed.
    """


    names?: [str]

    selector?: str


schema CrdProjectcalicoOrgV1NetworkPolicySpecIngressItems0SourceServices:
    r"""
    Services is an optional field that contains options for matching Kubernetes Services. If specified, only traffic that originates from or terminates at endpoints within the selected service(s) will be matched, and only to/from each endpoint's port. 
     Services cannot be specified on the same rule as Selector, NotSelector, NamespaceSelector, Nets, NotNets or ServiceAccounts. 
     Ports and NotPorts can only be specified with Services on ingress rules.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name specifies the name of a Kubernetes Service to match.
    namespace : str, default is Undefined, optional
        Namespace specifies the namespace of the given Service. If left empty, the rule will match within this policy's namespace.
    """


    name?: str

    namespace?: str


