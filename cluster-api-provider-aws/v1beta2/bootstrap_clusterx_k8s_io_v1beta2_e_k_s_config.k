"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema EKSConfig:
    r"""
    EKSConfig is the schema for the Amazon EKS Machine Bootstrap Configuration API.

    Attributes
    ----------
    apiVersion : str, default is "bootstrap.cluster.x-k8s.io/v1beta2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "EKSConfig", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : BootstrapClusterxK8sIoV1beta2EKSConfigSpec, default is Undefined, optional
        spec
    status : BootstrapClusterxK8sIoV1beta2EKSConfigStatus, default is Undefined, optional
        status
    """


    apiVersion: "bootstrap.cluster.x-k8s.io/v1beta2" = "bootstrap.cluster.x-k8s.io/v1beta2"

    kind: "EKSConfig" = "EKSConfig"

    metadata?: v1.ObjectMeta

    spec?: BootstrapClusterxK8sIoV1beta2EKSConfigSpec

    status?: BootstrapClusterxK8sIoV1beta2EKSConfigStatus


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpec:
    r"""
    EKSConfigSpec defines the desired state of Amazon EKS Bootstrap Configuration.

    Attributes
    ----------
    apiRetryAttempts : int, default is Undefined, optional
        APIRetryAttempts is the number of retry attempts for AWS API call.
    boostrapCommandOverride : str, default is Undefined, optional
        BootstrapCommandOverride allows you to override the bootstrap command to use for EKS nodes.
    containerRuntime : str, default is Undefined, optional
        ContainerRuntime specify the container runtime to use when bootstrapping EKS.
    diskSetup : BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetup, default is Undefined, optional
        disk setup
    dnsClusterIP : str, default is Undefined, optional
         DNSClusterIP overrides the IP address to use for DNS queries within the cluster.
    dockerConfigJson : str, default is Undefined, optional
        DockerConfigJson is used for the contents of the /etc/docker/daemon.json file. Useful if you want a custom config differing from the default one in the AMI.
        This is expected to be a json string.
    files : [BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0], default is Undefined, optional
        Files specifies extra files to be passed to user_data upon creation.
    kubeletExtraArgs : {str:str}, default is Undefined, optional
        KubeletExtraArgs passes the specified kubelet args into the Amazon EKS machine bootstrap script
    mounts : [[str]], default is Undefined, optional
        Mounts specifies a list of mount points to be setup.
    ntp : BootstrapClusterxK8sIoV1beta2EKSConfigSpecNtp, default is Undefined, optional
        ntp
    pauseContainer : BootstrapClusterxK8sIoV1beta2EKSConfigSpecPauseContainer, default is Undefined, optional
        pause container
    postBootstrapCommands : [str], default is Undefined, optional
        PostBootstrapCommands specifies extra commands to run after bootstrapping nodes to the cluster
    preBootstrapCommands : [str], default is Undefined, optional
        PreBootstrapCommands specifies extra commands to run before bootstrapping nodes to the cluster
    serviceIPV6Cidr : str, default is Undefined, optional
        ServiceIPV6Cidr is the ipv6 cidr range of the cluster. If this is specified then
        the ip family will be set to ipv6.
    useMaxPods : bool, default is Undefined, optional
        UseMaxPods  sets --max-pods for the kubelet when true.
    users : [BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0], default is Undefined, optional
        Users specifies extra users to add
    """


    apiRetryAttempts?: int

    boostrapCommandOverride?: str

    containerRuntime?: str

    diskSetup?: BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetup

    dnsClusterIP?: str

    dockerConfigJson?: str

    files?: [BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0]

    kubeletExtraArgs?: {str:str}

    mounts?: [[str]]

    ntp?: BootstrapClusterxK8sIoV1beta2EKSConfigSpecNtp

    pauseContainer?: BootstrapClusterxK8sIoV1beta2EKSConfigSpecPauseContainer

    postBootstrapCommands?: [str]

    preBootstrapCommands?: [str]

    serviceIPV6Cidr?: str

    useMaxPods?: bool

    users?: [BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0]


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetup:
    r"""
    DiskSetup specifies options for the creation of partition tables and file systems on devices.

    Attributes
    ----------
    filesystems : [BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetupFilesystemsItems0], default is Undefined, optional
        Filesystems specifies the list of file systems to setup.
    partitions : [BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetupPartitionsItems0], default is Undefined, optional
        Partitions specifies the list of the partitions to setup.
    """


    filesystems?: [BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetupFilesystemsItems0]

    partitions?: [BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetupPartitionsItems0]


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetupFilesystemsItems0:
    r"""
    Filesystem defines the file systems to be created.

    Attributes
    ----------
    device : str, default is Undefined, required
        Device specifies the device name
    extraOpts : [str], default is Undefined, optional
        ExtraOpts defined extra options to add to the command for creating the file system.
    filesystem : str, default is Undefined, required
        Filesystem specifies the file system type.
    label : str, default is Undefined, required
        Label specifies the file system label to be used. If set to None, no label is used.
    overwrite : bool, default is Undefined, optional
        Overwrite defines whether or not to overwrite any existing filesystem.
        If true, any pre-existing file system will be destroyed. Use with Caution.
    partition : str, default is Undefined, optional
        Partition specifies the partition to use. The valid options are: "auto|any", "auto", "any", "none", and <NUM>, where NUM is the actual partition number.
    """


    device: str

    extraOpts?: [str]

    filesystem: str

    label: str

    overwrite?: bool

    partition?: str


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecDiskSetupPartitionsItems0:
    r"""
    Partition defines how to create and layout a partition.

    Attributes
    ----------
    device : str, default is Undefined, required
        Device is the name of the device.
    layout : bool, default is Undefined, required
        Layout specifies the device layout.
        If it is true, a single partition will be created for the entire device.
        When layout is false, it means don't partition or ignore existing partitioning.
    overwrite : bool, default is Undefined, optional
        Overwrite describes whether to skip checks and create the partition if a partition or filesystem is found on the device.
        Use with caution. Default is 'false'.
    tableType : str, default is Undefined, optional
        TableType specifies the tupe of partition table. The following are supported:
        'mbr': default and setups a MS-DOS partition table
        'gpt': setups a GPT partition table
    """


    device: str

    layout: bool

    overwrite?: bool

    tableType?: str


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0:
    r"""
    File defines the input for generating write_files in cloud-init.

    Attributes
    ----------
    append : bool, default is Undefined, optional
        Append specifies whether to append Content to existing file if Path exists.
    content : str, default is Undefined, optional
        Content is the actual content of the file.
    contentFrom : BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0ContentFrom, default is Undefined, optional
        content from
    encoding : str, default is Undefined, optional
        Encoding specifies the encoding of the file contents.
    owner : str, default is Undefined, optional
        Owner specifies the ownership of the file, e.g. "root:root".
    path : str, default is Undefined, required
        Path specifies the full path on disk where to store the file.
    permissions : str, default is Undefined, optional
        Permissions specifies the permissions to assign to the file, e.g. "0640".
    """


    append?: bool

    content?: str

    contentFrom?: BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0ContentFrom

    encoding?: "base64" | "gzip" | "gzip+base64"

    owner?: str

    path: str

    permissions?: str


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0ContentFrom:
    r"""
    ContentFrom is a referenced source of content to populate the file.

    Attributes
    ----------
    secret : BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0ContentFromSecret, default is Undefined, required
        secret
    """


    secret: BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0ContentFromSecret


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecFilesItems0ContentFromSecret:
    r"""
    Secret represents a secret that should populate this file.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key in the secret's data map for this value.
    name : str, default is Undefined, required
        Name of the secret in the KubeadmBootstrapConfig's namespace to use.
    """


    key: str

    name: str


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecNtp:
    r"""
    NTP specifies NTP configuration

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Enabled specifies whether NTP should be enabled
    servers : [str], default is Undefined, optional
        Servers specifies which NTP servers to use
    """


    enabled?: bool

    servers?: [str]


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecPauseContainer:
    r"""
    PauseContainer allows customization of the pause container to use.

    Attributes
    ----------
    accountNumber : str, default is Undefined, required
         AccountNumber is the AWS account number to pull the pause container from.
    version : str, default is Undefined, required
        Version is the tag of the pause container to use.
    """


    accountNumber: str

    version: str


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0:
    r"""
    User defines the input for a generated user in cloud-init.

    Attributes
    ----------
    gecos : str, default is Undefined, optional
        Gecos specifies the gecos to use for the user
    groups : str, default is Undefined, optional
        Groups specifies the additional groups for the user
    homeDir : str, default is Undefined, optional
        HomeDir specifies the home directory to use for the user
    inactive : bool, default is Undefined, optional
        Inactive specifies whether to mark the user as inactive
    lockPassword : bool, default is Undefined, optional
        LockPassword specifies if password login should be disabled
    name : str, default is Undefined, required
        Name specifies the username
    passwd : str, default is Undefined, optional
        Passwd specifies a hashed password for the user
    passwdFrom : BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0PasswdFrom, default is Undefined, optional
        passwd from
    primaryGroup : str, default is Undefined, optional
        PrimaryGroup specifies the primary group for the user
    shell : str, default is Undefined, optional
        Shell specifies the user's shell
    sshAuthorizedKeys : [str], default is Undefined, optional
        SSHAuthorizedKeys specifies a list of ssh authorized keys for the user
    sudo : str, default is Undefined, optional
        Sudo specifies a sudo role for the user
    """


    gecos?: str

    groups?: str

    homeDir?: str

    inactive?: bool

    lockPassword?: bool

    name: str

    passwd?: str

    passwdFrom?: BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0PasswdFrom

    primaryGroup?: str

    shell?: str

    sshAuthorizedKeys?: [str]

    sudo?: str


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0PasswdFrom:
    r"""
    PasswdFrom is a referenced source of passwd to populate the passwd.

    Attributes
    ----------
    secret : BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0PasswdFromSecret, default is Undefined, required
        secret
    """


    secret: BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0PasswdFromSecret


schema BootstrapClusterxK8sIoV1beta2EKSConfigSpecUsersItems0PasswdFromSecret:
    r"""
    Secret represents a secret that should populate this password.

    Attributes
    ----------
    key : str, default is Undefined, required
        Key is the key in the secret's data map for this value.
    name : str, default is Undefined, required
        Name of the secret in the KubeadmBootstrapConfig's namespace to use.
    """


    key: str

    name: str


schema BootstrapClusterxK8sIoV1beta2EKSConfigStatus:
    r"""
    EKSConfigStatus defines the observed state of the Amazon EKS Bootstrap Configuration.

    Attributes
    ----------
    conditions : [BootstrapClusterxK8sIoV1beta2EKSConfigStatusConditionsItems0], default is Undefined, optional
        Conditions defines current service state of the EKSConfig.
    dataSecretName : str, default is Undefined, optional
        DataSecretName is the name of the secret that stores the bootstrap data script.
    failureMessage : str, default is Undefined, optional
        FailureMessage will be set on non-retryable errors
    failureReason : str, default is Undefined, optional
        FailureReason will be set on non-retryable errors
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest generation observed by the controller.
    ready : bool, default is Undefined, optional
        Ready indicates the BootstrapData secret is ready to be consumed
    """


    conditions?: [BootstrapClusterxK8sIoV1beta2EKSConfigStatusConditionsItems0]

    dataSecretName?: str

    failureMessage?: str

    failureReason?: str

    observedGeneration?: int

    ready?: bool


schema BootstrapClusterxK8sIoV1beta2EKSConfigStatusConditionsItems0:
    r"""
    Condition defines an observation of a Cluster API resource operational state.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        Last time the condition transitioned from one status to another.
        This should be when the underlying condition changed. If that is not known, then using the time when
        the API field changed is acceptable.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
        This field may be empty.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition in CamelCase.
        The specific API may choose whether or not this field is considered a guaranteed API.
        This field may be empty.
    severity : str, default is Undefined, optional
        severity provides an explicit classification of Reason code, so the users or machines can immediately
        understand the current situation and act accordingly.
        The Severity field MUST be set only when Status=False.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
        can be useful (see .node.status.conditions), the ability to deconflict is important.
    """


    lastTransitionTime: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


