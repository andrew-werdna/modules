"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema KnativeServing:
    r"""
    Schema for the knativeservings API

    Attributes
    ----------
    apiVersion : str, default is "operator.knative.dev/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "KnativeServing", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OperatorKnativeDevV1beta1KnativeServingSpec, default is Undefined, optional
        spec
    status : OperatorKnativeDevV1beta1KnativeServingStatus, default is Undefined, optional
        status
    """


    apiVersion: "operator.knative.dev/v1beta1" = "operator.knative.dev/v1beta1"

    kind: "KnativeServing" = "KnativeServing"

    metadata?: v1.ObjectMeta

    spec?: OperatorKnativeDevV1beta1KnativeServingSpec

    status?: OperatorKnativeDevV1beta1KnativeServingStatus


schema OperatorKnativeDevV1beta1KnativeServingSpec:
    r"""
    Spec defines the desired state of KnativeServing

    Attributes
    ----------
    additionalManifests : [OperatorKnativeDevV1beta1KnativeServingSpecAdditionalManifestsItems0], default is Undefined, optional
        A list of the additional serving manifests, which will be installed by the operator
    config : {str:{str:str}}, default is Undefined, optional
        A means to override the corresponding entries in the upstream configmaps
    "controller-custom-certs" : OperatorKnativeDevV1beta1KnativeServingSpecControllerCustomCerts, default is Undefined, optional
        controller custom certs
    deployments : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0], default is Undefined, optional
        A mapping of deployment name to override
    "high-availability" : OperatorKnativeDevV1beta1KnativeServingSpecHighAvailability, default is Undefined, optional
        high availability
    ingress : OperatorKnativeDevV1beta1KnativeServingSpecIngress, default is Undefined, optional
        ingress
    manifests : [OperatorKnativeDevV1beta1KnativeServingSpecManifestsItems0], default is Undefined, optional
        A list of serving manifests, which will be installed by the operator
    namespace : OperatorKnativeDevV1beta1KnativeServingSpecNamespace, default is Undefined, optional
        namespace
    podDisruptionBudgets : [OperatorKnativeDevV1beta1KnativeServingSpecPodDisruptionBudgetsItems0], default is Undefined, optional
        A mapping of podDisruptionBudget name to override
    registry : OperatorKnativeDevV1beta1KnativeServingSpecRegistry, default is Undefined, optional
        registry
    security : OperatorKnativeDevV1beta1KnativeServingSpecSecurity, default is Undefined, optional
        security
    services : [OperatorKnativeDevV1beta1KnativeServingSpecServicesItems0], default is Undefined, optional
        A mapping of service name to override
    version : str, default is Undefined, optional
        The version of Knative Serving to be installed
    workloads : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0], default is Undefined, optional
        A mapping of deployment or statefulset name to override
    """


    additionalManifests?: [OperatorKnativeDevV1beta1KnativeServingSpecAdditionalManifestsItems0]

    config?: {str:{str:str}}

    "controller-custom-certs"?: OperatorKnativeDevV1beta1KnativeServingSpecControllerCustomCerts

    deployments?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0]

    "high-availability"?: OperatorKnativeDevV1beta1KnativeServingSpecHighAvailability

    ingress?: OperatorKnativeDevV1beta1KnativeServingSpecIngress

    manifests?: [OperatorKnativeDevV1beta1KnativeServingSpecManifestsItems0]

    namespace?: OperatorKnativeDevV1beta1KnativeServingSpecNamespace

    podDisruptionBudgets?: [OperatorKnativeDevV1beta1KnativeServingSpecPodDisruptionBudgetsItems0]

    registry?: OperatorKnativeDevV1beta1KnativeServingSpecRegistry

    security?: OperatorKnativeDevV1beta1KnativeServingSpecSecurity

    services?: [OperatorKnativeDevV1beta1KnativeServingSpecServicesItems0]

    version?: str

    workloads?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecAdditionalManifestsItems0:
    r"""
    operator knative dev v1beta1 knative serving spec additional manifests items0

    Attributes
    ----------
    URL : str, default is Undefined, optional
        The link of the additional manifest URL
    """


    URL?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecControllerCustomCerts:
    r"""
    Enabling the controller to trust registries with self-signed certificates

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of the ConfigMap or Secret
    $type : str, default is Undefined, optional
        One of ConfigMap or Secret
    """


    name?: str

    $type?: "ConfigMap" | "Secret" | ""


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0:
    r"""
    operator knative dev v1beta1 knative serving spec deployments items0

    Attributes
    ----------
    affinity : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0Affinity, default is Undefined, optional
        affinity
    annotations : {str:str}, default is Undefined, optional
        Annotations overrides labels for the deployment and its template.
    env : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0], default is Undefined, optional
        Env overrides env vars for the containers.
    hostNetwork : bool, default is Undefined, optional
        Use the host's network namespace if true. Make sure to understand the security implications if you want to enable it. When hostNetwork is enabled, this will set dnsPolicy to ClusterFirstWithHostNet automatically.
    labels : {str:str}, default is Undefined, optional
        Labels overrides labels for the deployment and its template.
    livenessProbes : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0LivenessProbesItems0], default is Undefined, optional
        LivenessProbes overrides liveness probes for the containers.
    name : str, default is Undefined, optional
        The name of the deployment
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector overrides nodeSelector for the deployment.
    readinessProbes : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ReadinessProbesItems0], default is Undefined, optional
        ReadinessProbes overrides readiness probes for the containers.
    replicas : int, default is Undefined, optional
        The number of replicas that HA parts of the control plane will be scaled to
    resources : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0], default is Undefined, optional
        If specified, the container's resources.
    tolerations : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    topologySpreadConstraints : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0], default is Undefined, optional
        If specified, the pod's topology spread constraints.
    """


    affinity?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0Affinity

    annotations?: {str:str}

    env?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0]

    hostNetwork?: bool

    labels?: {str:str}

    livenessProbes?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0LivenessProbesItems0]

    name?: str

    nodeSelector?: {str:str}

    readinessProbes?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ReadinessProbesItems0]

    replicas?: int

    resources?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0]

    tolerations?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TolerationsItems0]

    topologySpreadConstraints?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0]


    check:
        replicas >= 0 if replicas not in [None, Undefined]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0Affinity:
    r"""
    If specified, the pod's scheduling constraints.

    Attributes
    ----------
    nodeAffinity : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinity, default is Undefined, optional
        node affinity
    podAffinity : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinity, default is Undefined, optional
        pod affinity
    podAntiAffinity : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinity, default is Undefined, optional
        pod anti affinity
    """


    nodeAffinity?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinity

    podAffinity?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinity

    podAntiAffinity?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinity


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinity:
    r"""
    Describes node affinity scheduling rules for the pod.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """


    preference: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]

    matchFields?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """


    nodeSelectorTerms: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]

    matchFields?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinity:
    r"""
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    """


    podAffinityTerm: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinity:
    r"""
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    """


    podAffinityTerm: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0:
    r"""
    operator knative dev v1beta1 knative serving spec deployments items0 env items0

    Attributes
    ----------
    container : str, default is Undefined, required
        The container name
    envVars : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0], default is Undefined, optional
        The desired EnvVarRequirements
    """


    container: str

    envVars?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    valueFrom : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFrom


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromConfigMapKeyRef

    fieldRef?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromFieldRef

    resourceFieldRef?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromResourceFieldRef

    secretKeyRef?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromSecretKeyRef


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0EnvItems0EnvVarsItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0LivenessProbesItems0:
    r"""
    ProbesRequirementsOverride enables the user to override any container's env vars.

    Attributes
    ----------
    container : str, default is Undefined, required
        The container name
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """


    container: str

    failureThreshold?: int

    initialDelaySeconds?: int

    periodSeconds?: int

    successThreshold?: int

    terminationGracePeriodSeconds?: int

    timeoutSeconds?: int


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ReadinessProbesItems0:
    r"""
    ProbesRequirementsOverride enables the user to override any container's env vars.

    Attributes
    ----------
    container : str, default is Undefined, required
        The container name
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """


    container: str

    failureThreshold?: int

    initialDelaySeconds?: int

    periodSeconds?: int

    successThreshold?: int

    terminationGracePeriodSeconds?: int

    timeoutSeconds?: int


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0:
    r"""
    The pod this Resource is used to specify the requests and limits for a certain container based on the name.

    Attributes
    ----------
    container : str, default is Undefined, optional
        The name of the container
    limits : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0Limits, default is Undefined, optional
        limits
    requests : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0Requests, default is Undefined, optional
        requests
    """


    container?: str

    limits?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0Limits

    requests?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0Requests


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0Limits:
    r"""
    operator knative dev v1beta1 knative serving spec deployments items0 resources items0 limits

    Attributes
    ----------
    cpu : str, default is Undefined, optional
        cpu
    memory : str, default is Undefined, optional
        memory
    """


    cpu?: str

    memory?: str


    check:
        _regex_match(str(cpu), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if cpu
        _regex_match(str(memory), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if memory


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0ResourcesItems0Requests:
    r"""
    operator knative dev v1beta1 knative serving spec deployments items0 resources items0 requests

    Attributes
    ----------
    cpu : str, default is Undefined, optional
        cpu
    memory : str, default is Undefined, optional
        memory
    """


    cpu?: str

    memory?: str


    check:
        _regex_match(str(cpu), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if cpu
        _regex_match(str(memory), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if memory


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0:
    r"""
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0LabelSelector, default is Undefined, optional
        label selector
    maxSkew : int, default is Undefined, required
        MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.
    topologyKey : str, default is Undefined, required
        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
    whenUnsatisfiable : str, default is Undefined, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0LabelSelector

    maxSkew: int

    topologyKey: str

    whenUnsatisfiable: str


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0LabelSelector:
    r"""
    LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecDeploymentsItems0TopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecHighAvailability:
    r"""
    Allows specification of HA control plane

    Attributes
    ----------
    replicas : int, default is Undefined, optional
        The number of replicas that HA parts of the control plane will be scaled to
    """


    replicas?: int


    check:
        replicas >= 0 if replicas not in [None, Undefined]


schema OperatorKnativeDevV1beta1KnativeServingSpecIngress:
    r"""
    The ingress configuration for Knative Serving

    Attributes
    ----------
    contour : OperatorKnativeDevV1beta1KnativeServingSpecIngressContour, default is Undefined, optional
        contour
    istio : OperatorKnativeDevV1beta1KnativeServingSpecIngressIstio, default is Undefined, optional
        istio
    kourier : OperatorKnativeDevV1beta1KnativeServingSpecIngressKourier, default is Undefined, optional
        kourier
    """


    contour?: OperatorKnativeDevV1beta1KnativeServingSpecIngressContour

    istio?: OperatorKnativeDevV1beta1KnativeServingSpecIngressIstio

    kourier?: OperatorKnativeDevV1beta1KnativeServingSpecIngressKourier


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressContour:
    r"""
    Contour settings

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        enabled
    """


    enabled?: bool


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstio:
    r"""
    Istio settings

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        enabled
    "knative-ingress-gateway" : OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGateway, default is Undefined, optional
        knative ingress gateway
    "knative-local-gateway" : OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGateway, default is Undefined, optional
        knative local gateway
    """


    enabled?: bool

    "knative-ingress-gateway"?: OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGateway

    "knative-local-gateway"?: OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGateway


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGateway:
    r"""
    A means to override the knative-ingress-gateway

    Attributes
    ----------
    selector : {str:str}, default is Undefined, optional
        The selector for the ingress-gateway.
    servers : [OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0], default is Undefined, optional
        A list of server specifications.
    """


    selector?: {str:str}

    servers?: [OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0:
    r"""
    operator knative dev v1beta1 knative serving spec ingress istio knative ingress gateway servers items0

    Attributes
    ----------
    hosts : [str], default is Undefined, optional
        One or more hosts exposed by this gateway.
    port : OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0Port, default is Undefined, optional
        port
    tls : OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0TLS, default is Undefined, optional
        tls
    """


    hosts?: [str]

    port?: OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0Port

    tls?: OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0TLS


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0Port:
    r"""
    operator knative dev v1beta1 knative serving spec ingress istio knative ingress gateway servers items0 port

    Attributes
    ----------
    name : str, default is Undefined, optional
        Label assigned to the port.
    number : int, default is Undefined, optional
        A valid non-negative integer port number.
    $protocol : str, default is Undefined, optional
        The protocol exposed on the port.
    target_port : int, default is Undefined, optional
        A valid non-negative integer target port number.
    """


    name?: str

    number?: int

    $protocol?: str

    target_port?: int


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeIngressGatewayServersItems0TLS:
    r"""
    operator knative dev v1beta1 knative serving spec ingress istio knative ingress gateway servers items0 TLS

    Attributes
    ----------
    credentialName : str, default is Undefined, optional
        TLS certificate name.
    httpsRedirect : bool, default is Undefined, optional
        If set to true, the load balancer will send a 301 redirect to HTTPS for all HTTP requests. Should be used only for HTTP listener, is mutually exclusive with all other TLS options.
    mode : str, default is Undefined, optional
        TLS mode can be SIMPLE, MUTUAL, ISTIO_MUTUAL.
    """


    credentialName?: str

    httpsRedirect?: bool

    mode?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGateway:
    r"""
    A means to override the knative-local-gateway

    Attributes
    ----------
    selector : {str:str}, default is Undefined, optional
        The selector for the ingress-gateway.
    servers : [OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0], default is Undefined, optional
        A list of server specifications.
    """


    selector?: {str:str}

    servers?: [OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0:
    r"""
    operator knative dev v1beta1 knative serving spec ingress istio knative local gateway servers items0

    Attributes
    ----------
    hosts : [str], default is Undefined, optional
        One or more hosts exposed by this gateway.
    port : OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0Port, default is Undefined, optional
        port
    tls : OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0TLS, default is Undefined, optional
        tls
    """


    hosts?: [str]

    port?: OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0Port

    tls?: OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0TLS


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0Port:
    r"""
    operator knative dev v1beta1 knative serving spec ingress istio knative local gateway servers items0 port

    Attributes
    ----------
    name : str, default is Undefined, optional
        Label assigned to the port.
    number : int, default is Undefined, optional
        A valid non-negative integer port number.
    $protocol : str, default is Undefined, optional
        The protocol exposed on the port.
    target_port : int, default is Undefined, optional
        A valid non-negative integer target port number.
    """


    name?: str

    number?: int

    $protocol?: str

    target_port?: int


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressIstioKnativeLocalGatewayServersItems0TLS:
    r"""
    operator knative dev v1beta1 knative serving spec ingress istio knative local gateway servers items0 TLS

    Attributes
    ----------
    credentialName : str, default is Undefined, optional
        TLS certificate name.
    httpsRedirect : bool, default is Undefined, optional
        If set to true, the load balancer will send a 301 redirect to HTTPS for all HTTP requests. Should be used only for HTTP listener, is mutually exclusive with all other TLS options.
    mode : str, default is Undefined, optional
        TLS mode can be SIMPLE, MUTUAL, ISTIO_MUTUAL.
    """


    credentialName?: str

    httpsRedirect?: bool

    mode?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecIngressKourier:
    r"""
    Kourier settings

    Attributes
    ----------
    "bootstrap-configmap" : str, default is Undefined, optional
        bootstrap configmap
    enabled : bool, default is Undefined, optional
        enabled
    "http-port" : int, default is Undefined, optional
        http port
    "https-port" : int, default is Undefined, optional
        https port
    "service-load-balancer-ip" : str, default is Undefined, optional
        service load balancer ip
    "service-type" : str, default is Undefined, optional
        service type
    """


    "bootstrap-configmap"?: str

    enabled?: bool

    "http-port"?: int

    "https-port"?: int

    "service-load-balancer-ip"?: str

    "service-type"?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecManifestsItems0:
    r"""
    operator knative dev v1beta1 knative serving spec manifests items0

    Attributes
    ----------
    URL : str, default is Undefined, optional
        The link of the manifest URL
    """


    URL?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecNamespace:
    r"""
    A field of namespace name to override the labels and annotations

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations overrides labels for the namespace and its template.
    labels : {str:str}, default is Undefined, optional
        Labels overrides labels for the namespace and its template.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecPodDisruptionBudgetsItems0:
    r"""
    operator knative dev v1beta1 knative serving spec pod disruption budgets items0

    Attributes
    ----------
    maxUnavailable : int | str, default is Undefined, optional
        An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
    minAvailable : int | str, default is Undefined, optional
        An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
    name : str, default is Undefined, optional
        The name of the podDisruptionBudget
    """


    maxUnavailable?: int | str

    minAvailable?: int | str

    name?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecRegistry:
    r"""
    A means to override the corresponding deployment images in the upstream. This affects both apps/v1.Deployment and caching.internal.knative.dev/v1alpha1.Image.

    Attributes
    ----------
    default : str, default is Undefined, optional
        The default image reference template to use for all knative images. Takes the form of example-registry.io/custom/path/${NAME}:custom-tag
    imagePullSecrets : [OperatorKnativeDevV1beta1KnativeServingSpecRegistryImagePullSecretsItems0], default is Undefined, optional
        A list of secrets to be used when pulling the knative images. The secret must be created in the same namespace as the knative-serving deployments, and not the namespace of this resource.
    override : {str:str}, default is Undefined, optional
        A map of a container name or image name to the full image location of the individual knative image.
    """


    default?: str

    imagePullSecrets?: [OperatorKnativeDevV1beta1KnativeServingSpecRegistryImagePullSecretsItems0]

    override?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecRegistryImagePullSecretsItems0:
    r"""
    operator knative dev v1beta1 knative serving spec registry image pull secrets items0

    Attributes
    ----------
    name : str, default is Undefined, optional
        The name of the secret.
    """


    name?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecSecurity:
    r"""
    The security configuration for Knative Serving

    Attributes
    ----------
    securityGuard : OperatorKnativeDevV1beta1KnativeServingSpecSecuritySecurityGuard, default is Undefined, optional
        security guard
    """


    securityGuard?: OperatorKnativeDevV1beta1KnativeServingSpecSecuritySecurityGuard


schema OperatorKnativeDevV1beta1KnativeServingSpecSecuritySecurityGuard:
    r"""
    Security Guard settings

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        enabled
    """


    enabled?: bool


schema OperatorKnativeDevV1beta1KnativeServingSpecServicesItems0:
    r"""
    operator knative dev v1beta1 knative serving spec services items0

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations overrides labels for the service
    labels : {str:str}, default is Undefined, optional
        Labels overrides labels for the service
    name : str, default is Undefined, optional
        The name of the service
    selector : {str:str}, default is Undefined, optional
        Selector overrides selector for the service
    """


    annotations?: {str:str}

    labels?: {str:str}

    name?: str

    selector?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0:
    r"""
    operator knative dev v1beta1 knative serving spec workloads items0

    Attributes
    ----------
    affinity : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0Affinity, default is Undefined, optional
        affinity
    annotations : {str:str}, default is Undefined, optional
        Annotations overrides labels for the deployment and its template.
    env : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0], default is Undefined, optional
        Env overrides env vars for the containers.
    hostNetwork : bool, default is Undefined, optional
        Use the host's network namespace if true. Make sure to understand the security implications if you want to enable it. When hostNetwork is enabled, this will set dnsPolicy to ClusterFirstWithHostNet automatically.
    labels : {str:str}, default is Undefined, optional
        Labels overrides labels for the deployment and its template.
    livenessProbes : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0LivenessProbesItems0], default is Undefined, optional
        LivenessProbes overrides liveness probes for the containers.
    name : str, default is Undefined, optional
        The name of the deployment
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector overrides nodeSelector for the deployment.
    readinessProbes : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ReadinessProbesItems0], default is Undefined, optional
        ReadinessProbes overrides readiness probes for the containers.
    replicas : int, default is Undefined, optional
        The number of replicas that HA parts of the control plane will be scaled to
    resources : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0], default is Undefined, optional
        If specified, the container's resources.
    tolerations : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    topologySpreadConstraints : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0], default is Undefined, optional
        If specified, the pod's topology spread constraints.
    version : str, default is Undefined, optional
        Version the cluster should be on.
    volumeMounts : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0VolumeMountsItems0], default is Undefined, optional
        VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
    """


    affinity?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0Affinity

    annotations?: {str:str}

    env?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0]

    hostNetwork?: bool

    labels?: {str:str}

    livenessProbes?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0LivenessProbesItems0]

    name?: str

    nodeSelector?: {str:str}

    readinessProbes?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ReadinessProbesItems0]

    replicas?: int

    resources?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0]

    tolerations?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TolerationsItems0]

    topologySpreadConstraints?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0]

    version?: str

    volumeMounts?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0VolumeMountsItems0]


    check:
        replicas >= 0 if replicas not in [None, Undefined]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0Affinity:
    r"""
    If specified, the pod's scheduling constraints.

    Attributes
    ----------
    nodeAffinity : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinity, default is Undefined, optional
        node affinity
    podAffinity : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinity, default is Undefined, optional
        pod affinity
    podAntiAffinity : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinity, default is Undefined, optional
        pod anti affinity
    """


    nodeAffinity?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinity

    podAffinity?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinity

    podAntiAffinity?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinity


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinity:
    r"""
    Describes node affinity scheduling rules for the pod.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """


    preference: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]

    matchFields?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """


    nodeSelectorTerms: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]

    matchFields?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinity:
    r"""
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    """


    podAffinityTerm: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinity:
    r"""
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    """


    podAffinityTerm: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector

    namespaces?: [str]

    topologyKey: str


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0AffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0:
    r"""
    operator knative dev v1beta1 knative serving spec workloads items0 env items0

    Attributes
    ----------
    container : str, default is Undefined, required
        The container name
    envVars : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0], default is Undefined, optional
        The desired EnvVarRequirements
    """


    container: str

    envVars?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    valueFrom : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFrom, default is Undefined, optional
        value from
    """


    name: str

    value?: str

    valueFrom?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFrom


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """


    configMapKeyRef?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromConfigMapKeyRef

    fieldRef?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromFieldRef

    resourceFieldRef?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromResourceFieldRef

    secretKeyRef?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromSecretKeyRef


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """


    apiVersion?: str

    fieldPath: str


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """


    containerName?: str

    divisor?: int | str

    resource: str


    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0EnvItems0EnvVarsItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """


    key: str

    name?: str

    optional?: bool


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0LivenessProbesItems0:
    r"""
    ProbesRequirementsOverride enables the user to override any container's env vars.

    Attributes
    ----------
    container : str, default is Undefined, required
        The container name
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """


    container: str

    failureThreshold?: int

    initialDelaySeconds?: int

    periodSeconds?: int

    successThreshold?: int

    terminationGracePeriodSeconds?: int

    timeoutSeconds?: int


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ReadinessProbesItems0:
    r"""
    ProbesRequirementsOverride enables the user to override any container's env vars.

    Attributes
    ----------
    container : str, default is Undefined, required
        The container name
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """


    container: str

    failureThreshold?: int

    initialDelaySeconds?: int

    periodSeconds?: int

    successThreshold?: int

    terminationGracePeriodSeconds?: int

    timeoutSeconds?: int


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0:
    r"""
    The pod this Resource is used to specify the requests and limits for a certain container based on the name.

    Attributes
    ----------
    container : str, default is Undefined, optional
        The name of the container
    limits : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0Limits, default is Undefined, optional
        limits
    requests : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0Requests, default is Undefined, optional
        requests
    """


    container?: str

    limits?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0Limits

    requests?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0Requests


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0Limits:
    r"""
    operator knative dev v1beta1 knative serving spec workloads items0 resources items0 limits

    Attributes
    ----------
    cpu : str, default is Undefined, optional
        cpu
    memory : str, default is Undefined, optional
        memory
    """


    cpu?: str

    memory?: str


    check:
        _regex_match(str(cpu), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if cpu
        _regex_match(str(memory), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if memory


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0ResourcesItems0Requests:
    r"""
    operator knative dev v1beta1 knative serving spec workloads items0 resources items0 requests

    Attributes
    ----------
    cpu : str, default is Undefined, optional
        cpu
    memory : str, default is Undefined, optional
        memory
    """


    cpu?: str

    memory?: str


    check:
        _regex_match(str(cpu), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if cpu
        _regex_match(str(memory), r"^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$") if memory


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0:
    r"""
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    Attributes
    ----------
    labelSelector : OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0LabelSelector, default is Undefined, optional
        label selector
    maxSkew : int, default is Undefined, required
        MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.
    topologyKey : str, default is Undefined, required
        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
    whenUnsatisfiable : str, default is Undefined, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as "Unsatisfiable" if and only if placing incoming pod on any topology violates "MaxSkew". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
    """


    labelSelector?: OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0LabelSelector

    maxSkew: int

    topologyKey: str

    whenUnsatisfiable: str


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0LabelSelector:
    r"""
    LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.

    Attributes
    ----------
    matchExpressions : [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0TopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorKnativeDevV1beta1KnativeServingSpecWorkloadsItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    """


    mountPath: str

    mountPropagation?: str

    name: str

    readOnly?: bool

    subPath?: str

    subPathExpr?: str


schema OperatorKnativeDevV1beta1KnativeServingStatus:
    r"""
    Status defines the observed state of KnativeServing

    Attributes
    ----------
    conditions : [OperatorKnativeDevV1beta1KnativeServingStatusConditionsItems0], default is Undefined, optional
        The latest available observations of a resource's current state.
    manifests : [str], default is Undefined, optional
        The list of serving manifests, which have been installed by the operator
    observedGeneration : int, default is Undefined, optional
        The generation last processed by the controller
    version : str, default is Undefined, optional
        The version of the installed release
    """


    conditions?: [OperatorKnativeDevV1beta1KnativeServingStatusConditionsItems0]

    manifests?: [str]

    observedGeneration?: int

    version?: str


schema OperatorKnativeDevV1beta1KnativeServingStatusConditionsItems0:
    r"""
    operator knative dev v1beta1 knative serving status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


