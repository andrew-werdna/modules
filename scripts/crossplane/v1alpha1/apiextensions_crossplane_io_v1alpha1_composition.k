"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Composition:
    r"""
    Composition defines the group of resources to be created when a compatible type is created with reference to the composition.

    Attributes
    ----------
    apiVersion : str, default is "apiextensions.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Composition", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApiextensionsCrossplaneIoV1alpha1CompositionSpec, default is Undefined, optional
        spec
    status : ApiextensionsCrossplaneIoV1alpha1CompositionStatus, default is Undefined, optional
        status
    """


    apiVersion: "apiextensions.crossplane.io/v1alpha1" = "apiextensions.crossplane.io/v1alpha1"

    kind: "Composition" = "Composition"

    metadata?: v1.ObjectMeta

    spec?: ApiextensionsCrossplaneIoV1alpha1CompositionSpec

    status?: ApiextensionsCrossplaneIoV1alpha1CompositionStatus


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpec:
    r"""
    CompositionSpec specifies the desired state of the definition.

    Attributes
    ----------
    from : ApiextensionsCrossplaneIoV1alpha1CompositionSpecFrom, default is Undefined, required
        from
    reclaimPolicy : str, default is Undefined, optional
        ReclaimPolicy specifies what will happen to composite resource dynamically provisioned using this composition when their namespaced referrer is deleted. The "Delete" policy causes the composite resource to be deleted when its namespaced referrer is deleted. The "Retain" policy causes the composite resource to be retained, in binding phase "Released", when its namespaced referrer is deleted. The "Retain" policy is used when no policy is specified, however the "Delete" policy is set at dynamic provisioning time if no policy is set.
    to : [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0], default is Undefined, required
        To is the list of target resources that make up the composition.
    writeConnectionSecretsToNamespace : str, default is Undefined, required
        WriteConnectionSecretsToNamespace specifies the namespace in which the connection secrets of composite resource dynamically provisioned using this composition will be created.
    """


    from: ApiextensionsCrossplaneIoV1alpha1CompositionSpecFrom

    reclaimPolicy?: "Retain" | "Delete"

    to: [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0]

    writeConnectionSecretsToNamespace: str


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpecFrom:
    r"""
    From refers to the type that this composition is compatible. The values for the underlying resources will be fetched from the instances of the From.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion of the type.
    kind : str, default is Undefined, required
        Kind of the type.
    """


    apiVersion: str

    kind: str


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0:
    r"""
    ComposedTemplate is used to provide information about how the composed resource should be processed.

    Attributes
    ----------
    base : any, default is Undefined, required
        Base is the target resource that the patches will be applied on.
    connectionDetails : [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0ConnectionDetailsItems0], default is Undefined, optional
        ConnectionDetails lists the propagation secret keys from this target resource to the composition instance connection secret.
    patches : [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0], default is Undefined, optional
        Patches will be applied as overlay to the base resource.
    """


    base: any

    connectionDetails?: [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0ConnectionDetailsItems0]

    patches?: [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0]


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0ConnectionDetailsItems0:
    r"""
    ConnectionDetail includes the information about the propagation of the connection information from one secret to another.

    Attributes
    ----------
    fromConnectionSecretKey : str, default is Undefined, required
        FromConnectionSecretKey is the key that will be used to fetch the value from the given target resource.
    name : str, default is Undefined, optional
        Name of the connection secret key that will be propagated to the connection secret of the composition instance. Leave empty if you'd like to use the same key name.
    """


    fromConnectionSecretKey: str

    name?: str


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0:
    r"""
    Patch is used to patch the field on the base resource at ToFieldPath after piping the value that is at FromFieldPath of the target resource through transformers.

    Attributes
    ----------
    fromFieldPath : str, default is Undefined, required
        FromFieldPath is the path of the field on the upstream resource whose value to be used as input.
    toFieldPath : str, default is Undefined, optional
        ToFieldPath is the path of the field on the base resource whose value will be changed with the result of transforms. Leave empty if you'd like to propagate to the same path on the target resource.
    transforms : [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0], default is Undefined, optional
        Transforms are the list of functions that are used as a FIFO pipe for the input to be transformed.
    """


    fromFieldPath: str

    toFieldPath?: str

    transforms?: [ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0]


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0:
    r"""
    Transform is a unit of process whose input is transformed into an output with the supplied configuration.

    Attributes
    ----------
    $map : {str:str}, default is Undefined, optional
        Map uses the input as a key in the given map and returns the value.
    math : ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0Math, default is Undefined, optional
        math
    string : ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0String, default is Undefined, optional
        string
    $type : str, default is Undefined, required
        Type of the transform to be run.
    """


    $map?: {str:str}

    math?: ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0Math

    string?: ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0String

    $type: str


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0Math:
    r"""
    Math is used to transform the input via mathematical operations such as multiplication.

    Attributes
    ----------
    multiply : int, default is Undefined, optional
        Multiply the value.
    """


    multiply?: int


schema ApiextensionsCrossplaneIoV1alpha1CompositionSpecToItems0PatchesItems0TransformsItems0String:
    r"""
    String is used to transform the input into a string or a different kind of string. Note that the input does not necessarily need to be a string.

    Attributes
    ----------
    fmt : str, default is Undefined, required
        Format the input using a Go format string. See https://golang.org/pkg/fmt/ for details.
    """


    fmt: str


schema ApiextensionsCrossplaneIoV1alpha1CompositionStatus:
    r"""
    CompositionStatus shows the observed state of the composition.

    Attributes
    ----------
    conditions : [ApiextensionsCrossplaneIoV1alpha1CompositionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    conditions?: [ApiextensionsCrossplaneIoV1alpha1CompositionStatusConditionsItems0]


schema ApiextensionsCrossplaneIoV1alpha1CompositionStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


