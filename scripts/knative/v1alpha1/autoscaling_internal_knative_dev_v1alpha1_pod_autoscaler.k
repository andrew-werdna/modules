"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema PodAutoscaler:
    r"""
    PodAutoscaler is a Knative abstraction that encapsulates the interface by which Knative
    components instantiate autoscalers.  This definition is an abstraction that may be backed
    by multiple definitions.  For more information, see the Knative Pluggability presentation:
    https://docs.google.com/presentation/d/19vW9HFZ6Puxt31biNZF3uLRejDmu82rxJIk1cWmxF7w/edit

    Attributes
    ----------
    apiVersion : str, default is "autoscaling.internal.knative.dev/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "PodAutoscaler", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AutoscalingInternalKnativeDevV1alpha1PodAutoscalerSpec, default is Undefined, optional
        spec
    status : AutoscalingInternalKnativeDevV1alpha1PodAutoscalerStatus, default is Undefined, optional
        status
    """


    apiVersion: "autoscaling.internal.knative.dev/v1alpha1" = "autoscaling.internal.knative.dev/v1alpha1"

    kind: "PodAutoscaler" = "PodAutoscaler"

    metadata?: v1.ObjectMeta

    spec?: AutoscalingInternalKnativeDevV1alpha1PodAutoscalerSpec

    status?: AutoscalingInternalKnativeDevV1alpha1PodAutoscalerStatus


schema AutoscalingInternalKnativeDevV1alpha1PodAutoscalerSpec:
    r"""
    Spec holds the desired state of the PodAutoscaler (from the client).

    Attributes
    ----------
    containerConcurrency : int, default is Undefined, optional
        ContainerConcurrency specifies the maximum allowed
        in-flight (concurrent) requests per container of the Revision.
        Defaults to `0` which means unlimited concurrency.
    protocolType : str, default is Undefined, required
        The application-layer protocol. Matches `ProtocolType` inferred from the revision spec.
    reachability : str, default is Undefined, optional
        Reachability specifies whether or not the `ScaleTargetRef` can be reached (ie. has a route).
        Defaults to `ReachabilityUnknown`
    scaleTargetRef : AutoscalingInternalKnativeDevV1alpha1PodAutoscalerSpecScaleTargetRef, default is Undefined, required
        scale target ref
    """


    containerConcurrency?: int

    protocolType: str

    reachability?: str

    scaleTargetRef: AutoscalingInternalKnativeDevV1alpha1PodAutoscalerSpecScaleTargetRef


schema AutoscalingInternalKnativeDevV1alpha1PodAutoscalerSpecScaleTargetRef:
    r"""
    ScaleTargetRef defines the /scale-able resource that this PodAutoscaler
    is responsible for quickly right-sizing.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        API version of the referent.
    kind : str, default is Undefined, optional
        Kind of the referent.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, default is Undefined, optional
        Name of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    apiVersion?: str

    kind?: str

    name?: str


schema AutoscalingInternalKnativeDevV1alpha1PodAutoscalerStatus:
    r"""
    Status communicates the observed state of the PodAutoscaler (from the controller).

    Attributes
    ----------
    actualScale : int, default is Undefined, optional
        ActualScale shows the actual number of replicas for the revision.
    annotations : {str:str}, default is Undefined, optional
        Annotations is additional Status fields for the Resource to save some
        additional State as well as convey more information to the user. This is
        roughly akin to Annotations on any k8s resource, just the reconciler conveying
        richer information outwards.
    conditions : [AutoscalingInternalKnativeDevV1alpha1PodAutoscalerStatusConditionsItems0], default is Undefined, optional
        Conditions the latest available observations of a resource's current state.
    desiredScale : int, default is Undefined, optional
        DesiredScale shows the current desired number of replicas for the revision.
    metricsServiceName : str, default is Undefined, required
        MetricsServiceName is the K8s Service name that provides revision metrics.
        The service is managed by the PA object.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the 'Generation' of the Service that
        was last processed by the controller.
    serviceName : str, default is Undefined, required
        ServiceName is the K8s Service name that serves the revision, scaled by this PA.
        The service is created and owned by the ServerlessService object owned by this PA.
    """


    actualScale?: int

    annotations?: {str:str}

    conditions?: [AutoscalingInternalKnativeDevV1alpha1PodAutoscalerStatusConditionsItems0]

    desiredScale?: int

    metricsServiceName: str

    observedGeneration?: int

    serviceName: str


schema AutoscalingInternalKnativeDevV1alpha1PodAutoscalerStatusConditionsItems0:
    r"""
    Condition defines a readiness condition for a Knative resource.
    See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the last time the condition transitioned from one status to another.
        We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic
        differences (all other things held constant).
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    severity : str, default is Undefined, optional
        Severity with which to treat failures of this type of condition.
        When this is not specified, it defaults to Error.
    status : str, default is Undefined, required
        Status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        Type of condition.
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    severity?: str

    status: str

    $type: str


