"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema SecurityContextConstraints:
    r"""
    SecurityContextConstraints governs the ability to make requests that affect the SecurityContext that will be applied to a container. For historical reasons SCC was exposed under the core Kubernetes API group. That exposure is deprecated and will be removed in a future release - users should instead use the security.openshift.io group to manage SecurityContextConstraints.

    Attributes
    ----------
    allowHostDirVolumePlugin : bool, default is Undefined, required
        AllowHostDirVolumePlugin determines if the policy allow containers to use the HostDir volume plugin
    allowHostIPC : bool, default is Undefined, required
        AllowHostIPC determines if the policy allows host ipc in the containers.
    allowHostNetwork : bool, default is Undefined, required
        AllowHostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
    allowHostPID : bool, default is Undefined, required
        AllowHostPID determines if the policy allows host pid in the containers.
    allowHostPorts : bool, default is Undefined, required
        AllowHostPorts determines if the policy allows host ports in the containers.
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
    allowPrivilegedContainer : bool, default is Undefined, required
        AllowPrivilegedContainer determines if a container can request to be run as privileged.
    allowedCapabilities : [str], default is Undefined, required
        AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field maybe added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities. To allow all capabilities you may use '*'.
    allowedFlexVolumes : [SecurityOpenshiftIoV1SecurityContextConstraintsAllowedFlexVolumesItems0], default is Undefined, optional
        AllowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "Volumes" field.
    allowedUnsafeSysctls : [str], default is Undefined, optional
        AllowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection. 
         Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
    apiVersion : str, default is "security.openshift.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    defaultAddCapabilities : [str], default is Undefined, required
        DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.
    defaultAllowPrivilegeEscalation : bool, default is Undefined, optional
        DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
    forbiddenSysctls : [str], default is Undefined, optional
        ForbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden. 
         Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
    fsGroup : SecurityOpenshiftIoV1SecurityContextConstraintsFsGroup, default is Undefined, optional
        fs group
    groups : [str], default is Undefined, optional
        The groups that have permission to use this security context constraints
    kind : str, default is "SecurityContextConstraints", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    priority : int, default is Undefined, required
        Priority influences the sort order of SCCs when evaluating which SCCs to try first for a given pod request based on access in the Users and Groups fields.  The higher the int, the higher priority. An unset value is considered a 0 priority. If scores for multiple SCCs are equal they will be sorted from most restrictive to least restrictive. If both priorities and restrictions are equal the SCCs will be sorted by name.
    readOnlyRootFilesystem : bool, default is Undefined, required
        ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the SCC should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
    requiredDropCapabilities : [str], default is Undefined, required
        RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
    runAsUser : SecurityOpenshiftIoV1SecurityContextConstraintsRunAsUser, default is Undefined, optional
        run as user
    seLinuxContext : SecurityOpenshiftIoV1SecurityContextConstraintsSeLinuxContext, default is Undefined, optional
        se linux context
    seccompProfiles : [str], default is Undefined, optional
        SeccompProfiles lists the allowed profiles that may be set for the pod or container's seccomp annotations.  An unset (nil) or empty value means that no profiles may be specifid by the pod or container.	The wildcard '*' may be used to allow all profiles.  When used to generate a value for a pod the first non-wildcard profile will be used as the default.
    supplementalGroups : SecurityOpenshiftIoV1SecurityContextConstraintsSupplementalGroups, default is Undefined, optional
        supplemental groups
    users : [str], default is Undefined, optional
        The users who have permissions to use this security context constraints
    volumes : [str], default is Undefined, required
        Volumes is a white list of allowed volume plugins.  FSType corresponds directly with the field names of a VolumeSource (azureFile, configMap, emptyDir).  To allow all volumes you may use "*". To allow no volumes, set to ["none"].
    """


    allowHostDirVolumePlugin: bool

    allowHostIPC: bool

    allowHostNetwork: bool

    allowHostPID: bool

    allowHostPorts: bool

    allowPrivilegeEscalation?: bool

    allowPrivilegedContainer: bool

    allowedCapabilities: [str]

    allowedFlexVolumes?: [SecurityOpenshiftIoV1SecurityContextConstraintsAllowedFlexVolumesItems0]

    allowedUnsafeSysctls?: [str]

    apiVersion: "security.openshift.io/v1" = "security.openshift.io/v1"

    defaultAddCapabilities: [str]

    defaultAllowPrivilegeEscalation?: bool

    forbiddenSysctls?: [str]

    fsGroup?: SecurityOpenshiftIoV1SecurityContextConstraintsFsGroup

    groups?: [str]

    kind: "SecurityContextConstraints" = "SecurityContextConstraints"

    metadata?: v1.ObjectMeta

    priority: int

    readOnlyRootFilesystem: bool

    requiredDropCapabilities: [str]

    runAsUser?: SecurityOpenshiftIoV1SecurityContextConstraintsRunAsUser

    seLinuxContext?: SecurityOpenshiftIoV1SecurityContextConstraintsSeLinuxContext

    seccompProfiles?: [str]

    supplementalGroups?: SecurityOpenshiftIoV1SecurityContextConstraintsSupplementalGroups

    users?: [str]

    volumes: [str]


schema SecurityOpenshiftIoV1SecurityContextConstraintsAllowedFlexVolumesItems0:
    r"""
    AllowedFlexVolume represents a single Flexvolume that is allowed to be used.

    Attributes
    ----------
    driver : str, default is Undefined, required
        Driver is the name of the Flexvolume driver.
    """


    driver: str


schema SecurityOpenshiftIoV1SecurityContextConstraintsFsGroup:
    r"""
    FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.

    Attributes
    ----------
    ranges : [SecurityOpenshiftIoV1SecurityContextConstraintsFsGroupRangesItems0], default is Undefined, optional
        Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.
    $type : str, default is Undefined, optional
        Type is the strategy that will dictate what FSGroup is used in the SecurityContext.
    """


    ranges?: [SecurityOpenshiftIoV1SecurityContextConstraintsFsGroupRangesItems0]

    $type?: str


schema SecurityOpenshiftIoV1SecurityContextConstraintsFsGroupRangesItems0:
    r"""
    IDRange provides a min/max of an allowed range of IDs. TODO: this could be reused for UIDs.

    Attributes
    ----------
    max : int, default is Undefined, optional
        Max is the end of the range, inclusive.
    min : int, default is Undefined, optional
        Min is the start of the range, inclusive.
    """


    max?: int

    min?: int


schema SecurityOpenshiftIoV1SecurityContextConstraintsRunAsUser:
    r"""
    RunAsUser is the strategy that will dictate what RunAsUser is used in the SecurityContext.

    Attributes
    ----------
    $type : str, default is Undefined, optional
        Type is the strategy that will dictate what RunAsUser is used in the SecurityContext.
    uid : int, default is Undefined, optional
        UID is the user id that containers must run as.  Required for the MustRunAs strategy if not using namespace/service account allocated uids.
    uidRangeMax : int, default is Undefined, optional
        UIDRangeMax defines the max value for a strategy that allocates by range.
    uidRangeMin : int, default is Undefined, optional
        UIDRangeMin defines the min value for a strategy that allocates by range.
    """


    $type?: str

    uid?: int

    uidRangeMax?: int

    uidRangeMin?: int


schema SecurityOpenshiftIoV1SecurityContextConstraintsSeLinuxContext:
    r"""
    SELinuxContext is the strategy that will dictate what labels will be set in the SecurityContext.

    Attributes
    ----------
    seLinuxOptions : SecurityOpenshiftIoV1SecurityContextConstraintsSeLinuxContextSeLinuxOptions, default is Undefined, optional
        se linux options
    $type : str, default is Undefined, optional
        Type is the strategy that will dictate what SELinux context is used in the SecurityContext.
    """


    seLinuxOptions?: SecurityOpenshiftIoV1SecurityContextConstraintsSeLinuxContextSeLinuxOptions

    $type?: str


schema SecurityOpenshiftIoV1SecurityContextConstraintsSeLinuxContextSeLinuxOptions:
    r"""
    seLinuxOptions required to run as; required for MustRunAs

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """


    level?: str

    role?: str

    $type?: str

    user?: str


schema SecurityOpenshiftIoV1SecurityContextConstraintsSupplementalGroups:
    r"""
    SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.

    Attributes
    ----------
    ranges : [SecurityOpenshiftIoV1SecurityContextConstraintsSupplementalGroupsRangesItems0], default is Undefined, optional
        Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.
    $type : str, default is Undefined, optional
        Type is the strategy that will dictate what supplemental groups is used in the SecurityContext.
    """


    ranges?: [SecurityOpenshiftIoV1SecurityContextConstraintsSupplementalGroupsRangesItems0]

    $type?: str


schema SecurityOpenshiftIoV1SecurityContextConstraintsSupplementalGroupsRangesItems0:
    r"""
    IDRange provides a min/max of an allowed range of IDs. TODO: this could be reused for UIDs.

    Attributes
    ----------
    max : int, default is Undefined, optional
        Max is the end of the range, inclusive.
    min : int, default is Undefined, optional
        Min is the start of the range, inclusive.
    """


    max?: int

    min?: int


