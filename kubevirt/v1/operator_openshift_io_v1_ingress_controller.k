"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema IngressController:
    r"""
    IngressController describes a managed ingress controller for the cluster. The controller can service OpenShift Route and Kubernetes Ingress resources. 
     When an IngressController is created, a new ingress controller deployment is created to allow external traffic to reach the services that expose Ingress or Route resources. Updating this resource may lead to disruption for public facing network connections as a new ingress controller revision may be rolled out. 
     https://kubernetes.io/docs/concepts/services-networking/ingress-controllers 
     Whenever possible, sensible defaults for the platform are used. See each field for more details.

    Attributes
    ----------
    apiVersion : str, default is "operator.openshift.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "IngressController", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : OperatorOpenshiftIoV1IngressControllerSpec, default is Undefined, optional
        spec
    status : OperatorOpenshiftIoV1IngressControllerStatus, default is Undefined, optional
        status
    """


    apiVersion: "operator.openshift.io/v1" = "operator.openshift.io/v1"

    kind: "IngressController" = "IngressController"

    metadata?: v1.ObjectMeta

    spec?: OperatorOpenshiftIoV1IngressControllerSpec

    status?: OperatorOpenshiftIoV1IngressControllerStatus


schema OperatorOpenshiftIoV1IngressControllerSpec:
    r"""
    spec is the specification of the desired behavior of the IngressController.

    Attributes
    ----------
    defaultCertificate : OperatorOpenshiftIoV1IngressControllerSpecDefaultCertificate, default is Undefined, optional
        default certificate
    domain : str, default is Undefined, optional
        domain is a DNS name serviced by the ingress controller and is used to configure multiple features: 
         * For the LoadBalancerService endpoint publishing strategy, domain is   used to configure DNS records. See endpointPublishingStrategy. 
         * When using a generated default certificate, the certificate will be valid   for domain and its subdomains. See defaultCertificate. 
         * The value is published to individual Route statuses so that end-users   know where to target external DNS records. 
         domain must be unique among all IngressControllers, and cannot be updated. 
         If empty, defaults to ingress.config.openshift.io/cluster .spec.domain.
    endpointPublishingStrategy : OperatorOpenshiftIoV1IngressControllerSpecEndpointPublishingStrategy, default is Undefined, optional
        endpoint publishing strategy
    namespaceSelector : OperatorOpenshiftIoV1IngressControllerSpecNamespaceSelector, default is Undefined, optional
        namespace selector
    nodePlacement : OperatorOpenshiftIoV1IngressControllerSpecNodePlacement, default is Undefined, optional
        node placement
    replicas : int, default is Undefined, optional
        replicas is the desired number of ingress controller replicas. If unset, defaults to 2.
    routeSelector : OperatorOpenshiftIoV1IngressControllerSpecRouteSelector, default is Undefined, optional
        route selector
    tlsSecurityProfile : OperatorOpenshiftIoV1IngressControllerSpecTLSSecurityProfile, default is Undefined, optional
        tls security profile
    """


    defaultCertificate?: OperatorOpenshiftIoV1IngressControllerSpecDefaultCertificate

    domain?: str

    endpointPublishingStrategy?: OperatorOpenshiftIoV1IngressControllerSpecEndpointPublishingStrategy

    namespaceSelector?: OperatorOpenshiftIoV1IngressControllerSpecNamespaceSelector

    nodePlacement?: OperatorOpenshiftIoV1IngressControllerSpecNodePlacement

    replicas?: int

    routeSelector?: OperatorOpenshiftIoV1IngressControllerSpecRouteSelector

    tlsSecurityProfile?: OperatorOpenshiftIoV1IngressControllerSpecTLSSecurityProfile


schema OperatorOpenshiftIoV1IngressControllerSpecDefaultCertificate:
    r"""
    defaultCertificate is a reference to a secret containing the default certificate served by the ingress controller. When Routes don't specify their own certificate, defaultCertificate is used. 
     The secret must contain the following keys and data: 
       tls.crt: certificate file contents   tls.key: key file contents 
     If unset, a wildcard certificate is automatically generated and used. The certificate is valid for the ingress controller domain (and subdomains) and the generated certificate's CA will be automatically integrated with the cluster's trust store. 
     The in-use certificate (whether generated or user-specified) will be automatically integrated with OpenShift's built-in OAuth server.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
    """


    name?: str


schema OperatorOpenshiftIoV1IngressControllerSpecEndpointPublishingStrategy:
    r"""
    endpointPublishingStrategy is used to publish the ingress controller endpoints to other networks, enable load balancer integrations, etc. 
     If unset, the default is based on infrastructure.config.openshift.io/cluster .status.platform: 
       AWS:      LoadBalancerService (with External scope)   Azure:    LoadBalancerService (with External scope)   GCP:      LoadBalancerService (with External scope)   Libvirt:  HostNetwork 
     Any other platform types (including None) default to HostNetwork. 
     endpointPublishingStrategy cannot be updated.

    Attributes
    ----------
    hostNetwork : any, default is Undefined, optional
        hostNetwork holds parameters for the HostNetwork endpoint publishing strategy. Present only if type is HostNetwork.
    loadBalancer : OperatorOpenshiftIoV1IngressControllerSpecEndpointPublishingStrategyLoadBalancer, default is Undefined, optional
        load balancer
    private : any, default is Undefined, optional
        private holds parameters for the Private endpoint publishing strategy. Present only if type is Private.
    $type : str, default is Undefined, required
        type is the publishing strategy to use. Valid values are: 
         * LoadBalancerService 
         Publishes the ingress controller using a Kubernetes LoadBalancer Service. 
         In this configuration, the ingress controller deployment uses container networking. A LoadBalancer Service is created to publish the deployment. 
         See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer 
         If domain is set, a wildcard DNS record will be managed to point at the LoadBalancer Service's external name. DNS records are managed only in DNS zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone. 
         Wildcard DNS management is currently supported only on the AWS, Azure, and GCP platforms. 
         * HostNetwork 
         Publishes the ingress controller on node ports where the ingress controller is deployed. 
         In this configuration, the ingress controller deployment uses host networking, bound to node ports 80 and 443. The user is responsible for configuring an external load balancer to publish the ingress controller via the node ports. 
         * Private 
         Does not publish the ingress controller. 
         In this configuration, the ingress controller deployment uses container networking, and is not explicitly published. The user must manually publish the ingress controller.
    """


    hostNetwork?: any

    loadBalancer?: OperatorOpenshiftIoV1IngressControllerSpecEndpointPublishingStrategyLoadBalancer

    private?: any

    $type: str


schema OperatorOpenshiftIoV1IngressControllerSpecEndpointPublishingStrategyLoadBalancer:
    r"""
    loadBalancer holds parameters for the load balancer. Present only if type is LoadBalancerService.

    Attributes
    ----------
    scope : str, default is Undefined, required
        scope indicates the scope at which the load balancer is exposed. Possible values are "External" and "Internal".
    """


    scope: str


schema OperatorOpenshiftIoV1IngressControllerSpecNamespaceSelector:
    r"""
    namespaceSelector is used to filter the set of namespaces serviced by the ingress controller. This is useful for implementing shards. 
     If unset, the default is no filtering.

    Attributes
    ----------
    matchExpressions : [OperatorOpenshiftIoV1IngressControllerSpecNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorOpenshiftIoV1IngressControllerSpecNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorOpenshiftIoV1IngressControllerSpecNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorOpenshiftIoV1IngressControllerSpecNodePlacement:
    r"""
    nodePlacement enables explicit control over the scheduling of the ingress controller. 
     If unset, defaults are used. See NodePlacement for more details.

    Attributes
    ----------
    nodeSelector : OperatorOpenshiftIoV1IngressControllerSpecNodePlacementNodeSelector, default is Undefined, optional
        node selector
    tolerations : [OperatorOpenshiftIoV1IngressControllerSpecNodePlacementTolerationsItems0], default is Undefined, optional
        tolerations is a list of tolerations applied to ingress controller deployments. 
         The default is an empty list. 
         See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    """


    nodeSelector?: OperatorOpenshiftIoV1IngressControllerSpecNodePlacementNodeSelector

    tolerations?: [OperatorOpenshiftIoV1IngressControllerSpecNodePlacementTolerationsItems0]


schema OperatorOpenshiftIoV1IngressControllerSpecNodePlacementNodeSelector:
    r"""
    nodeSelector is the node selector applied to ingress controller deployments. 
     If unset, the default is: 
       beta.kubernetes.io/os: linux   node-role.kubernetes.io/worker: '' 
     If set, the specified selector is used and replaces the default.

    Attributes
    ----------
    matchExpressions : [OperatorOpenshiftIoV1IngressControllerSpecNodePlacementNodeSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorOpenshiftIoV1IngressControllerSpecNodePlacementNodeSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorOpenshiftIoV1IngressControllerSpecNodePlacementNodeSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorOpenshiftIoV1IngressControllerSpecNodePlacementTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema OperatorOpenshiftIoV1IngressControllerSpecRouteSelector:
    r"""
    routeSelector is used to filter the set of Routes serviced by the ingress controller. This is useful for implementing shards. 
     If unset, the default is no filtering.

    Attributes
    ----------
    matchExpressions : [OperatorOpenshiftIoV1IngressControllerSpecRouteSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [OperatorOpenshiftIoV1IngressControllerSpecRouteSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema OperatorOpenshiftIoV1IngressControllerSpecRouteSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema OperatorOpenshiftIoV1IngressControllerSpecTLSSecurityProfile:
    r"""
    tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers. 
     If unset, the default is based on the apiservers.config.openshift.io/cluster resource. 
     Note that when using the Old, Intermediate, and Modern profile types, the effective profile configuration is subject to change between releases. For example, given a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade to release X.Y.Z+1 may cause a new profile configuration to be applied to the ingress controller, resulting in a rollout. 
     Note that the minimum TLS version for ingress controllers is 1.1, and the maximum TLS version is 1.2.  An implication of this restriction is that the Modern TLS profile type cannot be used because it requires TLS 1.3.

    Attributes
    ----------
    custom : OperatorOpenshiftIoV1IngressControllerSpecTLSSecurityProfileCustom, default is Undefined, optional
        custom
    intermediate : any, default is Undefined, optional
        intermediate is a TLS security profile based on: 
         https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29 
         and looks like this (yaml): 
           ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384   minTLSVersion: TLSv1.2
    modern : any, default is Undefined, optional
        modern is a TLS security profile based on: 
         https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility 
         and looks like this (yaml): 
           ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256   minTLSVersion: TLSv1.3 
         NOTE: Currently unsupported.
    old : any, default is Undefined, optional
        old is a TLS security profile based on: 
         https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility 
         and looks like this (yaml): 
           ciphers:     - TLS_AES_128_GCM_SHA256     - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384     - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256     - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA     - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384     - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA     - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     - DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384     - AES128-SHA256     - AES256-SHA256     - AES128-SHA     - AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0
    $type : str, default is Undefined, optional
        type is one of Old, Intermediate, Modern or Custom. Custom provides the ability to specify individual TLS security profile parameters. Old, Intermediate and Modern are TLS security profiles based on: 
         https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations 
         The profiles are intent based, so they may change over time as new ciphers are developed and existing ciphers are found to be insecure.  Depending on precisely which ciphers are available to a process, the list may be reduced. 
         Note that the Modern profile is currently not supported because it is not yet well adopted by common software libraries.
    """


    custom?: OperatorOpenshiftIoV1IngressControllerSpecTLSSecurityProfileCustom

    intermediate?: any

    modern?: any

    old?: any

    $type?: str


schema OperatorOpenshiftIoV1IngressControllerSpecTLSSecurityProfileCustom:
    r"""
    custom is a user-defined TLS security profile. Be extremely careful using a custom profile as invalid configurations can be catastrophic. An example custom profile looks like this: 
       ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305     - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256   minTLSVersion: TLSv1.1

    Attributes
    ----------
    ciphers : [str], default is Undefined, optional
        ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml): 
           ciphers:     - DES-CBC3-SHA
    minTLSVersion : str, default is Undefined, optional
        minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml): 
           minTLSVersion: TLSv1.1 
         NOTE: currently the highest minTLSVersion allowed is VersionTLS12
    """


    ciphers?: [str]

    minTLSVersion?: str


schema OperatorOpenshiftIoV1IngressControllerStatus:
    r"""
    status is the most recently observed status of the IngressController.

    Attributes
    ----------
    availableReplicas : int, default is Undefined, optional
        availableReplicas is number of observed available replicas according to the ingress controller deployment.
    conditions : [OperatorOpenshiftIoV1IngressControllerStatusConditionsItems0], default is Undefined, optional
        conditions is a list of conditions and their status. 
         Available means the ingress controller deployment is available and servicing route and ingress resources (i.e, .status.availableReplicas equals .spec.replicas) 
         There are additional conditions which indicate the status of other ingress controller features and capabilities. 
           * LoadBalancerManaged   - True if the following conditions are met:     * The endpoint publishing strategy requires a service load balancer.   - False if any of those conditions are unsatisfied. 
           * LoadBalancerReady   - True if the following conditions are met:     * A load balancer is managed.     * The load balancer is ready.   - False if any of those conditions are unsatisfied. 
           * DNSManaged   - True if the following conditions are met:     * The endpoint publishing strategy and platform support DNS.     * The ingress controller domain is set.     * dns.config.openshift.io/cluster configures DNS zones.   - False if any of those conditions are unsatisfied. 
           * DNSReady   - True if the following conditions are met:     * DNS is managed.     * DNS records have been successfully created.   - False if any of those conditions are unsatisfied.
    domain : str, default is Undefined, optional
        domain is the actual domain in use.
    endpointPublishingStrategy : OperatorOpenshiftIoV1IngressControllerStatusEndpointPublishingStrategy, default is Undefined, optional
        endpoint publishing strategy
    observedGeneration : int, default is Undefined, optional
        observedGeneration is the most recent generation observed.
    selector : str, default is Undefined, optional
        selector is a label selector, in string format, for ingress controller pods corresponding to the IngressController. The number of matching pods should equal the value of availableReplicas.
    tlsProfile : OperatorOpenshiftIoV1IngressControllerStatusTLSProfile, default is Undefined, optional
        tls profile
    """


    availableReplicas?: int

    conditions?: [OperatorOpenshiftIoV1IngressControllerStatusConditionsItems0]

    domain?: str

    endpointPublishingStrategy?: OperatorOpenshiftIoV1IngressControllerStatusEndpointPublishingStrategy

    observedGeneration?: int

    selector?: str

    tlsProfile?: OperatorOpenshiftIoV1IngressControllerStatusTLSProfile


schema OperatorOpenshiftIoV1IngressControllerStatusConditionsItems0:
    r"""
    OperatorCondition is just the standard condition fields.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        last transition time
    message : str, default is Undefined, optional
        message
    reason : str, default is Undefined, optional
        reason
    status : str, default is Undefined, optional
        status
    $type : str, default is Undefined, optional
        type
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status?: str

    $type?: str


schema OperatorOpenshiftIoV1IngressControllerStatusEndpointPublishingStrategy:
    r"""
    endpointPublishingStrategy is the actual strategy in use.

    Attributes
    ----------
    hostNetwork : any, default is Undefined, optional
        hostNetwork holds parameters for the HostNetwork endpoint publishing strategy. Present only if type is HostNetwork.
    loadBalancer : OperatorOpenshiftIoV1IngressControllerStatusEndpointPublishingStrategyLoadBalancer, default is Undefined, optional
        load balancer
    private : any, default is Undefined, optional
        private holds parameters for the Private endpoint publishing strategy. Present only if type is Private.
    $type : str, default is Undefined, required
        type is the publishing strategy to use. Valid values are: 
         * LoadBalancerService 
         Publishes the ingress controller using a Kubernetes LoadBalancer Service. 
         In this configuration, the ingress controller deployment uses container networking. A LoadBalancer Service is created to publish the deployment. 
         See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer 
         If domain is set, a wildcard DNS record will be managed to point at the LoadBalancer Service's external name. DNS records are managed only in DNS zones defined by dns.config.openshift.io/cluster .spec.publicZone and .spec.privateZone. 
         Wildcard DNS management is currently supported only on the AWS, Azure, and GCP platforms. 
         * HostNetwork 
         Publishes the ingress controller on node ports where the ingress controller is deployed. 
         In this configuration, the ingress controller deployment uses host networking, bound to node ports 80 and 443. The user is responsible for configuring an external load balancer to publish the ingress controller via the node ports. 
         * Private 
         Does not publish the ingress controller. 
         In this configuration, the ingress controller deployment uses container networking, and is not explicitly published. The user must manually publish the ingress controller.
    """


    hostNetwork?: any

    loadBalancer?: OperatorOpenshiftIoV1IngressControllerStatusEndpointPublishingStrategyLoadBalancer

    private?: any

    $type: str


schema OperatorOpenshiftIoV1IngressControllerStatusEndpointPublishingStrategyLoadBalancer:
    r"""
    loadBalancer holds parameters for the load balancer. Present only if type is LoadBalancerService.

    Attributes
    ----------
    scope : str, default is Undefined, required
        scope indicates the scope at which the load balancer is exposed. Possible values are "External" and "Internal".
    """


    scope: str


schema OperatorOpenshiftIoV1IngressControllerStatusTLSProfile:
    r"""
    tlsProfile is the TLS connection configuration that is in effect.

    Attributes
    ----------
    ciphers : [str], default is Undefined, optional
        ciphers is used to specify the cipher algorithms that are negotiated during the TLS handshake.  Operators may remove entries their operands do not support.  For example, to use DES-CBC3-SHA  (yaml): 
           ciphers:     - DES-CBC3-SHA
    minTLSVersion : str, default is Undefined, optional
        minTLSVersion is used to specify the minimal version of the TLS protocol that is negotiated during the TLS handshake. For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml): 
           minTLSVersion: TLSv1.1 
         NOTE: currently the highest minTLSVersion allowed is VersionTLS12
    """


    ciphers?: [str]

    minTLSVersion?: str


