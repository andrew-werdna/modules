apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: apiservers.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: APIServer
    listKind: APIServerList
    plural: apiservers
    singular: apiserver
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: APIServer holds configuration (like serving certificates, client
          CA and CORS domains) shared by all API servers in the system, among them
          especially kube-apiserver and openshift-apiserver. The canonical name of
          an instance is 'cluster'.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              additionalCORSAllowedOrigins:
                description: additionalCORSAllowedOrigins lists additional, user-defined
                  regular expressions describing hosts for which the API server allows
                  access using the CORS headers. This may be needed to access the
                  API and the integrated OAuth server from JavaScript applications.
                  The values are regular expressions that correspond to the Golang
                  regular expression language.
                items:
                  type: string
                type: array
              clientCA:
                description: 'clientCA references a ConfigMap containing a certificate
                  bundle for the signers that will be recognized for incoming client
                  certificates in addition to the operator managed signers. If this
                  is empty, then only operator managed signers are valid. You usually
                  only have to set this if you have your own PKI you wish to honor
                  client certificates from. The ConfigMap must exist in the openshift-config
                  namespace and contain the following required fields: - ConfigMap.Data["ca-bundle.crt"]
                  - CA bundle.'
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
              encryption:
                description: encryption allows the configuration of encryption of
                  resources at the datastore layer.
                properties:
                  type:
                    description: "type defines what encryption type should be used
                      to encrypt resources at the datastore layer. When this field
                      is unset (i.e. when it is set to the empty string), identity
                      is implied. The behavior of unset can and will change over time.
                      \ Even if encryption is enabled by default, the meaning of unset
                      may change to a different encryption type based on changes in
                      best practices. \n When encryption is enabled, all sensitive
                      resources shipped with the platform are encrypted. This list
                      of sensitive resources can and will change over time.  The current
                      authoritative list is: \n   1. secrets   2. configmaps   3.
                      routes.route.openshift.io   4. oauthaccesstokens.oauth.openshift.io
                      \  5. oauthauthorizetokens.oauth.openshift.io"
                    enum:
                    - ""
                    - identity
                    - aescbc
                    type: string
                type: object
              servingCerts:
                description: servingCert is the TLS cert info for serving secure traffic.
                  If not specified, operator managed certificates will be used for
                  serving secure traffic.
                properties:
                  namedCertificates:
                    description: namedCertificates references secrets containing the
                      TLS cert info for serving secure traffic to specific hostnames.
                      If no named certificates are provided, or no named certificates
                      match the server name as understood by a client, the defaultServingCertificate
                      will be used.
                    items:
                      description: APIServerNamedServingCert maps a server DNS name,
                        as understood by a client, to a certificate.
                      properties:
                        names:
                          description: names is a optional list of explicit DNS names
                            (leading wildcards allowed) that should use this certificate
                            to serve secure traffic. If no names are provided, the
                            implicit names will be extracted from the certificates.
                            Exact names trump over wildcard names. Explicit names
                            defined here trump over extracted implicit names.
                          items:
                            type: string
                          type: array
                        servingCertificate:
                          description: 'servingCertificate references a kubernetes.io/tls
                            type secret containing the TLS cert info for serving secure
                            traffic. The secret must exist in the openshift-config
                            namespace and contain the following required fields: -
                            Secret.Data["tls.key"] - TLS private key. - Secret.Data["tls.crt"]
                            - TLS certificate.'
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                      type: object
                    type: array
                type: object
              tlsSecurityProfile:
                description: "tlsSecurityProfile specifies settings for TLS connections
                  for externally exposed servers. \n If unset, a default (which may
                  change between releases) is chosen. Note that only Old and Intermediate
                  profiles are currently supported, and the maximum available MinTLSVersions
                  is VersionTLS12."
                properties:
                  custom:
                    description: "custom is a user-defined TLS security profile. Be
                      extremely careful using a custom profile as invalid configurations
                      can be catastrophic. An example custom profile looks like this:
                      \n   ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305
                      \    - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256
                      \  minTLSVersion: TLSv1.1"
                    nullable: true
                    properties:
                      ciphers:
                        description: "ciphers is used to specify the cipher algorithms
                          that are negotiated during the TLS handshake.  Operators
                          may remove entries their operands do not support.  For example,
                          to use DES-CBC3-SHA  (yaml): \n   ciphers:     - DES-CBC3-SHA"
                        items:
                          type: string
                        type: array
                      minTLSVersion:
                        description: "minTLSVersion is used to specify the minimal
                          version of the TLS protocol that is negotiated during the
                          TLS handshake. For example, to use TLS versions 1.1, 1.2
                          and 1.3 (yaml): \n   minTLSVersion: TLSv1.1 \n NOTE: currently
                          the highest minTLSVersion allowed is VersionTLS12"
                        type: string
                    type: object
                  intermediate:
                    description: "intermediate is a TLS security profile based on:
                      \n https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29
                      \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256
                      \    - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256
                      \    - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256
                      \    - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384
                      \    - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305
                      \    - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384
                      \  minTLSVersion: TLSv1.2"
                    nullable: true
                    type: object
                  modern:
                    description: "modern is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility
                      \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256
                      \    - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256
                      \  minTLSVersion: TLSv1.3 \n NOTE: Currently unsupported."
                    nullable: true
                    type: object
                  old:
                    description: "old is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility
                      \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256
                      \    - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256
                      \    - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256
                      \    - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384
                      \    - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305
                      \    - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384
                      \    - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256
                      \    - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA
                      \    - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384
                      \    - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA
                      \    - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     -
                      DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384
                      \    - AES128-SHA256     - AES256-SHA256     - AES128-SHA     -
                      AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0"
                    nullable: true
                    type: object
                  type:
                    description: "type is one of Old, Intermediate, Modern or Custom.
                      Custom provides the ability to specify individual TLS security
                      profile parameters. Old, Intermediate and Modern are TLS security
                      profiles based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations
                      \n The profiles are intent based, so they may change over time
                      as new ciphers are developed and existing ciphers are found
                      to be insecure.  Depending on precisely which ciphers are available
                      to a process, the list may be reduced. \n Note that the Modern
                      profile is currently not supported because it is not yet well
                      adopted by common software libraries."
                    type: string
                type: object
            type: object
          status:
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: authentications.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Authentication
    listKind: AuthenticationList
    plural: authentications
    singular: authentication
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Authentication specifies cluster-wide settings for authentication
          (like OAuth and webhook token authenticators). The canonical name of an
          instance is `cluster`.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              oauthMetadata:
                description: 'oauthMetadata contains the discovery endpoint data for
                  OAuth 2.0 Authorization Server Metadata for an external OAuth server.
                  This discovery document can be viewed from its served location:
                  oc get --raw ''/.well-known/oauth-authorization-server'' For further
                  details, see the IETF Draft: https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2
                  If oauthMetadata.name is non-empty, this value has precedence over
                  any metadata reference stored in status. The key "oauthMetadata"
                  is used to locate the data. If specified and the config map or expected
                  key is not found, no metadata is served. If the specified metadata
                  is not valid, no metadata is served. The namespace for this config
                  map is openshift-config.'
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
              type:
                description: type identifies the cluster managed, user facing authentication
                  mode in use. Specifically, it manages the component that responds
                  to login attempts. The default is IntegratedOAuth.
                type: string
              webhookTokenAuthenticators:
                description: webhookTokenAuthenticators configures remote token reviewers.
                  These remote authentication webhooks can be used to verify bearer
                  tokens via the tokenreviews.authentication.k8s.io REST API.  This
                  is required to honor bearer tokens that are provisioned by an external
                  authentication service. The namespace for these secrets is openshift-config.
                items:
                  description: webhookTokenAuthenticator holds the necessary configuration
                    options for a remote token authenticator
                  properties:
                    kubeConfig:
                      description: 'kubeConfig contains kube config file data which
                        describes how to access the remote webhook service. For further
                        details, see: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication
                        The key "kubeConfig" is used to locate the data. If the secret
                        or expected key is not found, the webhook is not honored.
                        If the specified kube config data is not valid, the webhook
                        is not honored. The namespace for this secret is determined
                        by the point of use.'
                      properties:
                        name:
                          description: name is the metadata.name of the referenced
                            secret
                          type: string
                      required:
                      - name
                      type: object
                  type: object
                type: array
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              integratedOAuthMetadata:
                description: 'integratedOAuthMetadata contains the discovery endpoint
                  data for OAuth 2.0 Authorization Server Metadata for the in-cluster
                  integrated OAuth server. This discovery document can be viewed from
                  its served location: oc get --raw ''/.well-known/oauth-authorization-server''
                  For further details, see the IETF Draft: https://tools.ietf.org/html/draft-ietf-oauth-discovery-04#section-2
                  This contains the observed value based on cluster state. An explicitly
                  set value in spec.oauthMetadata has precedence over this field.
                  This field has no meaning if authentication spec.type is not set
                  to IntegratedOAuth. The key "oauthMetadata" is used to locate the
                  data. If the config map or expected key is not found, no metadata
                  is served. If the specified metadata is not valid, no metadata is
                  served. The namespace for this config map is openshift-config-managed.'
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: builds.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Build
    listKind: BuildList
    plural: builds
    singular: build
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: "Build configures the behavior of OpenShift builds for the entire
          cluster. This includes default settings that can be overridden in BuildConfig
          objects, and overrides which are applied to all builds. \n The canonical
          name is \"cluster\""
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec holds user-settable values for the build controller
              configuration
            properties:
              additionalTrustedCA:
                description: "AdditionalTrustedCA is a reference to a ConfigMap containing
                  additional CAs that should be trusted for image pushes and pulls
                  during builds. The namespace for this config map is openshift-config.
                  \n DEPRECATED: Additional CAs for image pull and push should be
                  set on image.config.openshift.io/cluster instead."
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
              buildDefaults:
                description: BuildDefaults controls the default information for Builds
                properties:
                  defaultProxy:
                    description: "DefaultProxy contains the default proxy settings
                      for all build operations, including image pull/push and source
                      download. \n Values can be overrode by setting the `HTTP_PROXY`,
                      `HTTPS_PROXY`, and `NO_PROXY` environment variables in the build
                      config's strategy."
                    properties:
                      httpProxy:
                        description: httpProxy is the URL of the proxy for HTTP requests.  Empty
                          means unset and will not result in an env var.
                        type: string
                      httpsProxy:
                        description: httpsProxy is the URL of the proxy for HTTPS
                          requests.  Empty means unset and will not result in an env
                          var.
                        type: string
                      noProxy:
                        description: noProxy is a comma-separated list of hostnames
                          and/or CIDRs for which the proxy should not be used. Empty
                          means unset and will not result in an env var.
                        type: string
                      readinessEndpoints:
                        description: readinessEndpoints is a list of endpoints used
                          to verify readiness of the proxy.
                        items:
                          type: string
                        type: array
                      trustedCA:
                        description: "trustedCA is a reference to a ConfigMap containing
                          a CA certificate bundle used for client egress HTTPS connections.
                          The certificate bundle must be from the CA that signed the
                          proxy's certificate and be signed for everything. The trustedCA
                          field should only be consumed by a proxy validator. The
                          validator is responsible for reading the certificate bundle
                          from required key \"ca-bundle.crt\" and copying it to a
                          ConfigMap named \"trusted-ca-bundle\" in the \"openshift-config-managed\"
                          namespace. The namespace for the ConfigMap referenced by
                          trustedCA is \"openshift-config\". Here is an example ConfigMap
                          (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name:
                          user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt:
                          |      -----BEGIN CERTIFICATE-----      Custom CA certificate
                          bundle.      -----END CERTIFICATE-----"
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                    type: object
                  env:
                    description: Env is a set of default environment variables that
                      will be applied to the build if the specified variables do not
                      exist on the build
                    items:
                      description: EnvVar represents an environment variable present
                        in a Container.
                      properties:
                        name:
                          description: Name of the environment variable. Must be a
                            C_IDENTIFIER.
                          type: string
                        value:
                          description: 'Variable references $(VAR_NAME) are expanded
                            using the previous defined environment variables in the
                            container and any service environment variables. If a
                            variable cannot be resolved, the reference in the input
                            string will be unchanged. The $(VAR_NAME) syntax can be
                            escaped with a double $$, ie: $$(VAR_NAME). Escaped references
                            will never be expanded, regardless of whether the variable
                            exists or not. Defaults to "".'
                          type: string
                        valueFrom:
                          description: Source for the environment variable's value.
                            Cannot be used if value is not empty.
                          properties:
                            configMapKeyRef:
                              description: Selects a key of a ConfigMap.
                              properties:
                                key:
                                  description: The key to select.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the ConfigMap or its
                                    key must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                            fieldRef:
                              description: 'Selects a field of the pod: supports metadata.name,
                                metadata.namespace, metadata.labels, metadata.annotations,
                                spec.nodeName, spec.serviceAccountName, status.hostIP,
                                status.podIP.'
                              properties:
                                apiVersion:
                                  description: Version of the schema the FieldPath
                                    is written in terms of, defaults to "v1".
                                  type: string
                                fieldPath:
                                  description: Path of the field to select in the
                                    specified API version.
                                  type: string
                              required:
                              - fieldPath
                              type: object
                            resourceFieldRef:
                              description: 'Selects a resource of the container: only
                                resources limits and requests (limits.cpu, limits.memory,
                                limits.ephemeral-storage, requests.cpu, requests.memory
                                and requests.ephemeral-storage) are currently supported.'
                              properties:
                                containerName:
                                  description: 'Container name: required for volumes,
                                    optional for env vars'
                                  type: string
                                divisor:
                                  description: Specifies the output format of the
                                    exposed resources, defaults to "1"
                                  type: string
                                resource:
                                  description: 'Required: resource to select'
                                  type: string
                              required:
                              - resource
                              type: object
                            secretKeyRef:
                              description: Selects a key of a secret in the pod's
                                namespace
                              properties:
                                key:
                                  description: The key of the secret to select from.  Must
                                    be a valid secret key.
                                  type: string
                                name:
                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                    TODO: Add other useful fields. apiVersion, kind,
                                    uid?'
                                  type: string
                                optional:
                                  description: Specify whether the Secret or its key
                                    must be defined
                                  type: boolean
                              required:
                              - key
                              type: object
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                  gitProxy:
                    description: "GitProxy contains the proxy settings for git operations
                      only. If set, this will override any Proxy settings for all
                      git commands, such as git clone. \n Values that are not set
                      here will be inherited from DefaultProxy."
                    properties:
                      httpProxy:
                        description: httpProxy is the URL of the proxy for HTTP requests.  Empty
                          means unset and will not result in an env var.
                        type: string
                      httpsProxy:
                        description: httpsProxy is the URL of the proxy for HTTPS
                          requests.  Empty means unset and will not result in an env
                          var.
                        type: string
                      noProxy:
                        description: noProxy is a comma-separated list of hostnames
                          and/or CIDRs for which the proxy should not be used. Empty
                          means unset and will not result in an env var.
                        type: string
                      readinessEndpoints:
                        description: readinessEndpoints is a list of endpoints used
                          to verify readiness of the proxy.
                        items:
                          type: string
                        type: array
                      trustedCA:
                        description: "trustedCA is a reference to a ConfigMap containing
                          a CA certificate bundle used for client egress HTTPS connections.
                          The certificate bundle must be from the CA that signed the
                          proxy's certificate and be signed for everything. The trustedCA
                          field should only be consumed by a proxy validator. The
                          validator is responsible for reading the certificate bundle
                          from required key \"ca-bundle.crt\" and copying it to a
                          ConfigMap named \"trusted-ca-bundle\" in the \"openshift-config-managed\"
                          namespace. The namespace for the ConfigMap referenced by
                          trustedCA is \"openshift-config\". Here is an example ConfigMap
                          (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:  name:
                          user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt:
                          |      -----BEGIN CERTIFICATE-----      Custom CA certificate
                          bundle.      -----END CERTIFICATE-----"
                        properties:
                          name:
                            description: name is the metadata.name of the referenced
                              config map
                            type: string
                        required:
                        - name
                        type: object
                    type: object
                  imageLabels:
                    description: ImageLabels is a list of docker labels that are applied
                      to the resulting image. User can override a default label by
                      providing a label with the same name in their Build/BuildConfig.
                    items:
                      properties:
                        name:
                          description: Name defines the name of the label. It must
                            have non-zero length.
                          type: string
                        value:
                          description: Value defines the literal value of the label.
                          type: string
                      type: object
                    type: array
                  resources:
                    description: Resources defines resource requirements to execute
                      the build.
                    properties:
                      limits:
                        additionalProperties:
                          type: string
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                        type: object
                      requests:
                        additionalProperties:
                          type: string
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                        type: object
                    type: object
                type: object
              buildOverrides:
                description: BuildOverrides controls override settings for builds
                properties:
                  imageLabels:
                    description: ImageLabels is a list of docker labels that are applied
                      to the resulting image. If user provided a label in their Build/BuildConfig
                      with the same name as one in this list, the user's label will
                      be overwritten.
                    items:
                      properties:
                        name:
                          description: Name defines the name of the label. It must
                            have non-zero length.
                          type: string
                        value:
                          description: Value defines the literal value of the label.
                          type: string
                      type: object
                    type: array
                  nodeSelector:
                    additionalProperties:
                      type: string
                    description: NodeSelector is a selector which must be true for
                      the build pod to fit on a node
                    type: object
                  tolerations:
                    description: Tolerations is a list of Tolerations that will override
                      any existing tolerations set on a build pod.
                    items:
                      description: The pod this Toleration is attached to tolerates
                        any taint that matches the triple <key,value,effect> using
                        the matching operator <operator>.
                      properties:
                        effect:
                          description: Effect indicates the taint effect to match.
                            Empty means match all taint effects. When specified, allowed
                            values are NoSchedule, PreferNoSchedule and NoExecute.
                          type: string
                        key:
                          description: Key is the taint key that the toleration applies
                            to. Empty means match all taint keys. If the key is empty,
                            operator must be Exists; this combination means to match
                            all values and all keys.
                          type: string
                        operator:
                          description: Operator represents a key's relationship to
                            the value. Valid operators are Exists and Equal. Defaults
                            to Equal. Exists is equivalent to wildcard for value,
                            so that a pod can tolerate all taints of a particular
                            category.
                          type: string
                        tolerationSeconds:
                          description: TolerationSeconds represents the period of
                            time the toleration (which must be of effect NoExecute,
                            otherwise this field is ignored) tolerates the taint.
                            By default, it is not set, which means tolerate the taint
                            forever (do not evict). Zero and negative values will
                            be treated as 0 (evict immediately) by the system.
                          format: int64
                          type: integer
                        value:
                          description: Value is the taint value the toleration matches
                            to. If the operator is Exists, the value should be empty,
                            otherwise just a regular string.
                          type: string
                      type: object
                    type: array
                type: object
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: consoles.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Console
    listKind: ConsoleList
    plural: consoles
    singular: console
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Console holds cluster-wide configuration for the web console,
          including the logout URL, and reports the public URL of the console. The
          canonical name is `cluster`.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              authentication:
                description: ConsoleAuthentication defines a list of optional configuration
                  for console authentication.
                properties:
                  logoutRedirect:
                    description: 'An optional, absolute URL to redirect web browsers
                      to after logging out of the console. If not specified, it will
                      redirect to the default login page. This is required when using
                      an identity provider that supports single sign-on (SSO) such
                      as: - OpenID (Keycloak, Azure) - RequestHeader (GSSAPI, SSPI,
                      SAML) - OAuth (GitHub, GitLab, Google) Logging out of the console
                      will destroy the user''s token. The logoutRedirect provides
                      the user the option to perform single logout (SLO) through the
                      identity provider to destroy their single sign-on session.'
                    pattern: ^$|^((https):\/\/?)[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|\/?))$
                    type: string
                type: object
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              consoleURL:
                description: The URL for the console. This will be derived from the
                  host for the route that is created for the console.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: dnses.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: DNS
    listKind: DNSList
    plural: dnses
    singular: dns
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: DNS holds cluster-wide information about DNS. The canonical name
          is `cluster`
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              baseDomain:
                description: "baseDomain is the base domain of the cluster. All managed
                  DNS records will be sub-domains of this base. \n For example, given
                  the base domain `openshift.example.com`, an API server DNS record
                  may be created for `cluster-api.openshift.example.com`. \n Once
                  set, this field cannot be changed."
                type: string
              privateZone:
                description: "privateZone is the location where all the DNS records
                  that are only available internally to the cluster exist. \n If this
                  field is nil, no private records should be created. \n Once set,
                  this field cannot be changed."
                properties:
                  id:
                    description: "id is the identifier that can be used to find the
                      DNS hosted zone. \n on AWS zone can be fetched using `ID` as
                      id in [1] on Azure zone can be fetched using `ID` as a pre-determined
                      name in [2], on GCP zone can be fetched using `ID` as a pre-determined
                      name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options
                      [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show
                      [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get"
                    type: string
                  tags:
                    additionalProperties:
                      type: string
                    description: "tags can be used to query the DNS hosted zone. \n
                      on AWS, resourcegroupstaggingapi [1] can be used to fetch a
                      zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options"
                    type: object
                type: object
              publicZone:
                description: "publicZone is the location where all the DNS records
                  that are publicly accessible to the internet exist. \n If this field
                  is nil, no public records should be created. \n Once set, this field
                  cannot be changed."
                properties:
                  id:
                    description: "id is the identifier that can be used to find the
                      DNS hosted zone. \n on AWS zone can be fetched using `ID` as
                      id in [1] on Azure zone can be fetched using `ID` as a pre-determined
                      name in [2], on GCP zone can be fetched using `ID` as a pre-determined
                      name in [3]. \n [1]: https://docs.aws.amazon.com/cli/latest/reference/route53/get-hosted-zone.html#options
                      [2]: https://docs.microsoft.com/en-us/cli/azure/network/dns/zone?view=azure-cli-latest#az-network-dns-zone-show
                      [3]: https://cloud.google.com/dns/docs/reference/v1/managedZones/get"
                    type: string
                  tags:
                    additionalProperties:
                      type: string
                    description: "tags can be used to query the DNS hosted zone. \n
                      on AWS, resourcegroupstaggingapi [1] can be used to fetch a
                      zone using `Tags` as tag-filters, \n [1]: https://docs.aws.amazon.com/cli/latest/reference/resourcegroupstaggingapi/get-resources.html#options"
                    type: object
                type: object
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: featuregates.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: FeatureGate
    listKind: FeatureGateList
    plural: featuregates
    singular: featuregate
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Feature holds cluster-wide information about feature gates.  The
          canonical name is `cluster`
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              customNoUpgrade:
                description: customNoUpgrade allows the enabling or disabling of any
                  feature. Turning this feature set on IS NOT SUPPORTED, CANNOT BE
                  UNDONE, and PREVENTS UPGRADES. Because of its nature, this setting
                  cannot be validated.  If you have any typos or accidentally apply
                  invalid combinations your cluster may fail in an unrecoverable way.  featureSet
                  must equal "CustomNoUpgrade" must be set to use this field.
                nullable: true
                properties:
                  disabled:
                    description: disabled is a list of all feature gates that you
                      want to force off
                    items:
                      type: string
                    type: array
                  enabled:
                    description: enabled is a list of all feature gates that you want
                      to force on
                    items:
                      type: string
                    type: array
                type: object
              featureSet:
                description: featureSet changes the list of features in the cluster.  The
                  default is empty.  Be very careful adjusting this setting. Turning
                  on or off features may cause irreversible changes in your cluster
                  which cannot be undone.
                type: string
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: images.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Image
    listKind: ImageList
    plural: images
    singular: image
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Image governs policies related to imagestream imports and runtime
          configuration for external registries. It allows cluster admins to configure
          which registries OpenShift is allowed to import images from, extra CA trust
          bundles for external registries, and policies to blacklist/whitelist registry
          hostnames. When exposing OpenShift's image registry to the public, this
          also lets cluster admins specify the external hostname.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              additionalTrustedCA:
                description: additionalTrustedCA is a reference to a ConfigMap containing
                  additional CAs that should be trusted during imagestream import,
                  pod image pull, build image pull, and imageregistry pullthrough.
                  The namespace for this config map is openshift-config.
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
              allowedRegistriesForImport:
                description: allowedRegistriesForImport limits the container image
                  registries that normal users may import images from. Set this list
                  to the registries that you trust to contain valid Docker images
                  and that you want applications to be able to import from. Users
                  with permission to create Images or ImageStreamMappings via the
                  API are not affected by this policy - typically only administrators
                  or system integrations will have those permissions.
                items:
                  description: RegistryLocation contains a location of the registry
                    specified by the registry domain name. The domain name might include
                    wildcards, like '*' or '??'.
                  properties:
                    domainName:
                      description: domainName specifies a domain name for the registry
                        In case the registry use non-standard (80 or 443) port, the
                        port should be included in the domain name as well.
                      type: string
                    insecure:
                      description: insecure indicates whether the registry is secure
                        (https) or insecure (http) By default (if not specified) the
                        registry is assumed as secure.
                      type: boolean
                  type: object
                type: array
              externalRegistryHostnames:
                description: externalRegistryHostnames provides the hostnames for
                  the default external image registry. The external hostname should
                  be set only when the image registry is exposed externally. The first
                  value is used in 'publicDockerImageRepository' field in ImageStreams.
                  The value must be in "hostname[:port]" format.
                items:
                  type: string
                type: array
              registrySources:
                description: registrySources contains configuration that determines
                  how the container runtime should treat individual registries when
                  accessing images for builds+pods. (e.g. whether or not to allow
                  insecure access).  It does not contain configuration for the internal
                  cluster registry.
                properties:
                  allowedRegistries:
                    description: "allowedRegistries are whitelisted for image pull/push.
                      All other registries are blocked. \n Only one of BlockedRegistries
                      or AllowedRegistries may be set."
                    items:
                      type: string
                    type: array
                  blockedRegistries:
                    description: "blockedRegistries are blacklisted from image pull/push.
                      All other registries are allowed. \n Only one of BlockedRegistries
                      or AllowedRegistries may be set."
                    items:
                      type: string
                    type: array
                  insecureRegistries:
                    description: insecureRegistries are registries which do not have
                      a valid TLS certificates or only support HTTP connections.
                    items:
                      type: string
                    type: array
                type: object
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              externalRegistryHostnames:
                description: externalRegistryHostnames provides the hostnames for
                  the default external image registry. The external hostname should
                  be set only when the image registry is exposed externally. The first
                  value is used in 'publicDockerImageRepository' field in ImageStreams.
                  The value must be in "hostname[:port]" format.
                items:
                  type: string
                type: array
              internalRegistryHostname:
                description: internalRegistryHostname sets the hostname for the default
                  internal image registry. The value must be in "hostname[:port]"
                  format. This value is set by the image registry operator which controls
                  the internal registry hostname. For backward compatibility, users
                  can still use OPENSHIFT_DEFAULT_REGISTRY environment variable but
                  this setting overrides the environment variable.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: infrastructures.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Infrastructure
    listKind: InfrastructureList
    plural: infrastructures
    singular: infrastructure
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Infrastructure holds cluster-wide information about Infrastructure.  The
          canonical name is `cluster`
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              cloudConfig:
                description: cloudConfig is a reference to a ConfigMap containing
                  the cloud provider configuration file. This configuration file is
                  used to configure the Kubernetes cloud provider integration when
                  using the built-in cloud provider integration or the external cloud
                  controller manager. The namespace for this config map is openshift-config.
                properties:
                  key:
                    description: Key allows pointing to a specific key/value inside
                      of the configmap.  This is useful for logical file references.
                    type: string
                  name:
                    type: string
                type: object
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              apiServerInternalURI:
                description: apiServerInternalURL is a valid URI with scheme(http/https),
                  address and port.  apiServerInternalURL can be used by components
                  like kubelets, to contact the Kubernetes API server using the infrastructure
                  provider rather than Kubernetes networking.
                type: string
              apiServerURL:
                description: apiServerURL is a valid URI with scheme(http/https),
                  address and port.  apiServerURL can be used by components like the
                  web console to tell users where to find the Kubernetes API.
                type: string
              etcdDiscoveryDomain:
                description: 'etcdDiscoveryDomain is the domain used to fetch the
                  SRV records for discovering etcd servers and clients. For more info:
                  https://github.com/etcd-io/etcd/blob/329be66e8b3f9e2e6af83c123ff89297e49ebd15/Documentation/op-guide/clustering.md#dns-discovery'
                type: string
              infrastructureName:
                description: infrastructureName uniquely identifies a cluster with
                  a human friendly name. Once set it should not be changed. Must be
                  of max length 27 and must have only alphanumeric or hyphen characters.
                type: string
              platform:
                description: "platform is the underlying infrastructure provider for
                  the cluster. \n Deprecated: Use platformStatus.type instead."
                type: string
              platformStatus:
                description: platformStatus holds status information specific to the
                  underlying infrastructure provider.
                properties:
                  aws:
                    description: AWS contains settings specific to the Amazon Web
                      Services infrastructure provider.
                    properties:
                      region:
                        description: region holds the default AWS region for new AWS
                          resources created by the cluster.
                        type: string
                    type: object
                  azure:
                    description: Azure contains settings specific to the Azure infrastructure
                      provider.
                    properties:
                      networkResourceGroupName:
                        description: networkResourceGroupName is the Resource Group
                          for network resources like the Virtual Network and Subnets
                          used by the cluster. If empty, the value is same as ResourceGroupName.
                        type: string
                      resourceGroupName:
                        description: resourceGroupName is the Resource Group for new
                          Azure resources created for the cluster.
                        type: string
                    type: object
                  baremetal:
                    description: BareMetal contains settings specific to the BareMetal
                      platform.
                    properties:
                      apiServerInternalIP:
                        description: apiServerInternalIP is an IP address to contact
                          the Kubernetes API server that can be used by components
                          inside the cluster, like kubelets using the infrastructure
                          rather than Kubernetes networking. It is the IP that the
                          Infrastructure.status.apiServerInternalURI points to. It
                          is the IP for a self-hosted load balancer in front of the
                          API servers.
                        type: string
                      ingressIP:
                        description: ingressIP is an external IP which routes to the
                          default ingress controller. The IP is a suitable target
                          of a wildcard DNS record used to resolve default route host
                          names.
                        type: string
                      nodeDNSIP:
                        description: nodeDNSIP is the IP address for the internal
                          DNS used by the nodes. Unlike the one managed by the DNS
                          operator, `NodeDNSIP` provides name resolution for the nodes
                          themselves. There is no DNS-as-a-service for BareMetal deployments.
                          In order to minimize necessary changes to the datacenter
                          DNS, a DNS service is hosted as a static pod to serve those
                          hostnames to the nodes in the cluster.
                        type: string
                    type: object
                  gcp:
                    description: GCP contains settings specific to the Google Cloud
                      Platform infrastructure provider.
                    properties:
                      projectID:
                        description: resourceGroupName is the Project ID for new GCP
                          resources created for the cluster.
                        type: string
                      region:
                        description: region holds the region for new GCP resources
                          created for the cluster.
                        type: string
                    type: object
                  openstack:
                    description: OpenStack contains settings specific to the OpenStack
                      infrastructure provider.
                    properties:
                      apiServerInternalIP:
                        description: apiServerInternalIP is an IP address to contact
                          the Kubernetes API server that can be used by components
                          inside the cluster, like kubelets using the infrastructure
                          rather than Kubernetes networking. It is the IP that the
                          Infrastructure.status.apiServerInternalURI points to. It
                          is the IP for a self-hosted load balancer in front of the
                          API servers.
                        type: string
                      cloudName:
                        description: cloudName is the name of the desired OpenStack
                          cloud in the client configuration file (`clouds.yaml`).
                        type: string
                      ingressIP:
                        description: ingressIP is an external IP which routes to the
                          default ingress controller. The IP is a suitable target
                          of a wildcard DNS record used to resolve default route host
                          names.
                        type: string
                      nodeDNSIP:
                        description: nodeDNSIP is the IP address for the internal
                          DNS used by the nodes. Unlike the one managed by the DNS
                          operator, `NodeDNSIP` provides name resolution for the nodes
                          themselves. There is no DNS-as-a-service for OpenStack deployments.
                          In order to minimize necessary changes to the datacenter
                          DNS, a DNS service is hosted as a static pod to serve those
                          hostnames to the nodes in the cluster.
                        type: string
                    type: object
                  ovirt:
                    description: Ovirt contains settings specific to the oVirt infrastructure
                      provider.
                    properties:
                      apiServerInternalIP:
                        description: apiServerInternalIP is an IP address to contact
                          the Kubernetes API server that can be used by components
                          inside the cluster, like kubelets using the infrastructure
                          rather than Kubernetes networking. It is the IP that the
                          Infrastructure.status.apiServerInternalURI points to. It
                          is the IP for a self-hosted load balancer in front of the
                          API servers.
                        type: string
                      ingressIP:
                        description: ingressIP is an external IP which routes to the
                          default ingress controller. The IP is a suitable target
                          of a wildcard DNS record used to resolve default route host
                          names.
                        type: string
                      nodeDNSIP:
                        description: nodeDNSIP is the IP address for the internal
                          DNS used by the nodes. Unlike the one managed by the DNS
                          operator, `NodeDNSIP` provides name resolution for the nodes
                          themselves. There is no DNS-as-a-service for oVirt deployments.
                          In order to minimize necessary changes to the datacenter
                          DNS, a DNS service is hosted as a static pod to serve those
                          hostnames to the nodes in the cluster.
                        type: string
                    type: object
                  type:
                    description: type is the underlying infrastructure provider for
                      the cluster. This value controls whether infrastructure automation
                      such as service load balancers, dynamic volume provisioning,
                      machine creation and deletion, and other integrations are enabled.
                      If None, no infrastructure automation is enabled. Allowed values
                      are "AWS", "Azure", "BareMetal", "GCP", "Libvirt", "OpenStack",
                      "VSphere", "oVirt", and "None". Individual components may not
                      support all platforms, and must handle unrecognized platforms
                      as None if they do not support that platform.
                    type: string
                type: object
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: ingresses.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Ingress
    listKind: IngressList
    plural: ingresses
    singular: ingress
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Ingress holds cluster-wide information about ingress, including
          the default ingress domain used for routes. The canonical name is `cluster`.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              domain:
                description: "domain is used to generate a default host name for a
                  route when the route's host name is empty. The generated host name
                  will follow this pattern: \"<route-name>.<route-namespace>.<domain>\".
                  \n It is also used as the default wildcard domain suffix for ingress.
                  The default ingresscontroller domain will follow this pattern: \"*.<domain>\".
                  \n Once set, changing domain is not currently supported."
                type: string
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: networks.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Network
    listKind: NetworkList
    plural: networks
    singular: network
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: 'Network holds cluster-wide information about Network. The canonical
          name is `cluster`. It is used to configure the desired network configuration,
          such as: IP address pools for services/pod IPs, network plugin, etc. Please
          view network.spec for an explanation on what applies when configuring this
          resource.'
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration. As a general
              rule, this SHOULD NOT be read directly. Instead, you should consume
              the NetworkStatus, as it indicates the currently deployed configuration.
              Currently, most spec fields are immutable after installation. Please
              view the individual ones for further details on each.
            properties:
              clusterNetwork:
                description: IP address pool to use for pod IPs. This field is immutable
                  after installation.
                items:
                  description: ClusterNetworkEntry is a contiguous block of IP addresses
                    from which pod IPs are allocated.
                  properties:
                    cidr:
                      description: The complete block for pod IPs.
                      type: string
                    hostPrefix:
                      description: The size (prefix) of block to allocate to each
                        node.
                      format: int32
                      minimum: 0
                      type: integer
                  type: object
                type: array
              externalIP:
                description: externalIP defines configuration for controllers that
                  affect Service.ExternalIP. If nil, then ExternalIP is not allowed
                  to be set.
                properties:
                  autoAssignCIDRs:
                    description: autoAssignCIDRs is a list of CIDRs from which to
                      automatically assign Service.ExternalIP. These are assigned
                      when the service is of type LoadBalancer. In general, this is
                      only useful for bare-metal clusters. In Openshift 3.x, this
                      was misleadingly called "IngressIPs". Automatically assigned
                      External IPs are not affected by any ExternalIPPolicy rules.
                      Currently, only one entry may be provided.
                    items:
                      type: string
                    type: array
                  policy:
                    description: policy is a set of restrictions applied to the ExternalIP
                      field. If nil or empty, then ExternalIP is not allowed to be
                      set.
                    properties:
                      allowedCIDRs:
                        description: allowedCIDRs is the list of allowed CIDRs.
                        items:
                          type: string
                        type: array
                      rejectedCIDRs:
                        description: rejectedCIDRs is the list of disallowed CIDRs.
                          These take precedence over allowedCIDRs.
                        items:
                          type: string
                        type: array
                    type: object
                type: object
              networkType:
                description: 'NetworkType is the plugin that is to be deployed (e.g.
                  OpenShiftSDN). This should match a value that the cluster-network-operator
                  understands, or else no networking will be installed. Currently
                  supported values are: - OpenShiftSDN This field is immutable after
                  installation.'
                type: string
              serviceNetwork:
                description: IP address pool for services. Currently, we only support
                  a single entry here. This field is immutable after installation.
                items:
                  type: string
                type: array
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              clusterNetwork:
                description: IP address pool to use for pod IPs.
                items:
                  description: ClusterNetworkEntry is a contiguous block of IP addresses
                    from which pod IPs are allocated.
                  properties:
                    cidr:
                      description: The complete block for pod IPs.
                      type: string
                    hostPrefix:
                      description: The size (prefix) of block to allocate to each
                        node.
                      format: int32
                      minimum: 0
                      type: integer
                  type: object
                type: array
              clusterNetworkMTU:
                description: ClusterNetworkMTU is the MTU for inter-pod networking.
                type: integer
              networkType:
                description: NetworkType is the plugin that is deployed (e.g. OpenShiftSDN).
                type: string
              serviceNetwork:
                description: IP address pool for services. Currently, we only support
                  a single entry here.
                items:
                  type: string
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: oauths.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: OAuth
    listKind: OAuthList
    plural: oauths
    singular: oauth
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: OAuth holds cluster-wide information about OAuth.  The canonical
          name is `cluster`. It is used to configure the integrated OAuth server.
          This configuration is only honored when the top level Authentication config
          has type set to IntegratedOAuth.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: OAuthSpec contains desired cluster auth configuration
            properties:
              identityProviders:
                description: identityProviders is an ordered list of ways for a user
                  to identify themselves. When this list is empty, no identities are
                  provisioned for users.
                items:
                  description: IdentityProvider provides identities for users authenticating
                    using credentials
                  properties:
                    basicAuth:
                      description: basicAuth contains configuration options for the
                        BasicAuth IdP
                      properties:
                        ca:
                          description: ca is an optional reference to a config map
                            by name containing the PEM-encoded CA bundle. It is used
                            as a trust anchor to validate the TLS certificate presented
                            by the remote server. The key "ca.crt" is used to locate
                            the data. If specified and the config map or expected
                            key is not found, the identity provider is not honored.
                            If the specified ca data is not valid, the identity provider
                            is not honored. If empty, the default system roots are
                            used. The namespace for this config map is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        tlsClientCert:
                          description: tlsClientCert is an optional reference to a
                            secret by name that contains the PEM-encoded TLS client
                            certificate to present when connecting to the server.
                            The key "tls.crt" is used to locate the data. If specified
                            and the secret or expected key is not found, the identity
                            provider is not honored. If the specified certificate
                            data is not valid, the identity provider is not honored.
                            The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        tlsClientKey:
                          description: tlsClientKey is an optional reference to a
                            secret by name that contains the PEM-encoded TLS private
                            key for the client certificate referenced in tlsClientCert.
                            The key "tls.key" is used to locate the data. If specified
                            and the secret or expected key is not found, the identity
                            provider is not honored. If the specified certificate
                            data is not valid, the identity provider is not honored.
                            The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        url:
                          description: url is the remote URL to connect to
                          type: string
                      type: object
                    github:
                      description: github enables user authentication using GitHub
                        credentials
                      properties:
                        ca:
                          description: ca is an optional reference to a config map
                            by name containing the PEM-encoded CA bundle. It is used
                            as a trust anchor to validate the TLS certificate presented
                            by the remote server. The key "ca.crt" is used to locate
                            the data. If specified and the config map or expected
                            key is not found, the identity provider is not honored.
                            If the specified ca data is not valid, the identity provider
                            is not honored. If empty, the default system roots are
                            used. This can only be configured when hostname is set
                            to a non-empty value. The namespace for this config map
                            is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        clientID:
                          description: clientID is the oauth client ID
                          type: string
                        clientSecret:
                          description: clientSecret is a required reference to the
                            secret by name containing the oauth client secret. The
                            key "clientSecret" is used to locate the data. If the
                            secret or expected key is not found, the identity provider
                            is not honored. The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        hostname:
                          description: hostname is the optional domain (e.g. "mycompany.com")
                            for use with a hosted instance of GitHub Enterprise. It
                            must match the GitHub Enterprise settings value configured
                            at /setup/settings#hostname.
                          type: string
                        organizations:
                          description: organizations optionally restricts which organizations
                            are allowed to log in
                          items:
                            type: string
                          type: array
                        teams:
                          description: teams optionally restricts which teams are
                            allowed to log in. Format is <org>/<team>.
                          items:
                            type: string
                          type: array
                      type: object
                    gitlab:
                      description: gitlab enables user authentication using GitLab
                        credentials
                      properties:
                        ca:
                          description: ca is an optional reference to a config map
                            by name containing the PEM-encoded CA bundle. It is used
                            as a trust anchor to validate the TLS certificate presented
                            by the remote server. The key "ca.crt" is used to locate
                            the data. If specified and the config map or expected
                            key is not found, the identity provider is not honored.
                            If the specified ca data is not valid, the identity provider
                            is not honored. If empty, the default system roots are
                            used. The namespace for this config map is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        clientID:
                          description: clientID is the oauth client ID
                          type: string
                        clientSecret:
                          description: clientSecret is a required reference to the
                            secret by name containing the oauth client secret. The
                            key "clientSecret" is used to locate the data. If the
                            secret or expected key is not found, the identity provider
                            is not honored. The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        url:
                          description: url is the oauth server base URL
                          type: string
                      type: object
                    google:
                      description: google enables user authentication using Google
                        credentials
                      properties:
                        clientID:
                          description: clientID is the oauth client ID
                          type: string
                        clientSecret:
                          description: clientSecret is a required reference to the
                            secret by name containing the oauth client secret. The
                            key "clientSecret" is used to locate the data. If the
                            secret or expected key is not found, the identity provider
                            is not honored. The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        hostedDomain:
                          description: hostedDomain is the optional Google App domain
                            (e.g. "mycompany.com") to restrict logins to
                          type: string
                      type: object
                    htpasswd:
                      description: htpasswd enables user authentication using an HTPasswd
                        file to validate credentials
                      properties:
                        fileData:
                          description: fileData is a required reference to a secret
                            by name containing the data to use as the htpasswd file.
                            The key "htpasswd" is used to locate the data. If the
                            secret or expected key is not found, the identity provider
                            is not honored. If the specified htpasswd data is not
                            valid, the identity provider is not honored. The namespace
                            for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                      type: object
                    keystone:
                      description: keystone enables user authentication using keystone
                        password credentials
                      properties:
                        ca:
                          description: ca is an optional reference to a config map
                            by name containing the PEM-encoded CA bundle. It is used
                            as a trust anchor to validate the TLS certificate presented
                            by the remote server. The key "ca.crt" is used to locate
                            the data. If specified and the config map or expected
                            key is not found, the identity provider is not honored.
                            If the specified ca data is not valid, the identity provider
                            is not honored. If empty, the default system roots are
                            used. The namespace for this config map is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        domainName:
                          description: domainName is required for keystone v3
                          type: string
                        tlsClientCert:
                          description: tlsClientCert is an optional reference to a
                            secret by name that contains the PEM-encoded TLS client
                            certificate to present when connecting to the server.
                            The key "tls.crt" is used to locate the data. If specified
                            and the secret or expected key is not found, the identity
                            provider is not honored. If the specified certificate
                            data is not valid, the identity provider is not honored.
                            The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        tlsClientKey:
                          description: tlsClientKey is an optional reference to a
                            secret by name that contains the PEM-encoded TLS private
                            key for the client certificate referenced in tlsClientCert.
                            The key "tls.key" is used to locate the data. If specified
                            and the secret or expected key is not found, the identity
                            provider is not honored. If the specified certificate
                            data is not valid, the identity provider is not honored.
                            The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        url:
                          description: url is the remote URL to connect to
                          type: string
                      type: object
                    ldap:
                      description: ldap enables user authentication using LDAP credentials
                      properties:
                        attributes:
                          description: attributes maps LDAP attributes to identities
                          properties:
                            email:
                              description: email is the list of attributes whose values
                                should be used as the email address. Optional. If
                                unspecified, no email is set for the identity
                              items:
                                type: string
                              type: array
                            id:
                              description: id is the list of attributes whose values
                                should be used as the user ID. Required. First non-empty
                                attribute is used. At least one attribute is required.
                                If none of the listed attribute have a value, authentication
                                fails. LDAP standard identity attribute is "dn"
                              items:
                                type: string
                              type: array
                            name:
                              description: name is the list of attributes whose values
                                should be used as the display name. Optional. If unspecified,
                                no display name is set for the identity LDAP standard
                                display name attribute is "cn"
                              items:
                                type: string
                              type: array
                            preferredUsername:
                              description: preferredUsername is the list of attributes
                                whose values should be used as the preferred username.
                                LDAP standard login attribute is "uid"
                              items:
                                type: string
                              type: array
                          type: object
                        bindDN:
                          description: bindDN is an optional DN to bind with during
                            the search phase.
                          type: string
                        bindPassword:
                          description: bindPassword is an optional reference to a
                            secret by name containing a password to bind with during
                            the search phase. The key "bindPassword" is used to locate
                            the data. If specified and the secret or expected key
                            is not found, the identity provider is not honored. The
                            namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        ca:
                          description: ca is an optional reference to a config map
                            by name containing the PEM-encoded CA bundle. It is used
                            as a trust anchor to validate the TLS certificate presented
                            by the remote server. The key "ca.crt" is used to locate
                            the data. If specified and the config map or expected
                            key is not found, the identity provider is not honored.
                            If the specified ca data is not valid, the identity provider
                            is not honored. If empty, the default system roots are
                            used. The namespace for this config map is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        insecure:
                          description: 'insecure, if true, indicates the connection
                            should not use TLS WARNING: Should not be set to `true`
                            with the URL scheme "ldaps://" as "ldaps://" URLs always          attempt
                            to connect using TLS, even when `insecure` is set to `true`
                            When `true`, "ldap://" URLS connect insecurely. When `false`,
                            "ldap://" URLs are upgraded to a TLS connection using
                            StartTLS as specified in https://tools.ietf.org/html/rfc2830.'
                          type: boolean
                        url:
                          description: 'url is an RFC 2255 URL which specifies the
                            LDAP search parameters to use. The syntax of the URL is:
                            ldap://host:port/basedn?attribute?scope?filter'
                          type: string
                      type: object
                    mappingMethod:
                      description: mappingMethod determines how identities from this
                        provider are mapped to users Defaults to "claim"
                      type: string
                    name:
                      description: 'name is used to qualify the identities returned
                        by this provider. - It MUST be unique and not shared by any
                        other identity provider used - It MUST be a valid path segment:
                        name cannot equal "." or ".." or contain "/" or "%" or ":"   Ref:
                        https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName'
                      type: string
                    openID:
                      description: openID enables user authentication using OpenID
                        credentials
                      properties:
                        ca:
                          description: ca is an optional reference to a config map
                            by name containing the PEM-encoded CA bundle. It is used
                            as a trust anchor to validate the TLS certificate presented
                            by the remote server. The key "ca.crt" is used to locate
                            the data. If specified and the config map or expected
                            key is not found, the identity provider is not honored.
                            If the specified ca data is not valid, the identity provider
                            is not honored. If empty, the default system roots are
                            used. The namespace for this config map is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        claims:
                          description: claims mappings
                          properties:
                            email:
                              description: email is the list of claims whose values
                                should be used as the email address. Optional. If
                                unspecified, no email is set for the identity
                              items:
                                type: string
                              type: array
                            name:
                              description: name is the list of claims whose values
                                should be used as the display name. Optional. If unspecified,
                                no display name is set for the identity
                              items:
                                type: string
                              type: array
                            preferredUsername:
                              description: preferredUsername is the list of claims
                                whose values should be used as the preferred username.
                                If unspecified, the preferred username is determined
                                from the value of the sub claim
                              items:
                                type: string
                              type: array
                          type: object
                        clientID:
                          description: clientID is the oauth client ID
                          type: string
                        clientSecret:
                          description: clientSecret is a required reference to the
                            secret by name containing the oauth client secret. The
                            key "clientSecret" is used to locate the data. If the
                            secret or expected key is not found, the identity provider
                            is not honored. The namespace for this secret is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                secret
                              type: string
                          required:
                          - name
                          type: object
                        extraAuthorizeParameters:
                          additionalProperties:
                            type: string
                          description: extraAuthorizeParameters are any custom parameters
                            to add to the authorize request.
                          type: object
                        extraScopes:
                          description: extraScopes are any scopes to request in addition
                            to the standard "openid" scope.
                          items:
                            type: string
                          type: array
                        issuer:
                          description: issuer is the URL that the OpenID Provider
                            asserts as its Issuer Identifier. It must use the https
                            scheme with no query or fragment component.
                          type: string
                      type: object
                    requestHeader:
                      description: requestHeader enables user authentication using
                        request header credentials
                      properties:
                        ca:
                          description: ca is a required reference to a config map
                            by name containing the PEM-encoded CA bundle. It is used
                            as a trust anchor to validate the TLS certificate presented
                            by the remote server. Specifically, it allows verification
                            of incoming requests to prevent header spoofing. The key
                            "ca.crt" is used to locate the data. If the config map
                            or expected key is not found, the identity provider is
                            not honored. If the specified ca data is not valid, the
                            identity provider is not honored. The namespace for this
                            config map is openshift-config.
                          properties:
                            name:
                              description: name is the metadata.name of the referenced
                                config map
                              type: string
                          required:
                          - name
                          type: object
                        challengeURL:
                          description: challengeURL is a URL to redirect unauthenticated
                            /authorize requests to Unauthenticated requests from OAuth
                            clients which expect WWW-Authenticate challenges will
                            be redirected here. ${url} is replaced with the current
                            URL, escaped to be safe in a query parameter   https://www.example.com/sso-login?then=${url}
                            ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query}
                            Required when challenge is set to true.
                          type: string
                        clientCommonNames:
                          description: clientCommonNames is an optional list of common
                            names to require a match from. If empty, any client certificate
                            validated against the clientCA bundle is considered authoritative.
                          items:
                            type: string
                          type: array
                        emailHeaders:
                          description: emailHeaders is the set of headers to check
                            for the email address
                          items:
                            type: string
                          type: array
                        headers:
                          description: headers is the set of headers to check for
                            identity information
                          items:
                            type: string
                          type: array
                        loginURL:
                          description: loginURL is a URL to redirect unauthenticated
                            /authorize requests to Unauthenticated requests from OAuth
                            clients which expect interactive logins will be redirected
                            here ${url} is replaced with the current URL, escaped
                            to be safe in a query parameter   https://www.example.com/sso-login?then=${url}
                            ${query} is replaced with the current query string   https://www.example.com/auth-proxy/oauth/authorize?${query}
                            Required when login is set to true.
                          type: string
                        nameHeaders:
                          description: nameHeaders is the set of headers to check
                            for the display name
                          items:
                            type: string
                          type: array
                        preferredUsernameHeaders:
                          description: preferredUsernameHeaders is the set of headers
                            to check for the preferred username
                          items:
                            type: string
                          type: array
                      type: object
                    type:
                      description: type identifies the identity provider type for
                        this entry.
                      type: string
                  type: object
                type: array
              templates:
                description: templates allow you to customize pages like the login
                  page.
                properties:
                  error:
                    description: error is the name of a secret that specifies a go
                      template to use to render error pages during the authentication
                      or grant flow. The key "errors.html" is used to locate the template
                      data. If specified and the secret or expected key is not found,
                      the default error page is used. If the specified template is
                      not valid, the default error page is used. If unspecified, the
                      default error page is used. The namespace for this secret is
                      openshift-config.
                    properties:
                      name:
                        description: name is the metadata.name of the referenced secret
                        type: string
                    required:
                    - name
                    type: object
                  login:
                    description: login is the name of a secret that specifies a go
                      template to use to render the login page. The key "login.html"
                      is used to locate the template data. If specified and the secret
                      or expected key is not found, the default login page is used.
                      If the specified template is not valid, the default login page
                      is used. If unspecified, the default login page is used. The
                      namespace for this secret is openshift-config.
                    properties:
                      name:
                        description: name is the metadata.name of the referenced secret
                        type: string
                    required:
                    - name
                    type: object
                  providerSelection:
                    description: providerSelection is the name of a secret that specifies
                      a go template to use to render the provider selection page.
                      The key "providers.html" is used to locate the template data.
                      If specified and the secret or expected key is not found, the
                      default provider selection page is used. If the specified template
                      is not valid, the default provider selection page is used. If
                      unspecified, the default provider selection page is used. The
                      namespace for this secret is openshift-config.
                    properties:
                      name:
                        description: name is the metadata.name of the referenced secret
                        type: string
                    required:
                    - name
                    type: object
                type: object
              tokenConfig:
                description: tokenConfig contains options for authorization and access
                  tokens
                properties:
                  accessTokenInactivityTimeoutSeconds:
                    description: 'accessTokenInactivityTimeoutSeconds defines the
                      default token inactivity timeout for tokens granted by any client.
                      The value represents the maximum amount of time that can occur
                      between consecutive uses of the token. Tokens become invalid
                      if they are not used within this temporal window. The user will
                      need to acquire a new token to regain access once a token times
                      out. Valid values are integer values:   x < 0  Tokens time out
                      is enabled but tokens never timeout unless configured per client
                      (e.g. `-1`)   x = 0  Tokens time out is disabled (default)   x
                      > 0  Tokens time out if there is no activity for x seconds The
                      current minimum allowed value for X is 300 (5 minutes)'
                    format: int32
                    type: integer
                  accessTokenMaxAgeSeconds:
                    description: accessTokenMaxAgeSeconds defines the maximum age
                      of access tokens
                    format: int32
                    type: integer
                type: object
            type: object
          status:
            description: OAuthStatus shows current known state of OAuth server in
              the cluster
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: operatorhubs.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: OperatorHub
    listKind: OperatorHubList
    plural: operatorhubs
    singular: operatorhub
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: OperatorHub is the Schema for the operatorhubs API. It can be
          used to change the state of the default hub sources for OperatorHub on the
          cluster from enabled to disabled and vice versa.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: OperatorHubSpec defines the desired state of OperatorHub
            properties:
              disableAllDefaultSources:
                description: disableAllDefaultSources allows you to disable all the
                  default hub sources. If this is true, a specific entry in sources
                  can be used to enable a default source. If this is false, a specific
                  entry in sources can be used to disable or enable a default source.
                type: boolean
              sources:
                description: sources is the list of default hub sources and their
                  configuration. If the list is empty, it implies that the default
                  hub sources are enabled on the cluster unless disableAllDefaultSources
                  is true. If disableAllDefaultSources is true and sources is not
                  empty, the configuration present in sources will take precedence.
                  The list of default hub sources and their current state will always
                  be reflected in the status block.
                items:
                  description: HubSource is used to specify the hub source and its
                    configuration
                  properties:
                    disabled:
                      description: disabled is used to disable a default hub source
                        on cluster
                      type: boolean
                    name:
                      description: name is the name of one of the default hub sources
                      maxLength: 253
                      minLength: 1
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: OperatorHubStatus defines the observed state of OperatorHub.
              The current state of the default hub sources will always be reflected
              here.
            properties:
              sources:
                description: sources encapsulates the result of applying the configuration
                  for each hub source
                items:
                  description: HubSourceStatus is used to reflect the current state
                    of applying the configuration to a default source
                  properties:
                    disabled:
                      description: disabled is used to disable a default hub source
                        on cluster
                      type: boolean
                    message:
                      description: message provides more information regarding failures
                      type: string
                    name:
                      description: name is the name of one of the default hub sources
                      maxLength: 253
                      minLength: 1
                      type: string
                    status:
                      description: status indicates success or failure in applying
                        the configuration
                      type: string
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: projects.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Project
    listKind: ProjectList
    plural: projects
    singular: project
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Project holds cluster-wide information about Project.  The canonical
          name is `cluster`
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              projectRequestMessage:
                description: projectRequestMessage is the string presented to a user
                  if they are unable to request a project via the projectrequest api
                  endpoint
                type: string
              projectRequestTemplate:
                description: projectRequestTemplate is the template to use for creating
                  projects in response to projectrequest. This must point to a template
                  in 'openshift-config' namespace. It is optional. If it is not specified,
                  a default template is used.
                properties:
                  name:
                    description: name is the metadata.name of the referenced project
                      request template
                    type: string
                type: object
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: proxies.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Proxy
    listKind: ProxyList
    plural: proxies
    singular: proxy
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Proxy holds cluster-wide information on how to configure default
          proxies for the cluster. The canonical name is `cluster`
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec holds user-settable values for the proxy configuration
            properties:
              httpProxy:
                description: httpProxy is the URL of the proxy for HTTP requests.  Empty
                  means unset and will not result in an env var.
                type: string
              httpsProxy:
                description: httpsProxy is the URL of the proxy for HTTPS requests.  Empty
                  means unset and will not result in an env var.
                type: string
              noProxy:
                description: noProxy is a comma-separated list of hostnames and/or
                  CIDRs for which the proxy should not be used. Empty means unset
                  and will not result in an env var.
                type: string
              readinessEndpoints:
                description: readinessEndpoints is a list of endpoints used to verify
                  readiness of the proxy.
                items:
                  type: string
                type: array
              trustedCA:
                description: "trustedCA is a reference to a ConfigMap containing a
                  CA certificate bundle used for client egress HTTPS connections.
                  The certificate bundle must be from the CA that signed the proxy's
                  certificate and be signed for everything. The trustedCA field should
                  only be consumed by a proxy validator. The validator is responsible
                  for reading the certificate bundle from required key \"ca-bundle.crt\"
                  and copying it to a ConfigMap named \"trusted-ca-bundle\" in the
                  \"openshift-config-managed\" namespace. The namespace for the ConfigMap
                  referenced by trustedCA is \"openshift-config\". Here is an example
                  ConfigMap (in yaml): \n apiVersion: v1 kind: ConfigMap metadata:
                  \ name: user-ca-bundle  namespace: openshift-config  data:    ca-bundle.crt:
                  |      -----BEGIN CERTIFICATE-----      Custom CA certificate bundle.
                  \     -----END CERTIFICATE-----"
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              httpProxy:
                description: httpProxy is the URL of the proxy for HTTP requests.
                type: string
              httpsProxy:
                description: httpsProxy is the URL of the proxy for HTTPS requests.
                type: string
              noProxy:
                description: noProxy is a comma-separated list of hostnames and/or
                  CIDRs for which the proxy should not be used.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: schedulers.config.openshift.io
spec:
  group: config.openshift.io
  names:
    kind: Scheduler
    listKind: SchedulerList
    plural: schedulers
    singular: scheduler
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Scheduler holds cluster-wide config information to run the Kubernetes
          Scheduler and influence its placement decisions. The canonical name for
          this config is `cluster`.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              defaultNodeSelector:
                description: 'defaultNodeSelector helps set the cluster-wide default
                  node selector to restrict pod placement to specific nodes. This
                  is applied to the pods created in all namespaces without a specified
                  nodeSelector value. For example, defaultNodeSelector: "type=user-node,region=east"
                  would set nodeSelector field in pod spec to "type=user-node,region=east"
                  to all pods created in all namespaces. Namespaces having project-wide
                  node selectors won''t be impacted even if this field is set. This
                  adds an annotation section to the namespace. For example, if a new
                  namespace is created with node-selector=''type=user-node,region=east'',
                  the annotation openshift.io/node-selector: type=user-node,region=east
                  gets added to the project. When the openshift.io/node-selector annotation
                  is set on the project the value is used in preference to the value
                  we are setting for defaultNodeSelector field. For instance, openshift.io/node-selector:
                  "type=user-node,region=west" means that the default of "type=user-node,region=east"
                  set in defaultNodeSelector would not be applied.'
                type: string
              mastersSchedulable:
                description: 'MastersSchedulable allows masters nodes to be schedulable.
                  When this flag is turned on, all the master nodes in the cluster
                  will be made schedulable, so that workload pods can run on them.
                  The default value for this field is false, meaning none of the master
                  nodes are schedulable. Important Note: Once the workload pods start
                  running on the master nodes, extreme care must be taken to ensure
                  that cluster-critical control plane components are not impacted.
                  Please turn on this field after doing due diligence.'
                type: boolean
              policy:
                description: policy is a reference to a ConfigMap containing scheduler
                  policy which has user specified predicates and priorities. If this
                  ConfigMap is not available scheduler will default to use DefaultAlgorithmProvider.
                  The namespace for this configmap is openshift-config.
                properties:
                  name:
                    description: name is the metadata.name of the referenced config
                      map
                    type: string
                required:
                - name
                type: object
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: network-attachment-definitions.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  names:
    kind: NetworkAttachmentDefinition
    listKind: NetworkAttachmentDefinitionList
    plural: network-attachment-definitions
    shortNames:
    - net-attach-def
    singular: network-attachment-definition
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: 'NetworkAttachmentDefinition is a CRD schema specified by the
          Network Plumbing Working Group to express the intent for attaching pods
          to one or more logical or physical networks. More information available
          at: https://github.com/k8snetworkplumbingwg/multi-net-spec'
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this represen
              tation of an object. Servers should convert recognized schemas to the
              latest internal value, and may reject unrecognized values. More info:
              https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NetworkAttachmentDefinition spec defines the desired state
              of a network attachment
            properties:
              config:
                description: NetworkAttachmentDefinition config is a JSON-formatted
                  CNI configuration
                type: string
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: kubevirts.kubevirt.io
spec:
  group: kubevirt.io
  names:
    categories:
    - all
    kind: KubeVirt
    listKind: KubeVirtList
    plural: kubevirts
    shortNames:
    - kv
    - kvs
    singular: kubevirt
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1
    schema:
      openAPIV3Schema:
        description: KubeVirt represents the object deploying all KubeVirt resources
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              certificateRotateStrategy:
                properties:
                  selfSigned:
                    properties:
                      ca:
                        description: CA configuration CA certs are kept in the CA
                          bundle as long as they are valid
                        properties:
                          duration:
                            description: The requested 'duration' (i.e. lifetime)
                              of the Certificate.
                            type: string
                          renewBefore:
                            description: The amount of time before the currently issued
                              certificate's "notAfter" time that we will begin to
                              attempt to renew the certificate.
                            type: string
                        type: object
                      caOverlapInterval:
                        description: Deprecated. Use CA.Duration and CA.RenewBefore
                          instead
                        type: string
                      caRotateInterval:
                        description: Deprecated. Use CA.Duration instead
                        type: string
                      certRotateInterval:
                        description: Deprecated. Use Server.Duration instead
                        type: string
                      server:
                        description: Server configuration Certs are rotated and discarded
                        properties:
                          duration:
                            description: The requested 'duration' (i.e. lifetime)
                              of the Certificate.
                            type: string
                          renewBefore:
                            description: The amount of time before the currently issued
                              certificate's "notAfter" time that we will begin to
                              attempt to renew the certificate.
                            type: string
                        type: object
                    type: object
                type: object
              configuration:
                description: holds kubevirt configurations. same as the virt-configMap
                properties:
                  additionalGuestMemoryOverheadRatio:
                    description: AdditionalGuestMemoryOverheadRatio can be used to
                      increase the virtualization infrastructure overhead. This is
                      useful, since the calculation of this overhead is not accurate
                      and cannot be entirely known in advance. The ratio that is being
                      set determines by which factor to increase the overhead calculated
                      by Kubevirt. A higher ratio means that the VMs would be less
                      compromised by node pressures, but would mean that fewer VMs
                      could be scheduled to a node. If not set, the default is 1.
                    type: string
                  apiConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                  architectureConfiguration:
                    properties:
                      amd64:
                        properties:
                          emulatedMachines:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          machineType:
                            type: string
                          ovmfPath:
                            type: string
                        type: object
                      arm64:
                        properties:
                          emulatedMachines:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          machineType:
                            type: string
                          ovmfPath:
                            type: string
                        type: object
                      defaultArchitecture:
                        type: string
                      ppc64le:
                        properties:
                          emulatedMachines:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          machineType:
                            type: string
                          ovmfPath:
                            type: string
                        type: object
                    type: object
                  autoCPULimitNamespaceLabelSelector:
                    description: When set, AutoCPULimitNamespaceLabelSelector will
                      set a CPU limit on virt-launcher for VMIs running inside namespaces
                      that match the label selector. The CPU limit will equal the
                      number of requested vCPUs. This setting does not apply to VMIs
                      with dedicated CPUs.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  controllerConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                  cpuModel:
                    type: string
                  cpuRequest:
                    anyOf:
                    - type: integer
                    - type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  defaultRuntimeClass:
                    type: string
                  developerConfiguration:
                    description: DeveloperConfiguration holds developer options
                    properties:
                      cpuAllocationRatio:
                        description: 'For each requested virtual CPU, CPUAllocationRatio
                          defines how much physical CPU to request per VMI from the
                          hosting node. The value is in fraction of a CPU thread (or
                          core on non-hyperthreaded nodes). For example, a value of
                          1 means 1 physical CPU thread per VMI CPU thread. A value
                          of 100 would be 1% of a physical thread allocated for each
                          requested VMI thread. This option has no effect on VMIs
                          that request dedicated CPUs. More information at: https://kubevirt.io/user-guide/operations/node_overcommit/#node-cpu-allocation-ratio
                          Defaults to 10'
                        type: integer
                      diskVerification:
                        description: DiskVerification holds container disks verification
                          limits
                        properties:
                          memoryLimit:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                        required:
                        - memoryLimit
                        type: object
                      featureGates:
                        description: FeatureGates is the list of experimental features
                          to enable. Defaults to none
                        items:
                          type: string
                        type: array
                      logVerbosity:
                        description: LogVerbosity sets log verbosity level of  various
                          components
                        properties:
                          nodeVerbosity:
                            additionalProperties:
                              type: integer
                            description: NodeVerbosity represents a map of nodes with
                              a specific verbosity level
                            type: object
                          virtAPI:
                            type: integer
                          virtController:
                            type: integer
                          virtHandler:
                            type: integer
                          virtLauncher:
                            type: integer
                          virtOperator:
                            type: integer
                        type: object
                      memoryOvercommit:
                        description: MemoryOvercommit is the percentage of memory
                          we want to give VMIs compared to the amount given to its
                          parent pod (virt-launcher). For example, a value of 102
                          means the VMI will "see" 2% more memory than its parent
                          pod. Values under 100 are effectively "undercommits". Overcommits
                          can lead to memory exhaustion, which in turn can lead to
                          crashes. Use carefully. Defaults to 100
                        type: integer
                      minimumClusterTSCFrequency:
                        description: Allow overriding the automatically determined
                          minimum TSC frequency of the cluster and fixate the minimum
                          to this frequency.
                        format: int64
                        type: integer
                      minimumReservePVCBytes:
                        description: MinimumReservePVCBytes is the amount of space,
                          in bytes, to leave unused on disks. Defaults to 131072 (128KiB)
                        format: int64
                        type: integer
                      nodeSelectors:
                        additionalProperties:
                          type: string
                        description: NodeSelectors allows restricting VMI creation
                          to nodes that match a set of labels. Defaults to none
                        type: object
                      pvcTolerateLessSpaceUpToPercent:
                        description: LessPVCSpaceToleration determines how much smaller,
                          in percentage, disk PVCs are allowed to be compared to the
                          requested size (to account for various overheads). Defaults
                          to 10
                        type: integer
                      useEmulation:
                        description: UseEmulation can be set to true to allow fallback
                          to software emulation in case hardware-assisted emulation
                          is not available. Defaults to false
                        type: boolean
                    type: object
                  emulatedMachines:
                    items:
                      type: string
                    type: array
                  evictionStrategy:
                    description: EvictionStrategy defines at the cluster level if
                      the VirtualMachineInstance should be migrated instead of shut-off
                      in case of a node drain. If the VirtualMachineInstance specific
                      field is set it overrides the cluster level one.
                    type: string
                  handlerConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                  imagePullPolicy:
                    description: PullPolicy describes a policy for if/when to pull
                      a container image
                    type: string
                  ksmConfiguration:
                    description: KSMConfiguration holds the information regarding
                      the enabling the KSM in the nodes (if available).
                    properties:
                      nodeLabelSelector:
                        description: NodeLabelSelector is a selector that filters
                          in which nodes the KSM will be enabled. Empty NodeLabelSelector
                          will enable ksm for every node.
                        properties:
                          matchExpressions:
                            description: matchExpressions is a list of label selector
                              requirements. The requirements are ANDed.
                            items:
                              description: A label selector requirement is a selector
                                that contains values, a key, and an operator that
                                relates the key and values.
                              properties:
                                key:
                                  description: key is the label key that the selector
                                    applies to.
                                  type: string
                                operator:
                                  description: operator represents a key's relationship
                                    to a set of values. Valid operators are In, NotIn,
                                    Exists and DoesNotExist.
                                  type: string
                                values:
                                  description: values is an array of string values.
                                    If the operator is In or NotIn, the values array
                                    must be non-empty. If the operator is Exists or
                                    DoesNotExist, the values array must be empty.
                                    This array is replaced during a strategic merge
                                    patch.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              type: string
                            description: matchLabels is a map of {key,value} pairs.
                              A single {key,value} in the matchLabels map is equivalent
                              to an element of matchExpressions, whose key field is
                              "key", the operator is "In", and the values array contains
                              only "value". The requirements are ANDed.
                            type: object
                        type: object
                    type: object
                  liveUpdateConfiguration:
                    description: LiveUpdateConfiguration holds defaults for live update
                      features
                    properties:
                      maxCpuSockets:
                        description: MaxCpuSockets holds the maximum amount of sockets
                          that can be hotplugged
                        format: int32
                        type: integer
                      maxGuest:
                        anyOf:
                        - type: integer
                        - type: string
                        description: MaxGuest defines the maximum amount memory that
                          can be allocated to the guest using hotplug.
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      maxHotplugRatio:
                        description: 'MaxHotplugRatio is the ratio used to define
                          the max amount of a hotplug resource that can be made available
                          to a VM when the specific Max* setting is not defined (MaxCpuSockets,
                          MaxGuest) Example: VM is configured with 512Mi of guest
                          memory, if MaxGuest is not defined and MaxHotplugRatio is
                          2 then MaxGuest = 1Gi defaults to 4'
                        format: int32
                        type: integer
                    type: object
                  machineType:
                    description: Deprecated. Use architectureConfiguration instead.
                    type: string
                  mediatedDevicesConfiguration:
                    description: MediatedDevicesConfiguration holds information about
                      MDEV types to be defined, if available
                    properties:
                      mediatedDeviceTypes:
                        items:
                          type: string
                        type: array
                        x-kubernetes-list-type: atomic
                      mediatedDevicesTypes:
                        description: Deprecated. Use mediatedDeviceTypes instead.
                        items:
                          type: string
                        type: array
                        x-kubernetes-list-type: atomic
                      nodeMediatedDeviceTypes:
                        items:
                          description: NodeMediatedDeviceTypesConfig holds information
                            about MDEV types to be defined in a specific node that
                            matches the NodeSelector field.
                          properties:
                            mediatedDeviceTypes:
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            mediatedDevicesTypes:
                              description: Deprecated. Use mediatedDeviceTypes instead.
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            nodeSelector:
                              additionalProperties:
                                type: string
                              description: 'NodeSelector is a selector which must
                                be true for the vmi to fit on a node. Selector which
                                must match a node''s labels for the vmi to be scheduled
                                on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                              type: object
                          required:
                          - nodeSelector
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                    type: object
                  memBalloonStatsPeriod:
                    format: int32
                    type: integer
                  migrations:
                    description: MigrationConfiguration holds migration options. Can
                      be overridden for specific groups of VMs though migration policies.
                      Visit https://kubevirt.io/user-guide/operations/migration_policies/
                      for more information.
                    properties:
                      allowAutoConverge:
                        description: AllowAutoConverge allows the platform to compromise
                          performance/availability of VMIs to guarantee successful
                          VMI live migrations. Defaults to false
                        type: boolean
                      allowPostCopy:
                        description: AllowPostCopy enables post-copy live migrations.
                          Such migrations allow even the busiest VMIs to successfully
                          live-migrate. However, events like a network failure can
                          cause a VMI crash. If set to true, migrations will still
                          start in pre-copy, but switch to post-copy when CompletionTimeoutPerGiB
                          triggers. Defaults to false
                        type: boolean
                      bandwidthPerMigration:
                        anyOf:
                        - type: integer
                        - type: string
                        description: BandwidthPerMigration limits the amount of network
                          bandwidth live migrations are allowed to use. The value
                          is in quantity per second. Defaults to 0 (no limit)
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      completionTimeoutPerGiB:
                        description: CompletionTimeoutPerGiB is the maximum number
                          of seconds per GiB a migration is allowed to take. If a
                          live-migration takes longer to migrate than this value multiplied
                          by the size of the VMI, the migration will be cancelled,
                          unless AllowPostCopy is true. Defaults to 800
                        format: int64
                        type: integer
                      disableTLS:
                        description: When set to true, DisableTLS will disable the
                          additional layer of live migration encryption provided by
                          KubeVirt. This is usually a bad idea. Defaults to false
                        type: boolean
                      matchSELinuxLevelOnMigration:
                        description: By default, the SELinux level of target virt-launcher
                          pods is forced to the level of the source virt-launcher.
                          When set to true, MatchSELinuxLevelOnMigration lets the
                          CRI auto-assign a random level to the target. That will
                          ensure the target virt-launcher doesn't share categories
                          with another pod on the node. However, migrations will fail
                          when using RWX volumes that don't automatically deal with
                          SELinux levels.
                        type: boolean
                      network:
                        description: Network is the name of the CNI network to use
                          for live migrations. By default, migrations go through the
                          pod network.
                        type: string
                      nodeDrainTaintKey:
                        description: 'NodeDrainTaintKey defines the taint key that
                          indicates a node should be drained. Note: this option relies
                          on the deprecated node taint feature. Default: kubevirt.io/drain'
                        type: string
                      parallelMigrationsPerCluster:
                        description: ParallelMigrationsPerCluster is the total number
                          of concurrent live migrations allowed cluster-wide. Defaults
                          to 5
                        format: int32
                        type: integer
                      parallelOutboundMigrationsPerNode:
                        description: ParallelOutboundMigrationsPerNode is the maximum
                          number of concurrent outgoing live migrations allowed per
                          node. Defaults to 2
                        format: int32
                        type: integer
                      progressTimeout:
                        description: ProgressTimeout is the maximum number of seconds
                          a live migration is allowed to make no progress. Hitting
                          this timeout means a migration transferred 0 data for that
                          many seconds. The migration is then considered stuck and
                          therefore cancelled. Defaults to 150
                        format: int64
                        type: integer
                      unsafeMigrationOverride:
                        description: UnsafeMigrationOverride allows live migrations
                          to occur even if the compatibility check indicates the migration
                          will be unsafe to the guest. Defaults to false
                        type: boolean
                    type: object
                  minCPUModel:
                    type: string
                  network:
                    description: NetworkConfiguration holds network options
                    properties:
                      binding:
                        additionalProperties:
                          properties:
                            domainAttachmentType:
                              description: 'DomainAttachmentType is a standard domain
                                network attachment method kubevirt supports. Supported
                                values: "tap". The standard domain attachment can
                                be used instead or in addition to the sidecarImage.
                                version: 1alphav1'
                              type: string
                            migration:
                              description: 'Migration means the VM using the plugin
                                can be safely migrated version: 1alphav1'
                              properties:
                                method:
                                  description: 'Method defines a pre-defined migration
                                    methodology version: 1alphav1'
                                  type: string
                              type: object
                            networkAttachmentDefinition:
                              description: 'NetworkAttachmentDefinition references
                                to a NetworkAttachmentDefinition CR object. Format:
                                <name>, <namespace>/<name>. If namespace is not specified,
                                VMI namespace is assumed. version: 1alphav1'
                              type: string
                            sidecarImage:
                              description: 'SidecarImage references a container image
                                that runs in the virt-launcher pod. The sidecar handles
                                (libvirt) domain configuration and optional services.
                                version: 1alphav1'
                              type: string
                          type: object
                        type: object
                      defaultNetworkInterface:
                        type: string
                      permitBridgeInterfaceOnPodNetwork:
                        type: boolean
                      permitSlirpInterface:
                        type: boolean
                    type: object
                  obsoleteCPUModels:
                    additionalProperties:
                      type: boolean
                    type: object
                  ovmfPath:
                    type: string
                  permittedHostDevices:
                    description: PermittedHostDevices holds information about devices
                      allowed for passthrough
                    properties:
                      mediatedDevices:
                        items:
                          description: MediatedHostDevice represents a host mediated
                            device allowed for passthrough
                          properties:
                            externalResourceProvider:
                              type: boolean
                            mdevNameSelector:
                              type: string
                            resourceName:
                              type: string
                          required:
                          - mdevNameSelector
                          - resourceName
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                      pciHostDevices:
                        items:
                          description: PciHostDevice represents a host PCI device
                            allowed for passthrough
                          properties:
                            externalResourceProvider:
                              description: If true, KubeVirt will leave the allocation
                                and monitoring to an external device plugin
                              type: boolean
                            pciVendorSelector:
                              description: The vendor_id:product_id tuple of the PCI
                                device
                              type: string
                            resourceName:
                              description: The name of the resource that is representing
                                the device. Exposed by a device plugin and requested
                                by VMs. Typically of the form vendor.com/product_name
                              type: string
                          required:
                          - pciVendorSelector
                          - resourceName
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                      usb:
                        items:
                          properties:
                            externalResourceProvider:
                              description: If true, KubeVirt will leave the allocation
                                and monitoring to an external device plugin
                              type: boolean
                            resourceName:
                              description: 'Identifies the list of USB host devices.
                                e.g: kubevirt.io/storage, kubevirt.io/bootable-usb,
                                etc'
                              type: string
                            selectors:
                              items:
                                properties:
                                  product:
                                    type: string
                                  vendor:
                                    type: string
                                required:
                                - product
                                - vendor
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          required:
                          - resourceName
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                    type: object
                  seccompConfiguration:
                    description: SeccompConfiguration holds Seccomp configuration
                      for Kubevirt components
                    properties:
                      virtualMachineInstanceProfile:
                        description: VirtualMachineInstanceProfile defines what profile
                          should be used with virt-launcher. Defaults to none
                        properties:
                          customProfile:
                            description: CustomProfile allows to request arbitrary
                              profile for virt-launcher
                            properties:
                              localhostProfile:
                                type: string
                              runtimeDefaultProfile:
                                type: boolean
                            type: object
                        type: object
                    type: object
                  selinuxLauncherType:
                    type: string
                  smbios:
                    properties:
                      family:
                        type: string
                      manufacturer:
                        type: string
                      product:
                        type: string
                      sku:
                        type: string
                      version:
                        type: string
                    type: object
                  supportContainerResources:
                    description: SupportContainerResources specifies the resource
                      requirements for various types of supporting containers such
                      as container disks/virtiofs/sidecars and hotplug attachment
                      pods. If omitted a sensible default will be supplied.
                    items:
                      description: SupportContainerResources are used to specify the
                        cpu/memory request and limits for the containers that support
                        various features of Virtual Machines. These containers are
                        usually idle and don't require a lot of memory or cpu.
                      properties:
                        resources:
                          description: ResourceRequirements describes the compute
                            resource requirements.
                          properties:
                            claims:
                              description: "Claims lists the names of resources, defined
                                in spec.resourceClaims, that are used by this container.
                                \n This is an alpha field and requires enabling the
                                DynamicResourceAllocation feature gate. \n This field
                                is immutable. It can only be set for containers."
                              items:
                                description: ResourceClaim references one entry in
                                  PodSpec.ResourceClaims.
                                properties:
                                  name:
                                    description: Name must match the name of one entry
                                      in pod.spec.resourceClaims of the Pod where
                                      this field is used. It makes that resource available
                                      inside a container.
                                    type: string
                                required:
                                - name
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                              - name
                              x-kubernetes-list-type: map
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of
                                compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount
                                of compute resources required. If Requests is omitted
                                for a container, it defaults to Limits if that is
                                explicitly specified, otherwise to an implementation-defined
                                value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                        type:
                          type: string
                      required:
                      - resources
                      - type
                      type: object
                    type: array
                    x-kubernetes-list-map-keys:
                    - type
                    x-kubernetes-list-type: map
                  supportedGuestAgentVersions:
                    description: deprecated
                    items:
                      type: string
                    type: array
                  tlsConfiguration:
                    description: TLSConfiguration holds TLS options
                    properties:
                      ciphers:
                        items:
                          type: string
                        type: array
                        x-kubernetes-list-type: set
                      minTLSVersion:
                        description: "MinTLSVersion is a way to specify the minimum
                          protocol version that is acceptable for TLS connections.
                          Protocol versions are based on the following most common
                          TLS configurations: \n   https://ssl-config.mozilla.org/
                          \n Note that SSLv3.0 is not a supported protocol version
                          due to well known vulnerabilities such as POODLE: https://en.wikipedia.org/wiki/POODLE"
                        enum:
                        - VersionTLS10
                        - VersionTLS11
                        - VersionTLS12
                        - VersionTLS13
                        type: string
                    type: object
                  virtualMachineInstancesPerNode:
                    type: integer
                  virtualMachineOptions:
                    description: VirtualMachineOptions holds the cluster level information
                      regarding the virtual machine.
                    properties:
                      disableFreePageReporting:
                        description: DisableFreePageReporting disable the free page
                          reporting of memory balloon device https://libvirt.org/formatdomain.html#memory-balloon-device.
                          This will have effect only if AutoattachMemBalloon is not
                          false and the vmi is not requesting any high performance
                          feature (dedicatedCPU/realtime/hugePages), in which free
                          page reporting is always disabled.
                        type: object
                      disableSerialConsoleLog:
                        description: DisableSerialConsoleLog disables logging the
                          auto-attached default serial console. If not set, serial
                          console logs will be written to a file and then streamed
                          from a container named 'guest-console-log'. The value can
                          be individually overridden for each VM, not relevant if
                          AutoattachSerialConsole is disabled.
                        type: object
                    type: object
                  vmRolloutStrategy:
                    description: VMRolloutStrategy defines how changes to a VM object
                      propagate to its VMI
                    enum:
                    - Stage
                    - LiveUpdate
                    nullable: true
                    type: string
                  vmStateStorageClass:
                    description: VMStateStorageClass is the name of the storage class
                      to use for the PVCs created to preserve VM state, like TPM.
                      The storage class must support RWX in filesystem mode.
                    type: string
                  webhookConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                type: object
              customizeComponents:
                properties:
                  flags:
                    description: Configure the value used for deployment and daemonset
                      resources
                    properties:
                      api:
                        additionalProperties:
                          type: string
                        type: object
                      controller:
                        additionalProperties:
                          type: string
                        type: object
                      handler:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  patches:
                    items:
                      properties:
                        patch:
                          type: string
                        resourceName:
                          minLength: 1
                          type: string
                        resourceType:
                          minLength: 1
                          type: string
                        type:
                          type: string
                      required:
                      - patch
                      - resourceName
                      - resourceType
                      - type
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
              imagePullPolicy:
                description: The ImagePullPolicy to use.
                type: string
              imagePullSecrets:
                description: The imagePullSecrets to pull the container images from
                  Defaults to none
                items:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                type: array
                x-kubernetes-list-type: atomic
              imageRegistry:
                description: The image registry to pull the container images from
                  Defaults to the same registry the operator's container image is
                  pulled from.
                type: string
              imageTag:
                description: The image tag to use for the continer images installed.
                  Defaults to the same tag as the operator's container image.
                type: string
              infra:
                description: selectors and tolerations that should apply to KubeVirt
                  infrastructure components
                properties:
                  nodePlacement:
                    description: nodePlacement describes scheduling configuration
                      for specific KubeVirt components
                    properties:
                      affinity:
                        description: affinity enables pod affinity/anti-affinity placement
                          expanding the types of constraints that can be expressed
                          with nodeSelector. affinity is going to be applied to the
                          relevant kind of pods in parallel with nodeSelector See
                          https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
                        properties:
                          nodeAffinity:
                            description: Describes node affinity scheduling rules
                              for the pod.
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node matches the corresponding matchExpressions;
                                  the node(s) with the highest sum are the most preferred.
                                items:
                                  description: An empty preferred scheduling term
                                    matches all objects with implicit weight 0 (i.e.
                                    it's a no-op). A null preferred scheduling term
                                    matches no objects (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A node selector term, associated
                                        with the corresponding weight.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    weight:
                                      description: Weight associated with matching
                                        the corresponding nodeSelectorTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - preference
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to an update), the system may or may not try
                                  to eventually evict the pod from its node.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector
                                      terms. The terms are ORed.
                                    items:
                                      description: A null or empty node selector term
                                        matches no objects. The requirements of them
                                        are ANDed. The TopologySelectorTerm type implements
                                        a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                            type: object
                          podAffinity:
                            description: Describes pod affinity scheduling rules (e.g.
                              co-locate this pod in the same node, zone, etc. as some
                              other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to a pod label update), the system may or may
                                  not try to eventually evict the pod from its node.
                                  When there are multiple elements, the lists of nodes
                                  corresponding to each podAffinityTerm are intersected,
                                  i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                          podAntiAffinity:
                            description: Describes pod anti-affinity scheduling rules
                              (e.g. avoid putting this pod in the same node, zone,
                              etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the anti-affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling anti-affinity
                                  expressions, etc.), compute a sum by iterating through
                                  the elements of this field and adding "weight" to
                                  the sum if the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the anti-affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  anti-affinity requirements specified by this field
                                  cease to be met at some point during pod execution
                                  (e.g. due to a pod label update), the system may
                                  or may not try to eventually evict the pod from
                                  its node. When there are multiple elements, the
                                  lists of nodes corresponding to each podAffinityTerm
                                  are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: 'nodeSelector is the node selector applied to
                          the relevant kind of pods It specifies a map of key-value
                          pairs: for the pod to be eligible to run on a node, the
                          node must have each of the indicated key-value pairs as
                          labels (it can have additional labels as well). See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector'
                        type: object
                      tolerations:
                        description: tolerations is a list of tolerations applied
                          to the relevant kind of pods See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                          for more info. These are additional tolerations other than
                          default ones.
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match.
                                Empty means match all taint effects. When specified,
                                allowed values are NoSchedule, PreferNoSchedule and
                                NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration
                                applies to. Empty means match all taint keys. If the
                                key is empty, operator must be Exists; this combination
                                means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship
                                to the value. Valid operators are Exists and Equal.
                                Defaults to Equal. Exists is equivalent to wildcard
                                for value, so that a pod can tolerate all taints of
                                a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period
                                of time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the
                                taint forever (do not evict). Zero and negative values
                                will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration
                                matches to. If the operator is Exists, the value should
                                be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                    type: object
                  replicas:
                    description: 'replicas indicates how many replicas should be created
                      for each KubeVirt infrastructure component (like virt-api or
                      virt-controller). Defaults to 2. WARNING: this is an advanced
                      feature that prevents auto-scaling for core kubevirt components.
                      Please use with caution!'
                    type: integer
                type: object
              monitorAccount:
                description: The name of the Prometheus service account that needs
                  read-access to KubeVirt endpoints Defaults to prometheus-k8s
                type: string
              monitorNamespace:
                description: The namespace Prometheus is deployed in Defaults to openshift-monitor
                type: string
              productComponent:
                description: Designate the apps.kubevirt.io/component label for KubeVirt
                  components. Useful if KubeVirt is included as part of a product.
                  If ProductComponent is not specified, the component label default
                  value is kubevirt.
                type: string
              productName:
                description: Designate the apps.kubevirt.io/part-of label for KubeVirt
                  components. Useful if KubeVirt is included as part of a product.
                  If ProductName is not specified, the part-of label will be omitted.
                type: string
              productVersion:
                description: Designate the apps.kubevirt.io/version label for KubeVirt
                  components. Useful if KubeVirt is included as part of a product.
                  If ProductVersion is not specified, KubeVirt's version will be used.
                type: string
              serviceMonitorNamespace:
                description: The namespace the service monitor will be deployed  When
                  ServiceMonitorNamespace is set, then we'll install the service monitor
                  object in that namespace otherwise we will use the monitoring namespace.
                type: string
              uninstallStrategy:
                description: Specifies if kubevirt can be deleted if workloads are
                  still present. This is mainly a precaution to avoid accidental data
                  loss
                type: string
              workloadUpdateStrategy:
                description: WorkloadUpdateStrategy defines at the cluster level how
                  to handle automated workload updates
                properties:
                  batchEvictionInterval:
                    description: "BatchEvictionInterval Represents the interval to
                      wait before issuing the next batch of shutdowns \n Defaults
                      to 1 minute"
                    type: string
                  batchEvictionSize:
                    description: "BatchEvictionSize Represents the number of VMIs
                      that can be forced updated per the BatchShutdownInteral interval
                      \n Defaults to 10"
                    type: integer
                  workloadUpdateMethods:
                    description: "WorkloadUpdateMethods defines the methods that can
                      be used to disrupt workloads during automated workload updates.
                      When multiple methods are present, the least disruptive method
                      takes precedence over more disruptive methods. For example if
                      both LiveMigrate and Shutdown methods are listed, only VMs which
                      are not live migratable will be restarted/shutdown \n An empty
                      list defaults to no automated workload updating"
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
              workloads:
                description: selectors and tolerations that should apply to KubeVirt
                  workloads
                properties:
                  nodePlacement:
                    description: nodePlacement describes scheduling configuration
                      for specific KubeVirt components
                    properties:
                      affinity:
                        description: affinity enables pod affinity/anti-affinity placement
                          expanding the types of constraints that can be expressed
                          with nodeSelector. affinity is going to be applied to the
                          relevant kind of pods in parallel with nodeSelector See
                          https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
                        properties:
                          nodeAffinity:
                            description: Describes node affinity scheduling rules
                              for the pod.
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node matches the corresponding matchExpressions;
                                  the node(s) with the highest sum are the most preferred.
                                items:
                                  description: An empty preferred scheduling term
                                    matches all objects with implicit weight 0 (i.e.
                                    it's a no-op). A null preferred scheduling term
                                    matches no objects (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A node selector term, associated
                                        with the corresponding weight.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    weight:
                                      description: Weight associated with matching
                                        the corresponding nodeSelectorTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - preference
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to an update), the system may or may not try
                                  to eventually evict the pod from its node.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector
                                      terms. The terms are ORed.
                                    items:
                                      description: A null or empty node selector term
                                        matches no objects. The requirements of them
                                        are ANDed. The TopologySelectorTerm type implements
                                        a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                            type: object
                          podAffinity:
                            description: Describes pod affinity scheduling rules (e.g.
                              co-locate this pod in the same node, zone, etc. as some
                              other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to a pod label update), the system may or may
                                  not try to eventually evict the pod from its node.
                                  When there are multiple elements, the lists of nodes
                                  corresponding to each podAffinityTerm are intersected,
                                  i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                          podAntiAffinity:
                            description: Describes pod anti-affinity scheduling rules
                              (e.g. avoid putting this pod in the same node, zone,
                              etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the anti-affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling anti-affinity
                                  expressions, etc.), compute a sum by iterating through
                                  the elements of this field and adding "weight" to
                                  the sum if the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the anti-affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  anti-affinity requirements specified by this field
                                  cease to be met at some point during pod execution
                                  (e.g. due to a pod label update), the system may
                                  or may not try to eventually evict the pod from
                                  its node. When there are multiple elements, the
                                  lists of nodes corresponding to each podAffinityTerm
                                  are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: 'nodeSelector is the node selector applied to
                          the relevant kind of pods It specifies a map of key-value
                          pairs: for the pod to be eligible to run on a node, the
                          node must have each of the indicated key-value pairs as
                          labels (it can have additional labels as well). See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector'
                        type: object
                      tolerations:
                        description: tolerations is a list of tolerations applied
                          to the relevant kind of pods See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                          for more info. These are additional tolerations other than
                          default ones.
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match.
                                Empty means match all taint effects. When specified,
                                allowed values are NoSchedule, PreferNoSchedule and
                                NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration
                                applies to. Empty means match all taint keys. If the
                                key is empty, operator must be Exists; this combination
                                means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship
                                to the value. Valid operators are Exists and Equal.
                                Defaults to Equal. Exists is equivalent to wildcard
                                for value, so that a pod can tolerate all taints of
                                a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period
                                of time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the
                                taint forever (do not evict). Zero and negative values
                                will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration
                                matches to. If the operator is Exists, the value should
                                be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                    type: object
                  replicas:
                    description: 'replicas indicates how many replicas should be created
                      for each KubeVirt infrastructure component (like virt-api or
                      virt-controller). Defaults to 2. WARNING: this is an advanced
                      feature that prevents auto-scaling for core kubevirt components.
                      Please use with caution!'
                    type: integer
                type: object
            type: object
          status:
            description: KubeVirtStatus represents information pertaining to a KubeVirt
              deployment.
            properties:
              conditions:
                items:
                  description: KubeVirtCondition represents a condition of a KubeVirt
                    deployment
                  properties:
                    lastProbeTime:
                      format: date-time
                      nullable: true
                      type: string
                    lastTransitionTime:
                      format: date-time
                      nullable: true
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              defaultArchitecture:
                type: string
              generations:
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  required:
                  - group
                  - lastGeneration
                  - name
                  - resource
                  type: object
                type: array
                x-kubernetes-list-type: atomic
              observedDeploymentConfig:
                type: string
              observedDeploymentID:
                type: string
              observedGeneration:
                format: int64
                type: integer
              observedKubeVirtRegistry:
                type: string
              observedKubeVirtVersion:
                type: string
              operatorVersion:
                type: string
              outdatedVirtualMachineInstanceWorkloads:
                type: integer
              phase:
                description: KubeVirtPhase is a label for the phase of a KubeVirt
                  deployment at the current time.
                type: string
              targetDeploymentConfig:
                type: string
              targetDeploymentID:
                type: string
              targetKubeVirtRegistry:
                type: string
              targetKubeVirtVersion:
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - jsonPath: .status.phase
      name: Phase
      type: string
    name: v1alpha3
    schema:
      openAPIV3Schema:
        description: KubeVirt represents the object deploying all KubeVirt resources
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              certificateRotateStrategy:
                properties:
                  selfSigned:
                    properties:
                      ca:
                        description: CA configuration CA certs are kept in the CA
                          bundle as long as they are valid
                        properties:
                          duration:
                            description: The requested 'duration' (i.e. lifetime)
                              of the Certificate.
                            type: string
                          renewBefore:
                            description: The amount of time before the currently issued
                              certificate's "notAfter" time that we will begin to
                              attempt to renew the certificate.
                            type: string
                        type: object
                      caOverlapInterval:
                        description: Deprecated. Use CA.Duration and CA.RenewBefore
                          instead
                        type: string
                      caRotateInterval:
                        description: Deprecated. Use CA.Duration instead
                        type: string
                      certRotateInterval:
                        description: Deprecated. Use Server.Duration instead
                        type: string
                      server:
                        description: Server configuration Certs are rotated and discarded
                        properties:
                          duration:
                            description: The requested 'duration' (i.e. lifetime)
                              of the Certificate.
                            type: string
                          renewBefore:
                            description: The amount of time before the currently issued
                              certificate's "notAfter" time that we will begin to
                              attempt to renew the certificate.
                            type: string
                        type: object
                    type: object
                type: object
              configuration:
                description: holds kubevirt configurations. same as the virt-configMap
                properties:
                  additionalGuestMemoryOverheadRatio:
                    description: AdditionalGuestMemoryOverheadRatio can be used to
                      increase the virtualization infrastructure overhead. This is
                      useful, since the calculation of this overhead is not accurate
                      and cannot be entirely known in advance. The ratio that is being
                      set determines by which factor to increase the overhead calculated
                      by Kubevirt. A higher ratio means that the VMs would be less
                      compromised by node pressures, but would mean that fewer VMs
                      could be scheduled to a node. If not set, the default is 1.
                    type: string
                  apiConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                  architectureConfiguration:
                    properties:
                      amd64:
                        properties:
                          emulatedMachines:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          machineType:
                            type: string
                          ovmfPath:
                            type: string
                        type: object
                      arm64:
                        properties:
                          emulatedMachines:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          machineType:
                            type: string
                          ovmfPath:
                            type: string
                        type: object
                      defaultArchitecture:
                        type: string
                      ppc64le:
                        properties:
                          emulatedMachines:
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          machineType:
                            type: string
                          ovmfPath:
                            type: string
                        type: object
                    type: object
                  autoCPULimitNamespaceLabelSelector:
                    description: When set, AutoCPULimitNamespaceLabelSelector will
                      set a CPU limit on virt-launcher for VMIs running inside namespaces
                      that match the label selector. The CPU limit will equal the
                      number of requested vCPUs. This setting does not apply to VMIs
                      with dedicated CPUs.
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  controllerConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                  cpuModel:
                    type: string
                  cpuRequest:
                    anyOf:
                    - type: integer
                    - type: string
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  defaultRuntimeClass:
                    type: string
                  developerConfiguration:
                    description: DeveloperConfiguration holds developer options
                    properties:
                      cpuAllocationRatio:
                        description: 'For each requested virtual CPU, CPUAllocationRatio
                          defines how much physical CPU to request per VMI from the
                          hosting node. The value is in fraction of a CPU thread (or
                          core on non-hyperthreaded nodes). For example, a value of
                          1 means 1 physical CPU thread per VMI CPU thread. A value
                          of 100 would be 1% of a physical thread allocated for each
                          requested VMI thread. This option has no effect on VMIs
                          that request dedicated CPUs. More information at: https://kubevirt.io/user-guide/operations/node_overcommit/#node-cpu-allocation-ratio
                          Defaults to 10'
                        type: integer
                      diskVerification:
                        description: DiskVerification holds container disks verification
                          limits
                        properties:
                          memoryLimit:
                            anyOf:
                            - type: integer
                            - type: string
                            pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                            x-kubernetes-int-or-string: true
                        required:
                        - memoryLimit
                        type: object
                      featureGates:
                        description: FeatureGates is the list of experimental features
                          to enable. Defaults to none
                        items:
                          type: string
                        type: array
                      logVerbosity:
                        description: LogVerbosity sets log verbosity level of  various
                          components
                        properties:
                          nodeVerbosity:
                            additionalProperties:
                              type: integer
                            description: NodeVerbosity represents a map of nodes with
                              a specific verbosity level
                            type: object
                          virtAPI:
                            type: integer
                          virtController:
                            type: integer
                          virtHandler:
                            type: integer
                          virtLauncher:
                            type: integer
                          virtOperator:
                            type: integer
                        type: object
                      memoryOvercommit:
                        description: MemoryOvercommit is the percentage of memory
                          we want to give VMIs compared to the amount given to its
                          parent pod (virt-launcher). For example, a value of 102
                          means the VMI will "see" 2% more memory than its parent
                          pod. Values under 100 are effectively "undercommits". Overcommits
                          can lead to memory exhaustion, which in turn can lead to
                          crashes. Use carefully. Defaults to 100
                        type: integer
                      minimumClusterTSCFrequency:
                        description: Allow overriding the automatically determined
                          minimum TSC frequency of the cluster and fixate the minimum
                          to this frequency.
                        format: int64
                        type: integer
                      minimumReservePVCBytes:
                        description: MinimumReservePVCBytes is the amount of space,
                          in bytes, to leave unused on disks. Defaults to 131072 (128KiB)
                        format: int64
                        type: integer
                      nodeSelectors:
                        additionalProperties:
                          type: string
                        description: NodeSelectors allows restricting VMI creation
                          to nodes that match a set of labels. Defaults to none
                        type: object
                      pvcTolerateLessSpaceUpToPercent:
                        description: LessPVCSpaceToleration determines how much smaller,
                          in percentage, disk PVCs are allowed to be compared to the
                          requested size (to account for various overheads). Defaults
                          to 10
                        type: integer
                      useEmulation:
                        description: UseEmulation can be set to true to allow fallback
                          to software emulation in case hardware-assisted emulation
                          is not available. Defaults to false
                        type: boolean
                    type: object
                  emulatedMachines:
                    items:
                      type: string
                    type: array
                  evictionStrategy:
                    description: EvictionStrategy defines at the cluster level if
                      the VirtualMachineInstance should be migrated instead of shut-off
                      in case of a node drain. If the VirtualMachineInstance specific
                      field is set it overrides the cluster level one.
                    type: string
                  handlerConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                  imagePullPolicy:
                    description: PullPolicy describes a policy for if/when to pull
                      a container image
                    type: string
                  ksmConfiguration:
                    description: KSMConfiguration holds the information regarding
                      the enabling the KSM in the nodes (if available).
                    properties:
                      nodeLabelSelector:
                        description: NodeLabelSelector is a selector that filters
                          in which nodes the KSM will be enabled. Empty NodeLabelSelector
                          will enable ksm for every node.
                        properties:
                          matchExpressions:
                            description: matchExpressions is a list of label selector
                              requirements. The requirements are ANDed.
                            items:
                              description: A label selector requirement is a selector
                                that contains values, a key, and an operator that
                                relates the key and values.
                              properties:
                                key:
                                  description: key is the label key that the selector
                                    applies to.
                                  type: string
                                operator:
                                  description: operator represents a key's relationship
                                    to a set of values. Valid operators are In, NotIn,
                                    Exists and DoesNotExist.
                                  type: string
                                values:
                                  description: values is an array of string values.
                                    If the operator is In or NotIn, the values array
                                    must be non-empty. If the operator is Exists or
                                    DoesNotExist, the values array must be empty.
                                    This array is replaced during a strategic merge
                                    patch.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              type: string
                            description: matchLabels is a map of {key,value} pairs.
                              A single {key,value} in the matchLabels map is equivalent
                              to an element of matchExpressions, whose key field is
                              "key", the operator is "In", and the values array contains
                              only "value". The requirements are ANDed.
                            type: object
                        type: object
                    type: object
                  liveUpdateConfiguration:
                    description: LiveUpdateConfiguration holds defaults for live update
                      features
                    properties:
                      maxCpuSockets:
                        description: MaxCpuSockets holds the maximum amount of sockets
                          that can be hotplugged
                        format: int32
                        type: integer
                      maxGuest:
                        anyOf:
                        - type: integer
                        - type: string
                        description: MaxGuest defines the maximum amount memory that
                          can be allocated to the guest using hotplug.
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      maxHotplugRatio:
                        description: 'MaxHotplugRatio is the ratio used to define
                          the max amount of a hotplug resource that can be made available
                          to a VM when the specific Max* setting is not defined (MaxCpuSockets,
                          MaxGuest) Example: VM is configured with 512Mi of guest
                          memory, if MaxGuest is not defined and MaxHotplugRatio is
                          2 then MaxGuest = 1Gi defaults to 4'
                        format: int32
                        type: integer
                    type: object
                  machineType:
                    description: Deprecated. Use architectureConfiguration instead.
                    type: string
                  mediatedDevicesConfiguration:
                    description: MediatedDevicesConfiguration holds information about
                      MDEV types to be defined, if available
                    properties:
                      mediatedDeviceTypes:
                        items:
                          type: string
                        type: array
                        x-kubernetes-list-type: atomic
                      mediatedDevicesTypes:
                        description: Deprecated. Use mediatedDeviceTypes instead.
                        items:
                          type: string
                        type: array
                        x-kubernetes-list-type: atomic
                      nodeMediatedDeviceTypes:
                        items:
                          description: NodeMediatedDeviceTypesConfig holds information
                            about MDEV types to be defined in a specific node that
                            matches the NodeSelector field.
                          properties:
                            mediatedDeviceTypes:
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            mediatedDevicesTypes:
                              description: Deprecated. Use mediatedDeviceTypes instead.
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            nodeSelector:
                              additionalProperties:
                                type: string
                              description: 'NodeSelector is a selector which must
                                be true for the vmi to fit on a node. Selector which
                                must match a node''s labels for the vmi to be scheduled
                                on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                              type: object
                          required:
                          - nodeSelector
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                    type: object
                  memBalloonStatsPeriod:
                    format: int32
                    type: integer
                  migrations:
                    description: MigrationConfiguration holds migration options. Can
                      be overridden for specific groups of VMs though migration policies.
                      Visit https://kubevirt.io/user-guide/operations/migration_policies/
                      for more information.
                    properties:
                      allowAutoConverge:
                        description: AllowAutoConverge allows the platform to compromise
                          performance/availability of VMIs to guarantee successful
                          VMI live migrations. Defaults to false
                        type: boolean
                      allowPostCopy:
                        description: AllowPostCopy enables post-copy live migrations.
                          Such migrations allow even the busiest VMIs to successfully
                          live-migrate. However, events like a network failure can
                          cause a VMI crash. If set to true, migrations will still
                          start in pre-copy, but switch to post-copy when CompletionTimeoutPerGiB
                          triggers. Defaults to false
                        type: boolean
                      bandwidthPerMigration:
                        anyOf:
                        - type: integer
                        - type: string
                        description: BandwidthPerMigration limits the amount of network
                          bandwidth live migrations are allowed to use. The value
                          is in quantity per second. Defaults to 0 (no limit)
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        x-kubernetes-int-or-string: true
                      completionTimeoutPerGiB:
                        description: CompletionTimeoutPerGiB is the maximum number
                          of seconds per GiB a migration is allowed to take. If a
                          live-migration takes longer to migrate than this value multiplied
                          by the size of the VMI, the migration will be cancelled,
                          unless AllowPostCopy is true. Defaults to 800
                        format: int64
                        type: integer
                      disableTLS:
                        description: When set to true, DisableTLS will disable the
                          additional layer of live migration encryption provided by
                          KubeVirt. This is usually a bad idea. Defaults to false
                        type: boolean
                      matchSELinuxLevelOnMigration:
                        description: By default, the SELinux level of target virt-launcher
                          pods is forced to the level of the source virt-launcher.
                          When set to true, MatchSELinuxLevelOnMigration lets the
                          CRI auto-assign a random level to the target. That will
                          ensure the target virt-launcher doesn't share categories
                          with another pod on the node. However, migrations will fail
                          when using RWX volumes that don't automatically deal with
                          SELinux levels.
                        type: boolean
                      network:
                        description: Network is the name of the CNI network to use
                          for live migrations. By default, migrations go through the
                          pod network.
                        type: string
                      nodeDrainTaintKey:
                        description: 'NodeDrainTaintKey defines the taint key that
                          indicates a node should be drained. Note: this option relies
                          on the deprecated node taint feature. Default: kubevirt.io/drain'
                        type: string
                      parallelMigrationsPerCluster:
                        description: ParallelMigrationsPerCluster is the total number
                          of concurrent live migrations allowed cluster-wide. Defaults
                          to 5
                        format: int32
                        type: integer
                      parallelOutboundMigrationsPerNode:
                        description: ParallelOutboundMigrationsPerNode is the maximum
                          number of concurrent outgoing live migrations allowed per
                          node. Defaults to 2
                        format: int32
                        type: integer
                      progressTimeout:
                        description: ProgressTimeout is the maximum number of seconds
                          a live migration is allowed to make no progress. Hitting
                          this timeout means a migration transferred 0 data for that
                          many seconds. The migration is then considered stuck and
                          therefore cancelled. Defaults to 150
                        format: int64
                        type: integer
                      unsafeMigrationOverride:
                        description: UnsafeMigrationOverride allows live migrations
                          to occur even if the compatibility check indicates the migration
                          will be unsafe to the guest. Defaults to false
                        type: boolean
                    type: object
                  minCPUModel:
                    type: string
                  network:
                    description: NetworkConfiguration holds network options
                    properties:
                      binding:
                        additionalProperties:
                          properties:
                            domainAttachmentType:
                              description: 'DomainAttachmentType is a standard domain
                                network attachment method kubevirt supports. Supported
                                values: "tap". The standard domain attachment can
                                be used instead or in addition to the sidecarImage.
                                version: 1alphav1'
                              type: string
                            migration:
                              description: 'Migration means the VM using the plugin
                                can be safely migrated version: 1alphav1'
                              properties:
                                method:
                                  description: 'Method defines a pre-defined migration
                                    methodology version: 1alphav1'
                                  type: string
                              type: object
                            networkAttachmentDefinition:
                              description: 'NetworkAttachmentDefinition references
                                to a NetworkAttachmentDefinition CR object. Format:
                                <name>, <namespace>/<name>. If namespace is not specified,
                                VMI namespace is assumed. version: 1alphav1'
                              type: string
                            sidecarImage:
                              description: 'SidecarImage references a container image
                                that runs in the virt-launcher pod. The sidecar handles
                                (libvirt) domain configuration and optional services.
                                version: 1alphav1'
                              type: string
                          type: object
                        type: object
                      defaultNetworkInterface:
                        type: string
                      permitBridgeInterfaceOnPodNetwork:
                        type: boolean
                      permitSlirpInterface:
                        type: boolean
                    type: object
                  obsoleteCPUModels:
                    additionalProperties:
                      type: boolean
                    type: object
                  ovmfPath:
                    type: string
                  permittedHostDevices:
                    description: PermittedHostDevices holds information about devices
                      allowed for passthrough
                    properties:
                      mediatedDevices:
                        items:
                          description: MediatedHostDevice represents a host mediated
                            device allowed for passthrough
                          properties:
                            externalResourceProvider:
                              type: boolean
                            mdevNameSelector:
                              type: string
                            resourceName:
                              type: string
                          required:
                          - mdevNameSelector
                          - resourceName
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                      pciHostDevices:
                        items:
                          description: PciHostDevice represents a host PCI device
                            allowed for passthrough
                          properties:
                            externalResourceProvider:
                              description: If true, KubeVirt will leave the allocation
                                and monitoring to an external device plugin
                              type: boolean
                            pciVendorSelector:
                              description: The vendor_id:product_id tuple of the PCI
                                device
                              type: string
                            resourceName:
                              description: The name of the resource that is representing
                                the device. Exposed by a device plugin and requested
                                by VMs. Typically of the form vendor.com/product_name
                              type: string
                          required:
                          - pciVendorSelector
                          - resourceName
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                      usb:
                        items:
                          properties:
                            externalResourceProvider:
                              description: If true, KubeVirt will leave the allocation
                                and monitoring to an external device plugin
                              type: boolean
                            resourceName:
                              description: 'Identifies the list of USB host devices.
                                e.g: kubevirt.io/storage, kubevirt.io/bootable-usb,
                                etc'
                              type: string
                            selectors:
                              items:
                                properties:
                                  product:
                                    type: string
                                  vendor:
                                    type: string
                                required:
                                - product
                                - vendor
                                type: object
                              type: array
                              x-kubernetes-list-type: atomic
                          required:
                          - resourceName
                          type: object
                        type: array
                        x-kubernetes-list-type: atomic
                    type: object
                  seccompConfiguration:
                    description: SeccompConfiguration holds Seccomp configuration
                      for Kubevirt components
                    properties:
                      virtualMachineInstanceProfile:
                        description: VirtualMachineInstanceProfile defines what profile
                          should be used with virt-launcher. Defaults to none
                        properties:
                          customProfile:
                            description: CustomProfile allows to request arbitrary
                              profile for virt-launcher
                            properties:
                              localhostProfile:
                                type: string
                              runtimeDefaultProfile:
                                type: boolean
                            type: object
                        type: object
                    type: object
                  selinuxLauncherType:
                    type: string
                  smbios:
                    properties:
                      family:
                        type: string
                      manufacturer:
                        type: string
                      product:
                        type: string
                      sku:
                        type: string
                      version:
                        type: string
                    type: object
                  supportContainerResources:
                    description: SupportContainerResources specifies the resource
                      requirements for various types of supporting containers such
                      as container disks/virtiofs/sidecars and hotplug attachment
                      pods. If omitted a sensible default will be supplied.
                    items:
                      description: SupportContainerResources are used to specify the
                        cpu/memory request and limits for the containers that support
                        various features of Virtual Machines. These containers are
                        usually idle and don't require a lot of memory or cpu.
                      properties:
                        resources:
                          description: ResourceRequirements describes the compute
                            resource requirements.
                          properties:
                            claims:
                              description: "Claims lists the names of resources, defined
                                in spec.resourceClaims, that are used by this container.
                                \n This is an alpha field and requires enabling the
                                DynamicResourceAllocation feature gate. \n This field
                                is immutable. It can only be set for containers."
                              items:
                                description: ResourceClaim references one entry in
                                  PodSpec.ResourceClaims.
                                properties:
                                  name:
                                    description: Name must match the name of one entry
                                      in pod.spec.resourceClaims of the Pod where
                                      this field is used. It makes that resource available
                                      inside a container.
                                    type: string
                                required:
                                - name
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                              - name
                              x-kubernetes-list-type: map
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of
                                compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount
                                of compute resources required. If Requests is omitted
                                for a container, it defaults to Limits if that is
                                explicitly specified, otherwise to an implementation-defined
                                value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                        type:
                          type: string
                      required:
                      - resources
                      - type
                      type: object
                    type: array
                    x-kubernetes-list-map-keys:
                    - type
                    x-kubernetes-list-type: map
                  supportedGuestAgentVersions:
                    description: deprecated
                    items:
                      type: string
                    type: array
                  tlsConfiguration:
                    description: TLSConfiguration holds TLS options
                    properties:
                      ciphers:
                        items:
                          type: string
                        type: array
                        x-kubernetes-list-type: set
                      minTLSVersion:
                        description: "MinTLSVersion is a way to specify the minimum
                          protocol version that is acceptable for TLS connections.
                          Protocol versions are based on the following most common
                          TLS configurations: \n   https://ssl-config.mozilla.org/
                          \n Note that SSLv3.0 is not a supported protocol version
                          due to well known vulnerabilities such as POODLE: https://en.wikipedia.org/wiki/POODLE"
                        enum:
                        - VersionTLS10
                        - VersionTLS11
                        - VersionTLS12
                        - VersionTLS13
                        type: string
                    type: object
                  virtualMachineInstancesPerNode:
                    type: integer
                  virtualMachineOptions:
                    description: VirtualMachineOptions holds the cluster level information
                      regarding the virtual machine.
                    properties:
                      disableFreePageReporting:
                        description: DisableFreePageReporting disable the free page
                          reporting of memory balloon device https://libvirt.org/formatdomain.html#memory-balloon-device.
                          This will have effect only if AutoattachMemBalloon is not
                          false and the vmi is not requesting any high performance
                          feature (dedicatedCPU/realtime/hugePages), in which free
                          page reporting is always disabled.
                        type: object
                      disableSerialConsoleLog:
                        description: DisableSerialConsoleLog disables logging the
                          auto-attached default serial console. If not set, serial
                          console logs will be written to a file and then streamed
                          from a container named 'guest-console-log'. The value can
                          be individually overridden for each VM, not relevant if
                          AutoattachSerialConsole is disabled.
                        type: object
                    type: object
                  vmRolloutStrategy:
                    description: VMRolloutStrategy defines how changes to a VM object
                      propagate to its VMI
                    enum:
                    - Stage
                    - LiveUpdate
                    nullable: true
                    type: string
                  vmStateStorageClass:
                    description: VMStateStorageClass is the name of the storage class
                      to use for the PVCs created to preserve VM state, like TPM.
                      The storage class must support RWX in filesystem mode.
                    type: string
                  webhookConfiguration:
                    description: ReloadableComponentConfiguration holds all generic
                      k8s configuration options which can be reloaded by components
                      without requiring a restart.
                    properties:
                      restClient:
                        description: RestClient can be used to tune certain aspects
                          of the k8s client in use.
                        properties:
                          rateLimiter:
                            description: RateLimiter allows selecting and configuring
                              different rate limiters for the k8s client.
                            properties:
                              tokenBucketRateLimiter:
                                properties:
                                  burst:
                                    description: Maximum burst for throttle. If it's
                                      zero, the component default will be used
                                    type: integer
                                  qps:
                                    description: QPS indicates the maximum QPS to
                                      the apiserver from this client. If it's zero,
                                      the component default will be used
                                    type: number
                                required:
                                - burst
                                - qps
                                type: object
                            type: object
                        type: object
                    type: object
                type: object
              customizeComponents:
                properties:
                  flags:
                    description: Configure the value used for deployment and daemonset
                      resources
                    properties:
                      api:
                        additionalProperties:
                          type: string
                        type: object
                      controller:
                        additionalProperties:
                          type: string
                        type: object
                      handler:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  patches:
                    items:
                      properties:
                        patch:
                          type: string
                        resourceName:
                          minLength: 1
                          type: string
                        resourceType:
                          minLength: 1
                          type: string
                        type:
                          type: string
                      required:
                      - patch
                      - resourceName
                      - resourceType
                      - type
                      type: object
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
              imagePullPolicy:
                description: The ImagePullPolicy to use.
                type: string
              imagePullSecrets:
                description: The imagePullSecrets to pull the container images from
                  Defaults to none
                items:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                type: array
                x-kubernetes-list-type: atomic
              imageRegistry:
                description: The image registry to pull the container images from
                  Defaults to the same registry the operator's container image is
                  pulled from.
                type: string
              imageTag:
                description: The image tag to use for the continer images installed.
                  Defaults to the same tag as the operator's container image.
                type: string
              infra:
                description: selectors and tolerations that should apply to KubeVirt
                  infrastructure components
                properties:
                  nodePlacement:
                    description: nodePlacement describes scheduling configuration
                      for specific KubeVirt components
                    properties:
                      affinity:
                        description: affinity enables pod affinity/anti-affinity placement
                          expanding the types of constraints that can be expressed
                          with nodeSelector. affinity is going to be applied to the
                          relevant kind of pods in parallel with nodeSelector See
                          https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
                        properties:
                          nodeAffinity:
                            description: Describes node affinity scheduling rules
                              for the pod.
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node matches the corresponding matchExpressions;
                                  the node(s) with the highest sum are the most preferred.
                                items:
                                  description: An empty preferred scheduling term
                                    matches all objects with implicit weight 0 (i.e.
                                    it's a no-op). A null preferred scheduling term
                                    matches no objects (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A node selector term, associated
                                        with the corresponding weight.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    weight:
                                      description: Weight associated with matching
                                        the corresponding nodeSelectorTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - preference
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to an update), the system may or may not try
                                  to eventually evict the pod from its node.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector
                                      terms. The terms are ORed.
                                    items:
                                      description: A null or empty node selector term
                                        matches no objects. The requirements of them
                                        are ANDed. The TopologySelectorTerm type implements
                                        a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                            type: object
                          podAffinity:
                            description: Describes pod affinity scheduling rules (e.g.
                              co-locate this pod in the same node, zone, etc. as some
                              other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to a pod label update), the system may or may
                                  not try to eventually evict the pod from its node.
                                  When there are multiple elements, the lists of nodes
                                  corresponding to each podAffinityTerm are intersected,
                                  i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                          podAntiAffinity:
                            description: Describes pod anti-affinity scheduling rules
                              (e.g. avoid putting this pod in the same node, zone,
                              etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the anti-affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling anti-affinity
                                  expressions, etc.), compute a sum by iterating through
                                  the elements of this field and adding "weight" to
                                  the sum if the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the anti-affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  anti-affinity requirements specified by this field
                                  cease to be met at some point during pod execution
                                  (e.g. due to a pod label update), the system may
                                  or may not try to eventually evict the pod from
                                  its node. When there are multiple elements, the
                                  lists of nodes corresponding to each podAffinityTerm
                                  are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: 'nodeSelector is the node selector applied to
                          the relevant kind of pods It specifies a map of key-value
                          pairs: for the pod to be eligible to run on a node, the
                          node must have each of the indicated key-value pairs as
                          labels (it can have additional labels as well). See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector'
                        type: object
                      tolerations:
                        description: tolerations is a list of tolerations applied
                          to the relevant kind of pods See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                          for more info. These are additional tolerations other than
                          default ones.
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match.
                                Empty means match all taint effects. When specified,
                                allowed values are NoSchedule, PreferNoSchedule and
                                NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration
                                applies to. Empty means match all taint keys. If the
                                key is empty, operator must be Exists; this combination
                                means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship
                                to the value. Valid operators are Exists and Equal.
                                Defaults to Equal. Exists is equivalent to wildcard
                                for value, so that a pod can tolerate all taints of
                                a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period
                                of time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the
                                taint forever (do not evict). Zero and negative values
                                will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration
                                matches to. If the operator is Exists, the value should
                                be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                    type: object
                  replicas:
                    description: 'replicas indicates how many replicas should be created
                      for each KubeVirt infrastructure component (like virt-api or
                      virt-controller). Defaults to 2. WARNING: this is an advanced
                      feature that prevents auto-scaling for core kubevirt components.
                      Please use with caution!'
                    type: integer
                type: object
              monitorAccount:
                description: The name of the Prometheus service account that needs
                  read-access to KubeVirt endpoints Defaults to prometheus-k8s
                type: string
              monitorNamespace:
                description: The namespace Prometheus is deployed in Defaults to openshift-monitor
                type: string
              productComponent:
                description: Designate the apps.kubevirt.io/component label for KubeVirt
                  components. Useful if KubeVirt is included as part of a product.
                  If ProductComponent is not specified, the component label default
                  value is kubevirt.
                type: string
              productName:
                description: Designate the apps.kubevirt.io/part-of label for KubeVirt
                  components. Useful if KubeVirt is included as part of a product.
                  If ProductName is not specified, the part-of label will be omitted.
                type: string
              productVersion:
                description: Designate the apps.kubevirt.io/version label for KubeVirt
                  components. Useful if KubeVirt is included as part of a product.
                  If ProductVersion is not specified, KubeVirt's version will be used.
                type: string
              serviceMonitorNamespace:
                description: The namespace the service monitor will be deployed  When
                  ServiceMonitorNamespace is set, then we'll install the service monitor
                  object in that namespace otherwise we will use the monitoring namespace.
                type: string
              uninstallStrategy:
                description: Specifies if kubevirt can be deleted if workloads are
                  still present. This is mainly a precaution to avoid accidental data
                  loss
                type: string
              workloadUpdateStrategy:
                description: WorkloadUpdateStrategy defines at the cluster level how
                  to handle automated workload updates
                properties:
                  batchEvictionInterval:
                    description: "BatchEvictionInterval Represents the interval to
                      wait before issuing the next batch of shutdowns \n Defaults
                      to 1 minute"
                    type: string
                  batchEvictionSize:
                    description: "BatchEvictionSize Represents the number of VMIs
                      that can be forced updated per the BatchShutdownInteral interval
                      \n Defaults to 10"
                    type: integer
                  workloadUpdateMethods:
                    description: "WorkloadUpdateMethods defines the methods that can
                      be used to disrupt workloads during automated workload updates.
                      When multiple methods are present, the least disruptive method
                      takes precedence over more disruptive methods. For example if
                      both LiveMigrate and Shutdown methods are listed, only VMs which
                      are not live migratable will be restarted/shutdown \n An empty
                      list defaults to no automated workload updating"
                    items:
                      type: string
                    type: array
                    x-kubernetes-list-type: atomic
                type: object
              workloads:
                description: selectors and tolerations that should apply to KubeVirt
                  workloads
                properties:
                  nodePlacement:
                    description: nodePlacement describes scheduling configuration
                      for specific KubeVirt components
                    properties:
                      affinity:
                        description: affinity enables pod affinity/anti-affinity placement
                          expanding the types of constraints that can be expressed
                          with nodeSelector. affinity is going to be applied to the
                          relevant kind of pods in parallel with nodeSelector See
                          https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
                        properties:
                          nodeAffinity:
                            description: Describes node affinity scheduling rules
                              for the pod.
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node matches the corresponding matchExpressions;
                                  the node(s) with the highest sum are the most preferred.
                                items:
                                  description: An empty preferred scheduling term
                                    matches all objects with implicit weight 0 (i.e.
                                    it's a no-op). A null preferred scheduling term
                                    matches no objects (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A node selector term, associated
                                        with the corresponding weight.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    weight:
                                      description: Weight associated with matching
                                        the corresponding nodeSelectorTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - preference
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to an update), the system may or may not try
                                  to eventually evict the pod from its node.
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector
                                      terms. The terms are ORed.
                                    items:
                                      description: A null or empty node selector term
                                        matches no objects. The requirements of them
                                        are ANDed. The TopologySelectorTerm type implements
                                        a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: The label key that the
                                                  selector applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn,
                                                  the values array must be non-empty.
                                                  If the operator is Exists or DoesNotExist,
                                                  the values array must be empty.
                                                  If the operator is Gt or Lt, the
                                                  values array must have a single
                                                  element, which will be interpreted
                                                  as an integer. This array is replaced
                                                  during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                            type: object
                          podAffinity:
                            description: Describes pod affinity scheduling rules (e.g.
                              co-locate this pod in the same node, zone, etc. as some
                              other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling affinity expressions,
                                  etc.), compute a sum by iterating through the elements
                                  of this field and adding "weight" to the sum if
                                  the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  affinity requirements specified by this field cease
                                  to be met at some point during pod execution (e.g.
                                  due to a pod label update), the system may or may
                                  not try to eventually evict the pod from its node.
                                  When there are multiple elements, the lists of nodes
                                  corresponding to each podAffinityTerm are intersected,
                                  i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                          podAntiAffinity:
                            description: Describes pod anti-affinity scheduling rules
                              (e.g. avoid putting this pod in the same node, zone,
                              etc. as some other pod(s)).
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule
                                  pods to nodes that satisfy the anti-affinity expressions
                                  specified by this field, but it may choose a node
                                  that violates one or more of the expressions. The
                                  node that is most preferred is the one with the
                                  greatest sum of weights, i.e. for each node that
                                  meets all of the scheduling requirements (resource
                                  request, requiredDuringScheduling anti-affinity
                                  expressions, etc.), compute a sum by iterating through
                                  the elements of this field and adding "weight" to
                                  the sum if the node has pods which matches the corresponding
                                  podAffinityTerm; the node(s) with the highest sum
                                  are the most preferred.
                                items:
                                  description: The weights of all of the matched WeightedPodAffinityTerm
                                    fields are added per-node to find the most preferred
                                    node(s)
                                  properties:
                                    podAffinityTerm:
                                      description: Required. A pod affinity term,
                                        associated with the corresponding weight.
                                      properties:
                                        labelSelector:
                                          description: A label query over a set of
                                            resources, in this case pods.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaceSelector:
                                          description: A label query over the set
                                            of namespaces that the term applies to.
                                            The term is applied to the union of the
                                            namespaces selected by this field and
                                            the ones listed in the namespaces field.
                                            null selector and null or empty namespaces
                                            list means "this pod's namespace". An
                                            empty selector ({}) matches all namespaces.
                                          properties:
                                            matchExpressions:
                                              description: matchExpressions is a list
                                                of label selector requirements. The
                                                requirements are ANDed.
                                              items:
                                                description: A label selector requirement
                                                  is a selector that contains values,
                                                  a key, and an operator that relates
                                                  the key and values.
                                                properties:
                                                  key:
                                                    description: key is the label
                                                      key that the selector applies
                                                      to.
                                                    type: string
                                                  operator:
                                                    description: operator represents
                                                      a key's relationship to a set
                                                      of values. Valid operators are
                                                      In, NotIn, Exists and DoesNotExist.
                                                    type: string
                                                  values:
                                                    description: values is an array
                                                      of string values. If the operator
                                                      is In or NotIn, the values array
                                                      must be non-empty. If the operator
                                                      is Exists or DoesNotExist, the
                                                      values array must be empty.
                                                      This array is replaced during
                                                      a strategic merge patch.
                                                    items:
                                                      type: string
                                                    type: array
                                                required:
                                                - key
                                                - operator
                                                type: object
                                              type: array
                                            matchLabels:
                                              additionalProperties:
                                                type: string
                                              description: matchLabels is a map of
                                                {key,value} pairs. A single {key,value}
                                                in the matchLabels map is equivalent
                                                to an element of matchExpressions,
                                                whose key field is "key", the operator
                                                is "In", and the values array contains
                                                only "value". The requirements are
                                                ANDed.
                                              type: object
                                          type: object
                                        namespaces:
                                          description: namespaces specifies a static
                                            list of namespace names that the term
                                            applies to. The term is applied to the
                                            union of the namespaces listed in this
                                            field and the ones selected by namespaceSelector.
                                            null or empty namespaces list and null
                                            namespaceSelector means "this pod's namespace".
                                          items:
                                            type: string
                                          type: array
                                        topologyKey:
                                          description: This pod should be co-located
                                            (affinity) or not co-located (anti-affinity)
                                            with the pods matching the labelSelector
                                            in the specified namespaces, where co-located
                                            is defined as running on a node whose
                                            value of the label with key topologyKey
                                            matches that of any node on which any
                                            of the selected pods is running. Empty
                                            topologyKey is not allowed.
                                          type: string
                                      required:
                                      - topologyKey
                                      type: object
                                    weight:
                                      description: weight associated with matching
                                        the corresponding podAffinityTerm, in the
                                        range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - podAffinityTerm
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: If the anti-affinity requirements specified
                                  by this field are not met at scheduling time, the
                                  pod will not be scheduled onto the node. If the
                                  anti-affinity requirements specified by this field
                                  cease to be met at some point during pod execution
                                  (e.g. due to a pod label update), the system may
                                  or may not try to eventually evict the pod from
                                  its node. When there are multiple elements, the
                                  lists of nodes corresponding to each podAffinityTerm
                                  are intersected, i.e. all terms must be satisfied.
                                items:
                                  description: Defines a set of pods (namely those
                                    matching the labelSelector relative to the given
                                    namespace(s)) that this pod should be co-located
                                    (affinity) or not co-located (anti-affinity) with,
                                    where co-located is defined as running on a node
                                    whose value of the label with key <topologyKey>
                                    matches that of any node on which a pod of the
                                    set of pods is running
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                type: array
                            type: object
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: 'nodeSelector is the node selector applied to
                          the relevant kind of pods It specifies a map of key-value
                          pairs: for the pod to be eligible to run on a node, the
                          node must have each of the indicated key-value pairs as
                          labels (it can have additional labels as well). See https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector'
                        type: object
                      tolerations:
                        description: tolerations is a list of tolerations applied
                          to the relevant kind of pods See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
                          for more info. These are additional tolerations other than
                          default ones.
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match.
                                Empty means match all taint effects. When specified,
                                allowed values are NoSchedule, PreferNoSchedule and
                                NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration
                                applies to. Empty means match all taint keys. If the
                                key is empty, operator must be Exists; this combination
                                means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship
                                to the value. Valid operators are Exists and Equal.
                                Defaults to Equal. Exists is equivalent to wildcard
                                for value, so that a pod can tolerate all taints of
                                a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period
                                of time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the
                                taint forever (do not evict). Zero and negative values
                                will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration
                                matches to. If the operator is Exists, the value should
                                be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                    type: object
                  replicas:
                    description: 'replicas indicates how many replicas should be created
                      for each KubeVirt infrastructure component (like virt-api or
                      virt-controller). Defaults to 2. WARNING: this is an advanced
                      feature that prevents auto-scaling for core kubevirt components.
                      Please use with caution!'
                    type: integer
                type: object
            type: object
          status:
            description: KubeVirtStatus represents information pertaining to a KubeVirt
              deployment.
            properties:
              conditions:
                items:
                  description: KubeVirtCondition represents a condition of a KubeVirt
                    deployment
                  properties:
                    lastProbeTime:
                      format: date-time
                      nullable: true
                      type: string
                    lastTransitionTime:
                      format: date-time
                      nullable: true
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              defaultArchitecture:
                type: string
              generations:
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  required:
                  - group
                  - lastGeneration
                  - name
                  - resource
                  type: object
                type: array
                x-kubernetes-list-type: atomic
              observedDeploymentConfig:
                type: string
              observedDeploymentID:
                type: string
              observedGeneration:
                format: int64
                type: integer
              observedKubeVirtRegistry:
                type: string
              observedKubeVirtVersion:
                type: string
              operatorVersion:
                type: string
              outdatedVirtualMachineInstanceWorkloads:
                type: integer
              phase:
                description: KubeVirtPhase is a label for the phase of a KubeVirt
                  deployment at the current time.
                type: string
              targetDeploymentConfig:
                type: string
              targetDeploymentID:
                type: string
              targetKubeVirtRegistry:
                type: string
              targetKubeVirtVersion:
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: false
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: authentications.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: Authentication
    listKind: AuthenticationList
    plural: authentications
    singular: authentication
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Authentication provides information to configure an operator
          to manage authentication.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: consoles.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: Console
    listKind: ConsoleList
    plural: consoles
    singular: console
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Console provides a means to configure an operator to manage the
          console.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ConsoleSpec is the specification of the desired behavior
              of the Console.
            properties:
              customization:
                description: customization is used to optionally provide a small set
                  of customization options to the web console.
                properties:
                  brand:
                    description: brand is the default branding of the web console
                      which can be overridden by providing the brand field.  There
                      is a limited set of specific brand options. This field controls
                      elements of the console such as the logo. Invalid value will
                      prevent a console rollout.
                    pattern: ^$|^(ocp|origin|okd|dedicated|online|azure)$
                    type: string
                  customLogoFile:
                    description: 'customLogoFile replaces the default OpenShift logo
                      in the masthead and about dialog. It is a reference to a ConfigMap
                      in the openshift-config namespace. This can be created with
                      a command like ''oc create configmap custom-logo --from-file=/path/to/file
                      -n openshift-config''. Image size must be less than 1 MB due
                      to constraints on the ConfigMap size. The ConfigMap key should
                      include a file extension so that the console serves the file
                      with the correct MIME type. Recommended logo specifications:
                      Dimensions: Max height of 68px and max width of 200px SVG format
                      preferred'
                    properties:
                      key:
                        description: Key allows pointing to a specific key/value inside
                          of the configmap.  This is useful for logical file references.
                        type: string
                      name:
                        type: string
                    type: object
                  customProductName:
                    description: customProductName is the name that will be displayed
                      in page titles, logo alt text, and the about dialog instead
                      of the normal OpenShift product name.
                    type: string
                  documentationBaseURL:
                    description: documentationBaseURL links to external documentation
                      are shown in various sections of the web console.  Providing
                      documentationBaseURL will override the default documentation
                      URL. Invalid value will prevent a console rollout.
                    pattern: ^$|^((https):\/\/?)[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|\/?))\/$
                    type: string
                type: object
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              providers:
                description: providers contains configuration for using specific service
                  providers.
                properties:
                  statuspage:
                    description: statuspage contains ID for statuspage.io page that
                      provides status info about.
                    properties:
                      pageID:
                        description: pageID is the unique ID assigned by Statuspage
                          for your page. This must be a public page.
                        type: string
                    type: object
                type: object
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: ConsoleStatus defines the observed status of the Console.
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: dnses.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: DNS
    listKind: DNSList
    plural: dnses
    singular: dns
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: "DNS manages the CoreDNS component to provide a name resolution
          service for pods and services in the cluster. \n This supports the DNS-based
          service discovery specification: https://github.com/kubernetes/dns/blob/master/docs/specification.md
          \n More details: https://kubernetes.io/docs/tasks/administer-cluster/coredns"
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec is the specification of the desired behavior of the
              DNS.
            properties:
              servers:
                description: "servers is a list of DNS resolvers that provide name
                  query delegation for one or more subdomains outside the scope of
                  the cluster domain. If servers consists of more than one Server,
                  longest suffix match will be used to determine the Server. \n For
                  example, if there are two Servers, one for \"foo.com\" and another
                  for \"a.foo.com\", and the name query is for \"www.a.foo.com\",
                  it will be routed to the Server with Zone \"a.foo.com\". \n If this
                  field is nil, no servers are created."
                items:
                  description: Server defines the schema for a server that runs per
                    instance of CoreDNS.
                  properties:
                    forwardPlugin:
                      description: forwardPlugin defines a schema for configuring
                        CoreDNS to proxy DNS messages to upstream resolvers.
                      properties:
                        upstreams:
                          description: "upstreams is a list of resolvers to forward
                            name queries for subdomains of Zones. Upstreams are randomized
                            when more than 1 upstream is specified. Each instance
                            of CoreDNS performs health checking of Upstreams. When
                            a healthy upstream returns an error during the exchange,
                            another resolver is tried from Upstreams. Each upstream
                            is represented by an IP address or IP:port if the upstream
                            listens on a port other than 53. \n A maximum of 15 upstreams
                            is allowed per ForwardPlugin."
                          items:
                            type: string
                          maxItems: 15
                          type: array
                      type: object
                    name:
                      description: name is required and specifies a unique name for
                        the server. Name must comply with the Service Name Syntax
                        of rfc6335.
                      type: string
                    zones:
                      description: zones is required and specifies the subdomains
                        that Server is authoritative for. Zones must conform to the
                        rfc1123 definition of a subdomain. Specifying the cluster
                        domain (i.e., "cluster.local") is invalid.
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            type: object
          status:
            description: status is the most recently observed status of the DNS.
            properties:
              clusterDomain:
                description: "clusterDomain is the local cluster DNS domain suffix
                  for DNS services. This will be a subdomain as defined in RFC 1034,
                  section 3.5: https://tools.ietf.org/html/rfc1034#section-3.5 Example:
                  \"cluster.local\" \n More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service"
                type: string
              clusterIP:
                description: "clusterIP is the service IP through which this DNS is
                  made available. \n In the case of the default DNS, this will be
                  a well known IP that is used as the default nameserver for pods
                  that are using the default ClusterFirst DNS policy. \n In general,
                  this IP can be specified in a pod's spec.dnsConfig.nameservers list
                  or used explicitly when performing name resolution from within the
                  cluster. Example: dig foo.com @<service IP> \n More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                type: string
              conditions:
                description: "conditions provide information about the state of the
                  DNS on the cluster. \n These are the supported DNS conditions: \n
                  \  * Available   - True if the following conditions are met:     *
                  DNS controller daemonset is available.   - False if any of those
                  conditions are unsatisfied."
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
            required:
            - clusterDomain
            - clusterIP
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: ingresscontrollers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: IngressController
    listKind: IngressControllerList
    plural: ingresscontrollers
    singular: ingresscontroller
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: "IngressController describes a managed ingress controller for
          the cluster. The controller can service OpenShift Route and Kubernetes Ingress
          resources. \n When an IngressController is created, a new ingress controller
          deployment is created to allow external traffic to reach the services that
          expose Ingress or Route resources. Updating this resource may lead to disruption
          for public facing network connections as a new ingress controller revision
          may be rolled out. \n https://kubernetes.io/docs/concepts/services-networking/ingress-controllers
          \n Whenever possible, sensible defaults for the platform are used. See each
          field for more details."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec is the specification of the desired behavior of the
              IngressController.
            properties:
              defaultCertificate:
                description: "defaultCertificate is a reference to a secret containing
                  the default certificate served by the ingress controller. When Routes
                  don't specify their own certificate, defaultCertificate is used.
                  \n The secret must contain the following keys and data: \n   tls.crt:
                  certificate file contents   tls.key: key file contents \n If unset,
                  a wildcard certificate is automatically generated and used. The
                  certificate is valid for the ingress controller domain (and subdomains)
                  and the generated certificate's CA will be automatically integrated
                  with the cluster's trust store. \n The in-use certificate (whether
                  generated or user-specified) will be automatically integrated with
                  OpenShift's built-in OAuth server."
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              domain:
                description: "domain is a DNS name serviced by the ingress controller
                  and is used to configure multiple features: \n * For the LoadBalancerService
                  endpoint publishing strategy, domain is   used to configure DNS
                  records. See endpointPublishingStrategy. \n * When using a generated
                  default certificate, the certificate will be valid   for domain
                  and its subdomains. See defaultCertificate. \n * The value is published
                  to individual Route statuses so that end-users   know where to target
                  external DNS records. \n domain must be unique among all IngressControllers,
                  and cannot be updated. \n If empty, defaults to ingress.config.openshift.io/cluster
                  .spec.domain."
                type: string
              endpointPublishingStrategy:
                description: "endpointPublishingStrategy is used to publish the ingress
                  controller endpoints to other networks, enable load balancer integrations,
                  etc. \n If unset, the default is based on infrastructure.config.openshift.io/cluster
                  .status.platform: \n   AWS:      LoadBalancerService (with External
                  scope)   Azure:    LoadBalancerService (with External scope)   GCP:
                  \     LoadBalancerService (with External scope)   Libvirt:  HostNetwork
                  \n Any other platform types (including None) default to HostNetwork.
                  \n endpointPublishingStrategy cannot be updated."
                properties:
                  hostNetwork:
                    description: hostNetwork holds parameters for the HostNetwork
                      endpoint publishing strategy. Present only if type is HostNetwork.
                    type: object
                  loadBalancer:
                    description: loadBalancer holds parameters for the load balancer.
                      Present only if type is LoadBalancerService.
                    properties:
                      scope:
                        description: scope indicates the scope at which the load balancer
                          is exposed. Possible values are "External" and "Internal".
                        type: string
                    required:
                    - scope
                    type: object
                  private:
                    description: private holds parameters for the Private endpoint
                      publishing strategy. Present only if type is Private.
                    type: object
                  type:
                    description: "type is the publishing strategy to use. Valid values
                      are: \n * LoadBalancerService \n Publishes the ingress controller
                      using a Kubernetes LoadBalancer Service. \n In this configuration,
                      the ingress controller deployment uses container networking.
                      A LoadBalancer Service is created to publish the deployment.
                      \n See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
                      \n If domain is set, a wildcard DNS record will be managed to
                      point at the LoadBalancer Service's external name. DNS records
                      are managed only in DNS zones defined by dns.config.openshift.io/cluster
                      .spec.publicZone and .spec.privateZone. \n Wildcard DNS management
                      is currently supported only on the AWS, Azure, and GCP platforms.
                      \n * HostNetwork \n Publishes the ingress controller on node
                      ports where the ingress controller is deployed. \n In this configuration,
                      the ingress controller deployment uses host networking, bound
                      to node ports 80 and 443. The user is responsible for configuring
                      an external load balancer to publish the ingress controller
                      via the node ports. \n * Private \n Does not publish the ingress
                      controller. \n In this configuration, the ingress controller
                      deployment uses container networking, and is not explicitly
                      published. The user must manually publish the ingress controller."
                    type: string
                required:
                - type
                type: object
              namespaceSelector:
                description: "namespaceSelector is used to filter the set of namespaces
                  serviced by the ingress controller. This is useful for implementing
                  shards. \n If unset, the default is no filtering."
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              nodePlacement:
                description: "nodePlacement enables explicit control over the scheduling
                  of the ingress controller. \n If unset, defaults are used. See NodePlacement
                  for more details."
                properties:
                  nodeSelector:
                    description: "nodeSelector is the node selector applied to ingress
                      controller deployments. \n If unset, the default is: \n   beta.kubernetes.io/os:
                      linux   node-role.kubernetes.io/worker: '' \n If set, the specified
                      selector is used and replaces the default."
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                  tolerations:
                    description: "tolerations is a list of tolerations applied to
                      ingress controller deployments. \n The default is an empty list.
                      \n See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/"
                    items:
                      description: The pod this Toleration is attached to tolerates
                        any taint that matches the triple <key,value,effect> using
                        the matching operator <operator>.
                      properties:
                        effect:
                          description: Effect indicates the taint effect to match.
                            Empty means match all taint effects. When specified, allowed
                            values are NoSchedule, PreferNoSchedule and NoExecute.
                          type: string
                        key:
                          description: Key is the taint key that the toleration applies
                            to. Empty means match all taint keys. If the key is empty,
                            operator must be Exists; this combination means to match
                            all values and all keys.
                          type: string
                        operator:
                          description: Operator represents a key's relationship to
                            the value. Valid operators are Exists and Equal. Defaults
                            to Equal. Exists is equivalent to wildcard for value,
                            so that a pod can tolerate all taints of a particular
                            category.
                          type: string
                        tolerationSeconds:
                          description: TolerationSeconds represents the period of
                            time the toleration (which must be of effect NoExecute,
                            otherwise this field is ignored) tolerates the taint.
                            By default, it is not set, which means tolerate the taint
                            forever (do not evict). Zero and negative values will
                            be treated as 0 (evict immediately) by the system.
                          format: int64
                          type: integer
                        value:
                          description: Value is the taint value the toleration matches
                            to. If the operator is Exists, the value should be empty,
                            otherwise just a regular string.
                          type: string
                      type: object
                    type: array
                type: object
              replicas:
                description: replicas is the desired number of ingress controller
                  replicas. If unset, defaults to 2.
                format: int32
                type: integer
              routeSelector:
                description: "routeSelector is used to filter the set of Routes serviced
                  by the ingress controller. This is useful for implementing shards.
                  \n If unset, the default is no filtering."
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              tlsSecurityProfile:
                description: "tlsSecurityProfile specifies settings for TLS connections
                  for ingresscontrollers. \n If unset, the default is based on the
                  apiservers.config.openshift.io/cluster resource. \n Note that when
                  using the Old, Intermediate, and Modern profile types, the effective
                  profile configuration is subject to change between releases. For
                  example, given a specification to use the Intermediate profile deployed
                  on release X.Y.Z, an upgrade to release X.Y.Z+1 may cause a new
                  profile configuration to be applied to the ingress controller, resulting
                  in a rollout. \n Note that the minimum TLS version for ingress controllers
                  is 1.1, and the maximum TLS version is 1.2.  An implication of this
                  restriction is that the Modern TLS profile type cannot be used because
                  it requires TLS 1.3."
                properties:
                  custom:
                    description: "custom is a user-defined TLS security profile. Be
                      extremely careful using a custom profile as invalid configurations
                      can be catastrophic. An example custom profile looks like this:
                      \n   ciphers:     - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305
                      \    - ECDHE-RSA-AES128-GCM-SHA256     - ECDHE-ECDSA-AES128-GCM-SHA256
                      \  minTLSVersion: TLSv1.1"
                    nullable: true
                    properties:
                      ciphers:
                        description: "ciphers is used to specify the cipher algorithms
                          that are negotiated during the TLS handshake.  Operators
                          may remove entries their operands do not support.  For example,
                          to use DES-CBC3-SHA  (yaml): \n   ciphers:     - DES-CBC3-SHA"
                        items:
                          type: string
                        type: array
                      minTLSVersion:
                        description: "minTLSVersion is used to specify the minimal
                          version of the TLS protocol that is negotiated during the
                          TLS handshake. For example, to use TLS versions 1.1, 1.2
                          and 1.3 (yaml): \n   minTLSVersion: TLSv1.1 \n NOTE: currently
                          the highest minTLSVersion allowed is VersionTLS12"
                        type: string
                    type: object
                  intermediate:
                    description: "intermediate is a TLS security profile based on:
                      \n https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29
                      \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256
                      \    - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256
                      \    - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256
                      \    - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384
                      \    - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305
                      \    - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384
                      \  minTLSVersion: TLSv1.2"
                    nullable: true
                    type: object
                  modern:
                    description: "modern is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility
                      \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256
                      \    - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256
                      \  minTLSVersion: TLSv1.3 \n NOTE: Currently unsupported."
                    nullable: true
                    type: object
                  old:
                    description: "old is a TLS security profile based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Old_backward_compatibility
                      \n and looks like this (yaml): \n   ciphers:     - TLS_AES_128_GCM_SHA256
                      \    - TLS_AES_256_GCM_SHA384     - TLS_CHACHA20_POLY1305_SHA256
                      \    - ECDHE-ECDSA-AES128-GCM-SHA256     - ECDHE-RSA-AES128-GCM-SHA256
                      \    - ECDHE-ECDSA-AES256-GCM-SHA384     - ECDHE-RSA-AES256-GCM-SHA384
                      \    - ECDHE-ECDSA-CHACHA20-POLY1305     - ECDHE-RSA-CHACHA20-POLY1305
                      \    - DHE-RSA-AES128-GCM-SHA256     - DHE-RSA-AES256-GCM-SHA384
                      \    - DHE-RSA-CHACHA20-POLY1305     - ECDHE-ECDSA-AES128-SHA256
                      \    - ECDHE-RSA-AES128-SHA256     - ECDHE-ECDSA-AES128-SHA
                      \    - ECDHE-RSA-AES128-SHA     - ECDHE-ECDSA-AES256-SHA384
                      \    - ECDHE-RSA-AES256-SHA384     - ECDHE-ECDSA-AES256-SHA
                      \    - ECDHE-RSA-AES256-SHA     - DHE-RSA-AES128-SHA256     -
                      DHE-RSA-AES256-SHA256     - AES128-GCM-SHA256     - AES256-GCM-SHA384
                      \    - AES128-SHA256     - AES256-SHA256     - AES128-SHA     -
                      AES256-SHA     - DES-CBC3-SHA   minTLSVersion: TLSv1.0"
                    nullable: true
                    type: object
                  type:
                    description: "type is one of Old, Intermediate, Modern or Custom.
                      Custom provides the ability to specify individual TLS security
                      profile parameters. Old, Intermediate and Modern are TLS security
                      profiles based on: \n https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations
                      \n The profiles are intent based, so they may change over time
                      as new ciphers are developed and existing ciphers are found
                      to be insecure.  Depending on precisely which ciphers are available
                      to a process, the list may be reduced. \n Note that the Modern
                      profile is currently not supported because it is not yet well
                      adopted by common software libraries."
                    type: string
                type: object
            type: object
          status:
            description: status is the most recently observed status of the IngressController.
            properties:
              availableReplicas:
                description: availableReplicas is number of observed available replicas
                  according to the ingress controller deployment.
                format: int32
                type: integer
              conditions:
                description: "conditions is a list of conditions and their status.
                  \n Available means the ingress controller deployment is available
                  and servicing route and ingress resources (i.e, .status.availableReplicas
                  equals .spec.replicas) \n There are additional conditions which
                  indicate the status of other ingress controller features and capabilities.
                  \n   * LoadBalancerManaged   - True if the following conditions
                  are met:     * The endpoint publishing strategy requires a service
                  load balancer.   - False if any of those conditions are unsatisfied.
                  \n   * LoadBalancerReady   - True if the following conditions are
                  met:     * A load balancer is managed.     * The load balancer is
                  ready.   - False if any of those conditions are unsatisfied. \n
                  \  * DNSManaged   - True if the following conditions are met:     *
                  The endpoint publishing strategy and platform support DNS.     *
                  The ingress controller domain is set.     * dns.config.openshift.io/cluster
                  configures DNS zones.   - False if any of those conditions are unsatisfied.
                  \n   * DNSReady   - True if the following conditions are met:     *
                  DNS is managed.     * DNS records have been successfully created.
                  \  - False if any of those conditions are unsatisfied."
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              domain:
                description: domain is the actual domain in use.
                type: string
              endpointPublishingStrategy:
                description: endpointPublishingStrategy is the actual strategy in
                  use.
                properties:
                  hostNetwork:
                    description: hostNetwork holds parameters for the HostNetwork
                      endpoint publishing strategy. Present only if type is HostNetwork.
                    type: object
                  loadBalancer:
                    description: loadBalancer holds parameters for the load balancer.
                      Present only if type is LoadBalancerService.
                    properties:
                      scope:
                        description: scope indicates the scope at which the load balancer
                          is exposed. Possible values are "External" and "Internal".
                        type: string
                    required:
                    - scope
                    type: object
                  private:
                    description: private holds parameters for the Private endpoint
                      publishing strategy. Present only if type is Private.
                    type: object
                  type:
                    description: "type is the publishing strategy to use. Valid values
                      are: \n * LoadBalancerService \n Publishes the ingress controller
                      using a Kubernetes LoadBalancer Service. \n In this configuration,
                      the ingress controller deployment uses container networking.
                      A LoadBalancer Service is created to publish the deployment.
                      \n See: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
                      \n If domain is set, a wildcard DNS record will be managed to
                      point at the LoadBalancer Service's external name. DNS records
                      are managed only in DNS zones defined by dns.config.openshift.io/cluster
                      .spec.publicZone and .spec.privateZone. \n Wildcard DNS management
                      is currently supported only on the AWS, Azure, and GCP platforms.
                      \n * HostNetwork \n Publishes the ingress controller on node
                      ports where the ingress controller is deployed. \n In this configuration,
                      the ingress controller deployment uses host networking, bound
                      to node ports 80 and 443. The user is responsible for configuring
                      an external load balancer to publish the ingress controller
                      via the node ports. \n * Private \n Does not publish the ingress
                      controller. \n In this configuration, the ingress controller
                      deployment uses container networking, and is not explicitly
                      published. The user must manually publish the ingress controller."
                    type: string
                required:
                - type
                type: object
              observedGeneration:
                description: observedGeneration is the most recent generation observed.
                format: int64
                type: integer
              selector:
                description: selector is a label selector, in string format, for ingress
                  controller pods corresponding to the IngressController. The number
                  of matching pods should equal the value of availableReplicas.
                type: string
              tlsProfile:
                description: tlsProfile is the TLS connection configuration that is
                  in effect.
                properties:
                  ciphers:
                    description: "ciphers is used to specify the cipher algorithms
                      that are negotiated during the TLS handshake.  Operators may
                      remove entries their operands do not support.  For example,
                      to use DES-CBC3-SHA  (yaml): \n   ciphers:     - DES-CBC3-SHA"
                    items:
                      type: string
                    type: array
                  minTLSVersion:
                    description: "minTLSVersion is used to specify the minimal version
                      of the TLS protocol that is negotiated during the TLS handshake.
                      For example, to use TLS versions 1.1, 1.2 and 1.3 (yaml): \n
                      \  minTLSVersion: TLSv1.1 \n NOTE: currently the highest minTLSVersion
                      allowed is VersionTLS12"
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        labelSelectorPath: .status.selector
        specReplicasPath: .spec.replicas
        statusReplicasPath: .status.availableReplicas
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: kubeapiservers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: KubeAPIServer
    listKind: KubeAPIServerList
    plural: kubeapiservers
    singular: kubeapiserver
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: KubeAPIServer provides information to configure an operator to
          manage kube-apiserver.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec is the specification of the desired behavior of the
              Kubernetes API Server
            properties:
              failedRevisionLimit:
                description: failedRevisionLimit is the number of failed static pod
                  installer revisions to keep on disk and in the api -1 = unlimited,
                  0 or unset = 5 (default)
                format: int32
                type: integer
              forceRedeploymentReason:
                description: forceRedeploymentReason can be used to force the redeployment
                  of the operand by providing a unique string. This provides a mechanism
                  to kick a previously failed deployment and provide a reason why
                  you think it will work this time instead of failing again on the
                  same config.
                type: string
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Force)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              succeededRevisionLimit:
                description: succeededRevisionLimit is the number of successful static
                  pod installer revisions to keep on disk and in the api -1 = unlimited,
                  0 or unset = 5 (default)
                format: int32
                type: integer
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: status is the most recently observed status of the Kubernetes
              API Server
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              latestAvailableRevision:
                description: latestAvailableRevision is the deploymentID of the most
                  recent deployment
                format: int32
                type: integer
              latestAvailableRevisionReason:
                description: latestAvailableRevisionReason describe the detailed reason
                  for the most recent deployment
                type: string
              nodeStatuses:
                description: nodeStatuses track the deployment values and errors across
                  individual nodes
                items:
                  description: NodeStatus provides information about the current state
                    of a particular node managed by this operator.
                  properties:
                    currentRevision:
                      description: currentRevision is the generation of the most recently
                        successful deployment
                      format: int32
                      type: integer
                    lastFailedRevision:
                      description: lastFailedRevision is the generation of the deployment
                        we tried and failed to deploy.
                      format: int32
                      type: integer
                    lastFailedRevisionErrors:
                      description: lastFailedRevisionErrors is a list of the errors
                        during the failed deployment referenced in lastFailedRevision
                      items:
                        type: string
                      type: array
                    nodeName:
                      description: nodeName is the name of the node
                      type: string
                    targetRevision:
                      description: targetRevision is the generation of the deployment
                        we're trying to apply
                      format: int32
                      type: integer
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: kubecontrollermanagers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    categories:
    - coreoperators
    kind: KubeControllerManager
    listKind: KubeControllerManagerList
    plural: kubecontrollermanagers
    singular: kubecontrollermanager
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: KubeControllerManager provides information to configure an operator
          to manage kube-controller-manager.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec is the specification of the desired behavior of the
              Kubernetes Controller Manager
            properties:
              failedRevisionLimit:
                description: failedRevisionLimit is the number of failed static pod
                  installer revisions to keep on disk and in the api -1 = unlimited,
                  0 or unset = 5 (default)
                format: int32
                type: integer
              forceRedeploymentReason:
                description: forceRedeploymentReason can be used to force the redeployment
                  of the operand by providing a unique string. This provides a mechanism
                  to kick a previously failed deployment and provide a reason why
                  you think it will work this time instead of failing again on the
                  same config.
                type: string
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Force)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              succeededRevisionLimit:
                description: succeededRevisionLimit is the number of successful static
                  pod installer revisions to keep on disk and in the api -1 = unlimited,
                  0 or unset = 5 (default)
                format: int32
                type: integer
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: status is the most recently observed status of the Kubernetes
              Controller Manager
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              latestAvailableRevision:
                description: latestAvailableRevision is the deploymentID of the most
                  recent deployment
                format: int32
                type: integer
              latestAvailableRevisionReason:
                description: latestAvailableRevisionReason describe the detailed reason
                  for the most recent deployment
                type: string
              nodeStatuses:
                description: nodeStatuses track the deployment values and errors across
                  individual nodes
                items:
                  description: NodeStatus provides information about the current state
                    of a particular node managed by this operator.
                  properties:
                    currentRevision:
                      description: currentRevision is the generation of the most recently
                        successful deployment
                      format: int32
                      type: integer
                    lastFailedRevision:
                      description: lastFailedRevision is the generation of the deployment
                        we tried and failed to deploy.
                      format: int32
                      type: integer
                    lastFailedRevisionErrors:
                      description: lastFailedRevisionErrors is a list of the errors
                        during the failed deployment referenced in lastFailedRevision
                      items:
                        type: string
                      type: array
                    nodeName:
                      description: nodeName is the name of the node
                      type: string
                    targetRevision:
                      description: targetRevision is the generation of the deployment
                        we're trying to apply
                      format: int32
                      type: integer
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: kubeschedulers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    categories:
    - coreoperators
    kind: KubeScheduler
    listKind: KubeSchedulerList
    plural: kubeschedulers
    singular: kubescheduler
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: KubeScheduler provides information to configure an operator to
          manage scheduler.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec is the specification of the desired behavior of the
              Kubernetes Scheduler
            properties:
              failedRevisionLimit:
                description: failedRevisionLimit is the number of failed static pod
                  installer revisions to keep on disk and in the api -1 = unlimited,
                  0 or unset = 5 (default)
                format: int32
                type: integer
              forceRedeploymentReason:
                description: forceRedeploymentReason can be used to force the redeployment
                  of the operand by providing a unique string. This provides a mechanism
                  to kick a previously failed deployment and provide a reason why
                  you think it will work this time instead of failing again on the
                  same config.
                type: string
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Force)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              succeededRevisionLimit:
                description: succeededRevisionLimit is the number of successful static
                  pod installer revisions to keep on disk and in the api -1 = unlimited,
                  0 or unset = 5 (default)
                format: int32
                type: integer
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: status is the most recently observed status of the Kubernetes
              Scheduler
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              latestAvailableRevision:
                description: latestAvailableRevision is the deploymentID of the most
                  recent deployment
                format: int32
                type: integer
              latestAvailableRevisionReason:
                description: latestAvailableRevisionReason describe the detailed reason
                  for the most recent deployment
                type: string
              nodeStatuses:
                description: nodeStatuses track the deployment values and errors across
                  individual nodes
                items:
                  description: NodeStatus provides information about the current state
                    of a particular node managed by this operator.
                  properties:
                    currentRevision:
                      description: currentRevision is the generation of the most recently
                        successful deployment
                      format: int32
                      type: integer
                    lastFailedRevision:
                      description: lastFailedRevision is the generation of the deployment
                        we tried and failed to deploy.
                      format: int32
                      type: integer
                    lastFailedRevisionErrors:
                      description: lastFailedRevisionErrors is a list of the errors
                        during the failed deployment referenced in lastFailedRevision
                      items:
                        type: string
                      type: array
                    nodeName:
                      description: nodeName is the name of the node
                      type: string
                    targetRevision:
                      description: targetRevision is the generation of the deployment
                        we're trying to apply
                      format: int32
                      type: integer
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: kubestorageversionmigrators.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: KubeStorageVersionMigrator
    listKind: KubeStorageVersionMigratorList
    plural: kubestorageversionmigrators
    singular: kubestorageversionmigrator
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: KubeStorageVersionMigrator provides information to configure
          an operator to manage kube-storage-version-migrator.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: networks.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: Network
    listKind: NetworkList
    plural: networks
    singular: network
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Network describes the cluster's desired network configuration.
          It is consumed by the cluster-network-operator.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NetworkSpec is the top-level network configuration object.
            properties:
              additionalNetworks:
                description: additionalNetworks is a list of extra networks to make
                  available to pods when multiple networks are enabled.
                items:
                  description: AdditionalNetworkDefinition configures an extra network
                    that is available but not created by default. Instead, pods must
                    request them by name. type must be specified, along with exactly
                    one "Config" that matches the type.
                  properties:
                    name:
                      description: name is the name of the network. This will be populated
                        in the resulting CRD This must be unique.
                      type: string
                    namespace:
                      description: namespace is the namespace of the network. This
                        will be populated in the resulting CRD If not given the network
                        will be created in the default namespace.
                      type: string
                    rawCNIConfig:
                      description: rawCNIConfig is the raw CNI configuration json
                        to create in the NetworkAttachmentDefinition CRD
                      type: string
                    simpleMacvlanConfig:
                      description: SimpleMacvlanConfig configures the macvlan interface
                        in case of type:NetworkTypeSimpleMacvlan
                      properties:
                        ipamConfig:
                          description: IPAMConfig configures IPAM module will be used
                            for IP Address Management (IPAM).
                          properties:
                            staticIPAMConfig:
                              description: StaticIPAMConfig configures the static
                                IP address in case of type:IPAMTypeStatic
                              properties:
                                addresses:
                                  description: Addresses configures IP address for
                                    the interface
                                  items:
                                    description: StaticIPAMAddresses provides IP address
                                      and Gateway for static IPAM addresses
                                    properties:
                                      address:
                                        description: Address is the IP address in
                                          CIDR format
                                        type: string
                                      gateway:
                                        description: Gateway is IP inside of subnet
                                          to designate as the gateway
                                        type: string
                                    type: object
                                  type: array
                                dns:
                                  description: DNS configures DNS for the interface
                                  properties:
                                    domain:
                                      description: Domain configures the domainname
                                        the local domain used for short hostname lookups
                                      type: string
                                    nameservers:
                                      description: Nameservers points DNS servers
                                        for IP lookup
                                      items:
                                        type: string
                                      type: array
                                    search:
                                      description: Search configures priority ordered
                                        search domains for short hostname lookups
                                      items:
                                        type: string
                                      type: array
                                  type: object
                                routes:
                                  description: Routes configures IP routes for the
                                    interface
                                  items:
                                    description: StaticIPAMRoutes provides Destination/Gateway
                                      pairs for static IPAM routes
                                    properties:
                                      destination:
                                        description: Destination points the IP route
                                          destination
                                        type: string
                                      gateway:
                                        description: Gateway is the route's next-hop
                                          IP address If unset, a default gateway is
                                          assumed (as determined by the CNI plugin).
                                        type: string
                                    type: object
                                  type: array
                              type: object
                            type:
                              description: Type is the type of IPAM module will be
                                used for IP Address Management(IPAM). The supported
                                values are IPAMTypeDHCP, IPAMTypeStatic
                              type: string
                          type: object
                        master:
                          description: master is the host interface to create the
                            macvlan interface from. If not specified, it will be default
                            route interface
                          type: string
                        mode:
                          description: 'mode is the macvlan mode: bridge, private,
                            vepa, passthru. The default is bridge'
                          type: string
                        mtu:
                          description: mtu is the mtu to use for the macvlan interface.
                            if unset, host's kernel will select the value.
                          format: int32
                          minimum: 0
                          type: integer
                      type: object
                    type:
                      description: type is the type of network The supported values
                        are NetworkTypeRaw, NetworkTypeSimpleMacvlan
                      type: string
                  type: object
                type: array
              clusterNetwork:
                description: clusterNetwork is the IP address pool to use for pod
                  IPs. Some network providers, e.g. OpenShift SDN, support multiple
                  ClusterNetworks. Others only support one. This is equivalent to
                  the cluster-cidr.
                items:
                  description: ClusterNetworkEntry is a subnet from which to allocate
                    PodIPs. A network of size HostPrefix (in CIDR notation) will be
                    allocated when nodes join the cluster. Not all network providers
                    support multiple ClusterNetworks
                  properties:
                    cidr:
                      type: string
                    hostPrefix:
                      format: int32
                      minimum: 0
                      type: integer
                  type: object
                type: array
              defaultNetwork:
                description: defaultNetwork is the "default" network that all pods
                  will receive
                properties:
                  kuryrConfig:
                    description: KuryrConfig configures the kuryr plugin
                    properties:
                      controllerProbesPort:
                        description: The port kuryr-controller will listen for readiness
                          and liveness requests.
                        format: int32
                        minimum: 0
                        type: integer
                      daemonProbesPort:
                        description: The port kuryr-daemon will listen for readiness
                          and liveness requests.
                        format: int32
                        minimum: 0
                        type: integer
                      enablePortPoolsPrepopulation:
                        description: enablePortPoolsPrepopulation when true will make
                          Kuryr prepopulate each newly created port pool with a minimum
                          number of ports. Kuryr uses Neutron port pooling to fight
                          the fact that it takes a significant amount of time to create
                          one. Instead of creating it when pod is being deployed,
                          Kuryr keeps a number of ports ready to be attached to pods.
                          By default port prepopulation is disabled.
                        type: boolean
                      openStackServiceNetwork:
                        description: openStackServiceNetwork contains the CIDR of
                          network from which to allocate IPs for OpenStack Octavia's
                          Amphora VMs. Please note that with Amphora driver Octavia
                          uses two IPs from that network for each loadbalancer - one
                          given by OpenShift and second for VRRP connections. As the
                          first one is managed by OpenShift's and second by Neutron's
                          IPAMs, those need to come from different pools. Therefore
                          `openStackServiceNetwork` needs to be at least twice the
                          size of `serviceNetwork`, and whole `serviceNetwork` must
                          be overlapping with `openStackServiceNetwork`. cluster-network-operator
                          will then make sure VRRP IPs are taken from the ranges inside
                          `openStackServiceNetwork` that are not overlapping with
                          `serviceNetwork`, effectivly preventing conflicts. If not
                          set cluster-network-operator will use `serviceNetwork` expanded
                          by decrementing the prefix size by 1.
                        type: string
                      poolBatchPorts:
                        description: poolBatchPorts sets a number of ports that should
                          be created in a single batch request to extend the port
                          pool. The default is 3. For more information about port
                          pools see enablePortPoolsPrepopulation setting.
                        minimum: 0
                        type: integer
                      poolMaxPorts:
                        description: poolMaxPorts sets a maximum number of free ports
                          that are being kept in a port pool. If the number of ports
                          exceeds this setting, free ports will get deleted. Setting
                          0 will disable this upper bound, effectively preventing
                          pools from shrinking and this is the default value. For
                          more information about port pools see enablePortPoolsPrepopulation
                          setting.
                        minimum: 0
                        type: integer
                      poolMinPorts:
                        description: poolMinPorts sets a minimum number of free ports
                          that should be kept in a port pool. If the number of ports
                          is lower than this setting, new ports will get created and
                          added to pool. The default is 1. For more information about
                          port pools see enablePortPoolsPrepopulation setting.
                        minimum: 1
                        type: integer
                    type: object
                  openshiftSDNConfig:
                    description: openShiftSDNConfig configures the openshift-sdn plugin
                    properties:
                      enableUnidling:
                        description: enableUnidling controls whether or not the service
                          proxy will support idling and unidling of services. By default,
                          unidling is enabled.
                        type: boolean
                      mode:
                        description: mode is one of "Multitenant", "Subnet", or "NetworkPolicy"
                        type: string
                      mtu:
                        description: mtu is the mtu to use for the tunnel interface.
                          Defaults to 1450 if unset. This must be 50 bytes smaller
                          than the machine's uplink.
                        format: int32
                        minimum: 0
                        type: integer
                      useExternalOpenvswitch:
                        description: useExternalOpenvswitch tells the operator not
                          to install openvswitch, because it will be provided separately.
                          If set, you must provide it yourself.
                        type: boolean
                      vxlanPort:
                        description: vxlanPort is the port to use for all vxlan packets.
                          The default is 4789.
                        format: int32
                        minimum: 0
                        type: integer
                    type: object
                  ovnKubernetesConfig:
                    description: oVNKubernetesConfig configures the ovn-kubernetes
                      plugin. This is currently not implemented.
                    properties:
                      genevePort:
                        description: geneve port is the UDP port to be used by geneve
                          encapulation. Default is 6081
                        format: int32
                        minimum: 1
                        type: integer
                      hybridOverlayConfig:
                        description: HybridOverlayConfig configures an additional
                          overlay network for peers that are not using OVN.
                        properties:
                          hybridClusterNetwork:
                            description: HybridClusterNetwork defines a network space
                              given to nodes on an additional overlay network.
                            items:
                              description: ClusterNetworkEntry is a subnet from which
                                to allocate PodIPs. A network of size HostPrefix (in
                                CIDR notation) will be allocated when nodes join the
                                cluster. Not all network providers support multiple
                                ClusterNetworks
                              properties:
                                cidr:
                                  type: string
                                hostPrefix:
                                  format: int32
                                  minimum: 0
                                  type: integer
                              type: object
                            type: array
                        type: object
                      mtu:
                        description: mtu is the MTU to use for the tunnel interface.
                          This must be 100 bytes smaller than the uplink mtu. Default
                          is 1400
                        format: int32
                        minimum: 0
                        type: integer
                    type: object
                  type:
                    description: type is the type of network All NetworkTypes are
                      supported except for NetworkTypeRaw
                    type: string
                type: object
              deployKubeProxy:
                description: deployKubeProxy specifies whether or not a standalone
                  kube-proxy should be deployed by the operator. Some network providers
                  include kube-proxy or similar functionality. If unset, the plugin
                  will attempt to select the correct value, which is false when OpenShift
                  SDN and ovn-kubernetes are used and true otherwise.
                type: boolean
              disableMultiNetwork:
                description: disableMultiNetwork specifies whether or not multiple
                  pod network support should be disabled. If unset, this property
                  defaults to 'false' and multiple network support is enabled.
                type: boolean
              kubeProxyConfig:
                description: kubeProxyConfig lets us configure desired proxy configuration.
                  If not specified, sensible defaults will be chosen by OpenShift
                  directly. Not consumed by all network providers - currently only
                  openshift-sdn.
                properties:
                  bindAddress:
                    description: The address to "bind" on Defaults to 0.0.0.0
                    type: string
                  iptablesSyncPeriod:
                    description: 'The period that iptables rules are refreshed. Default:
                      30s'
                    type: string
                  proxyArguments:
                    additionalProperties:
                      description: ProxyArgumentList is a list of arguments to pass
                        to the kubeproxy process
                      items:
                        type: string
                      type: array
                    description: Any additional arguments to pass to the kubeproxy
                      process
                    type: object
                type: object
              logLevel:
                description: logLevel allows configuring the logging level of the
                  components deployed by the operator. Currently only Kuryr SDN is
                  affected by this setting. Please note that turning on extensive
                  logging may affect performance. The default value is "Normal".
                type: string
              serviceNetwork:
                description: serviceNetwork is the ip address pool to use for Service
                  IPs Currently, all existing network providers only support a single
                  value here, but this is an array to allow for growth.
                items:
                  type: string
                type: array
            type: object
          status:
            description: NetworkStatus is currently unused. Instead, status is reported
              in the Network.config.openshift.io object.
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: openshiftapiservers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    categories:
    - coreoperators
    kind: OpenShiftAPIServer
    listKind: OpenShiftAPIServerList
    plural: openshiftapiservers
    singular: openshiftapiserver
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: OpenShiftAPIServer provides information to configure an operator
          to manage openshift-apiserver.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec is the specification of the desired behavior of the
              OpenShift API Server.
            properties:
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: status defines the observed status of the OpenShift API Server.
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              latestAvailableRevision:
                description: latestAvailableRevision is the latest revision used as
                  suffix of revisioned secrets like encryption-config. A new revision
                  causes a new deployment of pods.
                format: int32
                minimum: 0
                type: integer
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: openshiftcontrollermanagers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    categories:
    - coreoperators
    kind: OpenShiftControllerManager
    listKind: OpenShiftControllerManagerList
    plural: openshiftcontrollermanagers
    singular: openshiftcontrollermanager
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: OpenShiftControllerManager provides information to configure
          an operator to manage openshift-controller-manager.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: servicecas.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    kind: ServiceCA
    listKind: ServiceCAList
    plural: servicecas
    singular: serviceca
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ServiceCA provides information to configure an operator to manage
          the service cert controllers
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec holds user settable values for configuration
            properties:
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: status holds observed values from the cluster. They may not
              be overridden.
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: servicecatalogapiservers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    categories:
    - coreoperators
    kind: ServiceCatalogAPIServer
    listKind: ServiceCatalogAPIServerList
    plural: servicecatalogapiservers
    singular: servicecatalogapiserver
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ServiceCatalogAPIServer provides information to configure an
          operator to manage Service Catalog API Server
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: servicecatalogcontrollermanagers.operator.openshift.io
spec:
  group: operator.openshift.io
  names:
    categories:
    - coreoperators
    kind: ServiceCatalogControllerManager
    listKind: ServiceCatalogControllerManagerList
    plural: servicecatalogcontrollermanagers
    singular: servicecatalogcontrollermanager
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: ServiceCatalogControllerManager provides information to configure
          an operator to manage Service Catalog Controller Manager
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              logLevel:
                description: logLevel is an intent based logging for an overall component.  It
                  does not give fine grained control, but it is a simple way to manage
                  coarse grained logging choices that operators have to interpret
                  for their operands.
                type: string
              managementState:
                description: managementState indicates whether and how the operator
                  should manage the component
                pattern: ^(Managed|Unmanaged|Force|Removed)$
                type: string
              observedConfig:
                description: observedConfig holds a sparse config that controller
                  has observed from the cluster state.  It exists in spec because
                  it is an input to the level for the operator
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
              operatorLogLevel:
                description: operatorLogLevel is an intent based logging for the operator
                  itself.  It does not give fine grained control, but it is a simple
                  way to manage coarse grained logging choices that operators have
                  to interpret for themselves.
                type: string
              unsupportedConfigOverrides:
                description: 'unsupportedConfigOverrides holds a sparse config that
                  will override any previously set options.  It only needs to be the
                  fields to override it will end up overlaying in the following order:
                  1. hardcoded defaults 2. observedConfig 3. unsupportedConfigOverrides'
                nullable: true
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            properties:
              conditions:
                description: conditions is a list of conditions and their status
                items:
                  description: OperatorCondition is just the standard condition fields.
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              generations:
                description: generations are used to determine when an item needs
                  to be reconciled or has changed in a way that needs a reaction.
                items:
                  description: GenerationStatus keeps track of the generation for
                    a given resource so that decisions about forced updates can be
                    made.
                  properties:
                    group:
                      description: group is the group of the thing you're tracking
                      type: string
                    hash:
                      description: hash is an optional field set for resources without
                        generation that are content sensitive like secrets and configmaps
                      type: string
                    lastGeneration:
                      description: lastGeneration is the last generation of the workload
                        controller involved
                      format: int64
                      type: integer
                    name:
                      description: name is the name of the thing you're tracking
                      type: string
                    namespace:
                      description: namespace is where the thing you're tracking is
                      type: string
                    resource:
                      description: resource is the resource type of the thing you're
                        tracking
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: observedGeneration is the last generation change you've
                  dealt with
                format: int64
                type: integer
              readyReplicas:
                description: readyReplicas indicates how many replicas are ready and
                  at the desired state
                format: int32
                type: integer
              version:
                description: version is the level this availability applies to
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: securitycontextconstraints.security.openshift.io
spec:
  group: security.openshift.io
  names:
    kind: SecurityContextConstraints
    listKind: SecurityContextConstraintsList
    plural: securitycontextconstraints
    singular: securitycontextconstraints
  scope: Cluster
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: SecurityContextConstraints governs the ability to make requests
          that affect the SecurityContext that will be applied to a container. For
          historical reasons SCC was exposed under the core Kubernetes API group.
          That exposure is deprecated and will be removed in a future release - users
          should instead use the security.openshift.io group to manage SecurityContextConstraints.
        properties:
          allowHostDirVolumePlugin:
            description: AllowHostDirVolumePlugin determines if the policy allow containers
              to use the HostDir volume plugin
            type: boolean
          allowHostIPC:
            description: AllowHostIPC determines if the policy allows host ipc in
              the containers.
            type: boolean
          allowHostNetwork:
            description: AllowHostNetwork determines if the policy allows the use
              of HostNetwork in the pod spec.
            type: boolean
          allowHostPID:
            description: AllowHostPID determines if the policy allows host pid in
              the containers.
            type: boolean
          allowHostPorts:
            description: AllowHostPorts determines if the policy allows host ports
              in the containers.
            type: boolean
          allowPrivilegeEscalation:
            description: AllowPrivilegeEscalation determines if a pod can request
              to allow privilege escalation. If unspecified, defaults to true.
            nullable: true
            type: boolean
          allowPrivilegedContainer:
            description: AllowPrivilegedContainer determines if a container can request
              to be run as privileged.
            type: boolean
          allowedCapabilities:
            description: AllowedCapabilities is a list of capabilities that can be
              requested to add to the container. Capabilities in this field maybe
              added at the pod author's discretion. You must not list a capability
              in both AllowedCapabilities and RequiredDropCapabilities. To allow all
              capabilities you may use '*'.
            items:
              description: Capability represent POSIX capabilities type
              type: string
            nullable: true
            type: array
          allowedFlexVolumes:
            description: AllowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty
              or nil indicates that all Flexvolumes may be used.  This parameter is
              effective only when the usage of the Flexvolumes is allowed in the "Volumes"
              field.
            items:
              description: AllowedFlexVolume represents a single Flexvolume that is
                allowed to be used.
              properties:
                driver:
                  description: Driver is the name of the Flexvolume driver.
                  type: string
              required:
              - driver
              type: object
            nullable: true
            type: array
          allowedUnsafeSysctls:
            description: "AllowedUnsafeSysctls is a list of explicitly allowed unsafe
              sysctls, defaults to none. Each entry is either a plain sysctl name
              or ends in \"*\" in which case it is considered as a prefix of allowed
              sysctls. Single * means all unsafe sysctls are allowed. Kubelet has
              to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
              \n Examples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g.
              \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc."
            items:
              type: string
            nullable: true
            type: array
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          defaultAddCapabilities:
            description: DefaultAddCapabilities is the default set of capabilities
              that will be added to the container unless the pod spec specifically
              drops the capability.  You may not list a capabiility in both DefaultAddCapabilities
              and RequiredDropCapabilities.
            items:
              description: Capability represent POSIX capabilities type
              type: string
            nullable: true
            type: array
          defaultAllowPrivilegeEscalation:
            description: DefaultAllowPrivilegeEscalation controls the default setting
              for whether a process can gain more privileges than its parent process.
            nullable: true
            type: boolean
          forbiddenSysctls:
            description: "ForbiddenSysctls is a list of explicitly forbidden sysctls,
              defaults to none. Each entry is either a plain sysctl name or ends in
              \"*\" in which case it is considered as a prefix of forbidden sysctls.
              Single * means all sysctls are forbidden. \n Examples: e.g. \"foo/*\"
              forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\",
              \"foo.baz\", etc."
            items:
              type: string
            nullable: true
            type: array
          fsGroup:
            description: FSGroup is the strategy that will dictate what fs group is
              used by the SecurityContext.
            nullable: true
            properties:
              ranges:
                description: Ranges are the allowed ranges of fs groups.  If you would
                  like to force a single fs group then supply a single range with
                  the same start and end.
                items:
                  description: 'IDRange provides a min/max of an allowed range of
                    IDs. TODO: this could be reused for UIDs.'
                  properties:
                    max:
                      description: Max is the end of the range, inclusive.
                      format: int64
                      type: integer
                    min:
                      description: Min is the start of the range, inclusive.
                      format: int64
                      type: integer
                  type: object
                type: array
              type:
                description: Type is the strategy that will dictate what FSGroup is
                  used in the SecurityContext.
                type: string
            type: object
          groups:
            description: The groups that have permission to use this security context
              constraints
            items:
              type: string
            nullable: true
            type: array
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          priority:
            description: Priority influences the sort order of SCCs when evaluating
              which SCCs to try first for a given pod request based on access in the
              Users and Groups fields.  The higher the int, the higher priority. An
              unset value is considered a 0 priority. If scores for multiple SCCs
              are equal they will be sorted from most restrictive to least restrictive.
              If both priorities and restrictions are equal the SCCs will be sorted
              by name.
            format: int32
            nullable: true
            type: integer
          readOnlyRootFilesystem:
            description: ReadOnlyRootFilesystem when set to true will force containers
              to run with a read only root file system.  If the container specifically
              requests to run with a non-read only root file system the SCC should
              deny the pod. If set to false the container may run with a read only
              root file system if it wishes but it will not be forced to.
            type: boolean
          requiredDropCapabilities:
            description: RequiredDropCapabilities are the capabilities that will be
              dropped from the container.  These are required to be dropped and cannot
              be added.
            items:
              description: Capability represent POSIX capabilities type
              type: string
            nullable: true
            type: array
          runAsUser:
            description: RunAsUser is the strategy that will dictate what RunAsUser
              is used in the SecurityContext.
            nullable: true
            properties:
              type:
                description: Type is the strategy that will dictate what RunAsUser
                  is used in the SecurityContext.
                type: string
              uid:
                description: UID is the user id that containers must run as.  Required
                  for the MustRunAs strategy if not using namespace/service account
                  allocated uids.
                format: int64
                type: integer
              uidRangeMax:
                description: UIDRangeMax defines the max value for a strategy that
                  allocates by range.
                format: int64
                type: integer
              uidRangeMin:
                description: UIDRangeMin defines the min value for a strategy that
                  allocates by range.
                format: int64
                type: integer
            type: object
          seLinuxContext:
            description: SELinuxContext is the strategy that will dictate what labels
              will be set in the SecurityContext.
            nullable: true
            properties:
              seLinuxOptions:
                description: seLinuxOptions required to run as; required for MustRunAs
                properties:
                  level:
                    description: Level is SELinux level label that applies to the
                      container.
                    type: string
                  role:
                    description: Role is a SELinux role label that applies to the
                      container.
                    type: string
                  type:
                    description: Type is a SELinux type label that applies to the
                      container.
                    type: string
                  user:
                    description: User is a SELinux user label that applies to the
                      container.
                    type: string
                type: object
              type:
                description: Type is the strategy that will dictate what SELinux context
                  is used in the SecurityContext.
                type: string
            type: object
          seccompProfiles:
            description: "SeccompProfiles lists the allowed profiles that may be set
              for the pod or container's seccomp annotations.  An unset (nil) or empty
              value means that no profiles may be specifid by the pod or container.\tThe
              wildcard '*' may be used to allow all profiles.  When used to generate
              a value for a pod the first non-wildcard profile will be used as the
              default."
            items:
              type: string
            nullable: true
            type: array
          supplementalGroups:
            description: SupplementalGroups is the strategy that will dictate what
              supplemental groups are used by the SecurityContext.
            nullable: true
            properties:
              ranges:
                description: Ranges are the allowed ranges of supplemental groups.  If
                  you would like to force a single supplemental group then supply
                  a single range with the same start and end.
                items:
                  description: 'IDRange provides a min/max of an allowed range of
                    IDs. TODO: this could be reused for UIDs.'
                  properties:
                    max:
                      description: Max is the end of the range, inclusive.
                      format: int64
                      type: integer
                    min:
                      description: Min is the start of the range, inclusive.
                      format: int64
                      type: integer
                  type: object
                type: array
              type:
                description: Type is the strategy that will dictate what supplemental
                  groups is used in the SecurityContext.
                type: string
            type: object
          users:
            description: The users who have permissions to use this security context
              constraints
            items:
              type: string
            nullable: true
            type: array
          volumes:
            description: Volumes is a white list of allowed volume plugins.  FSType
              corresponds directly with the field names of a VolumeSource (azureFile,
              configMap, emptyDir).  To allow all volumes you may use "*". To allow
              no volumes, set to ["none"].
            items:
              description: FS Type gives strong typing to different file systems that
                are used by volumes.
              type: string
            nullable: true
            type: array
        required:
        - allowHostDirVolumePlugin
        - allowHostIPC
        - allowHostNetwork
        - allowHostPID
        - allowHostPorts
        - allowPrivilegedContainer
        - allowedCapabilities
        - defaultAddCapabilities
        - priority
        - readOnlyRootFilesystem
        - requiredDropCapabilities
        - volumes
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions:
  - v1
