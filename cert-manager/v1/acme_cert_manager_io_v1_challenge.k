"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1
_regex_match = regex.match


schema Challenge:
    r"""
    Challenge is a type to represent a Challenge request with an ACME server

    Attributes
    ----------
    apiVersion : str, default is "acme.cert-manager.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Challenge", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, required
        metadata
    spec : AcmeCertManagerIoV1ChallengeSpec, default is Undefined, required
        spec
    status : AcmeCertManagerIoV1ChallengeStatus, default is Undefined, optional
        status
    """


    apiVersion: "acme.cert-manager.io/v1" = "acme.cert-manager.io/v1"

    kind: "Challenge" = "Challenge"

    metadata: v1.ObjectMeta

    spec: AcmeCertManagerIoV1ChallengeSpec

    status?: AcmeCertManagerIoV1ChallengeStatus


schema AcmeCertManagerIoV1ChallengeSpec:
    r"""
    acme cert manager io v1 challenge spec

    Attributes
    ----------
    authorizationURL : str, default is Undefined, required
        The URL to the ACME Authorization resource that this
        challenge is a part of.
    dnsName : str, default is Undefined, required
        dnsName is the identifier that this challenge is for, e.g. example.com.
        If the requested DNSName is a 'wildcard', this field MUST be set to the
        non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
    issuerRef : AcmeCertManagerIoV1ChallengeSpecIssuerRef, default is Undefined, required
        issuer ref
    key : str, default is Undefined, required
        The ACME challenge key for this challenge
        For HTTP01 challenges, this is the value that must be responded with to
        complete the HTTP01 challenge in the format:
        `<private key JWK thumbprint>.<key from acme server for challenge>`.
        For DNS01 challenges, this is the base64 encoded SHA256 sum of the
        `<private key JWK thumbprint>.<key from acme server for challenge>`
        text that must be set as the TXT record content.
    solver : AcmeCertManagerIoV1ChallengeSpecSolver, default is Undefined, required
        solver
    token : str, default is Undefined, required
        The ACME challenge token for this challenge.
        This is the raw value returned from the ACME server.
    $type : str, default is Undefined, required
        The type of ACME challenge this resource represents.
        One of "HTTP-01" or "DNS-01".
    url : str, default is Undefined, required
        The URL of the ACME Challenge resource for this challenge.
        This can be used to lookup details about the status of this challenge.
    wildcard : bool, default is Undefined, optional
        wildcard will be true if this challenge is for a wildcard identifier,
        for example '*.example.com'.
    """


    authorizationURL: str

    dnsName: str

    issuerRef: AcmeCertManagerIoV1ChallengeSpecIssuerRef

    key: str

    solver: AcmeCertManagerIoV1ChallengeSpecSolver

    token: str

    $type: "HTTP-01" | "DNS-01"

    url: str

    wildcard?: bool


schema AcmeCertManagerIoV1ChallengeSpecIssuerRef:
    r"""
    References a properly configured ACME-type Issuer which should
    be used to create this Challenge.
    If the Issuer does not exist, processing will be retried.
    If the Issuer is not an 'ACME' Issuer, an error will be returned and the
    Challenge will be marked as failed.

    Attributes
    ----------
    group : str, default is Undefined, optional
        Group of the resource being referred to.
    kind : str, default is Undefined, optional
        Kind of the resource being referred to.
    name : str, default is Undefined, required
        Name of the resource being referred to.
    """


    group?: str

    kind?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolver:
    r"""
    Contains the domain solving configuration that should be used to
    solve this challenge resource.

    Attributes
    ----------
    dns01 : AcmeCertManagerIoV1ChallengeSpecSolverDns01, default is Undefined, optional
        dns01
    http01 : AcmeCertManagerIoV1ChallengeSpecSolverHttp01, default is Undefined, optional
        http01
    selector : AcmeCertManagerIoV1ChallengeSpecSolverSelector, default is Undefined, optional
        selector
    """


    dns01?: AcmeCertManagerIoV1ChallengeSpecSolverDns01

    http01?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01

    selector?: AcmeCertManagerIoV1ChallengeSpecSolverSelector


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01:
    r"""
    Configures cert-manager to attempt to complete authorizations by
    performing the DNS01 challenge flow.

    Attributes
    ----------
    acmeDNS : AcmeCertManagerIoV1ChallengeSpecSolverDns01AcmeDNS, default is Undefined, optional
        acme DNS
    akamai : AcmeCertManagerIoV1ChallengeSpecSolverDns01Akamai, default is Undefined, optional
        akamai
    azureDNS : AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNS, default is Undefined, optional
        azure DNS
    cloudDNS : AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudDNS, default is Undefined, optional
        cloud DNS
    cloudflare : AcmeCertManagerIoV1ChallengeSpecSolverDns01Cloudflare, default is Undefined, optional
        cloudflare
    cnameStrategy : str, default is Undefined, optional
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
    digitalocean : AcmeCertManagerIoV1ChallengeSpecSolverDns01Digitalocean, default is Undefined, optional
        digitalocean
    rfc2136 : AcmeCertManagerIoV1ChallengeSpecSolverDns01Rfc2136, default is Undefined, optional
        rfc2136
    route53 : AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53, default is Undefined, optional
        route53
    webhook : AcmeCertManagerIoV1ChallengeSpecSolverDns01Webhook, default is Undefined, optional
        webhook
    """


    acmeDNS?: AcmeCertManagerIoV1ChallengeSpecSolverDns01AcmeDNS

    akamai?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Akamai

    azureDNS?: AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNS

    cloudDNS?: AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudDNS

    cloudflare?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Cloudflare

    cnameStrategy?: "None" | "Follow"

    digitalocean?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Digitalocean

    rfc2136?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Rfc2136

    route53?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53

    webhook?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Webhook


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AcmeDNS:
    r"""
    Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
    DNS01 challenge records.

    Attributes
    ----------
    accountSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01AcmeDNSAccountSecretRef, default is Undefined, required
        account secret ref
    host : str, default is Undefined, required
        host
    """


    accountSecretRef: AcmeCertManagerIoV1ChallengeSpecSolverDns01AcmeDNSAccountSecretRef

    host: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AcmeDNSAccountSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Akamai:
    r"""
    Use the Akamai DNS zone management API to manage DNS01 challenge records.

    Attributes
    ----------
    accessTokenSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef, default is Undefined, required
        access token secret ref
    clientSecretSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiClientSecretSecretRef, default is Undefined, required
        client secret secret ref
    clientTokenSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiClientTokenSecretRef, default is Undefined, required
        client token secret ref
    serviceConsumerDomain : str, default is Undefined, required
        service consumer domain
    """


    accessTokenSecretRef: AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef

    clientSecretSecretRef: AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiClientSecretSecretRef

    clientTokenSecretRef: AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiClientTokenSecretRef

    serviceConsumerDomain: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiClientSecretSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AkamaiClientTokenSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNS:
    r"""
    Use the Microsoft Azure DNS API to manage DNS01 challenge records.

    Attributes
    ----------
    clientID : str, default is Undefined, optional
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
    clientSecretSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    environment : str, default is Undefined, optional
        name of the Azure environment (default AzurePublicCloud)
    hostedZoneName : str, default is Undefined, optional
        name of the DNS zone that should be used
    managedIdentity : AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNSManagedIdentity, default is Undefined, optional
        managed identity
    resourceGroupName : str, default is Undefined, required
        resource group the DNS zone is located in
    subscriptionID : str, default is Undefined, required
        ID of the Azure subscription
    tenantID : str, default is Undefined, optional
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
    """


    clientID?: str

    clientSecretSecretRef?: AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef

    environment?: "AzurePublicCloud" | "AzureChinaCloud" | "AzureGermanCloud" | "AzureUSGovernmentCloud"

    hostedZoneName?: str

    managedIdentity?: AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNSManagedIdentity

    resourceGroupName: str

    subscriptionID: str

    tenantID?: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNSClientSecretSecretRef:
    r"""
    Auth: Azure Service Principal:
    A reference to a Secret containing the password associated with the Service Principal.
    If set, ClientID and TenantID must also be set.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01AzureDNSManagedIdentity:
    r"""
    Auth: Azure Workload Identity or Azure Managed Service Identity:
    Settings to enable Azure Workload Identity or Azure Managed Service Identity
    If set, ClientID, ClientSecret and TenantID must not be set.

    Attributes
    ----------
    clientID : str, default is Undefined, optional
        client ID of the managed identity, can not be used at the same time as resourceID
    resourceID : str, default is Undefined, optional
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
    """


    clientID?: str

    resourceID?: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudDNS:
    r"""
    Use the Google Cloud DNS API to manage DNS01 challenge records.

    Attributes
    ----------
    hostedZoneName : str, default is Undefined, optional
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
    project : str, default is Undefined, required
        project
    serviceAccountSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef, default is Undefined, optional
        service account secret ref
    """


    hostedZoneName?: str

    project: str

    serviceAccountSecretRef?: AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudDNSServiceAccountSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Cloudflare:
    r"""
    Use the Cloudflare API to manage DNS01 challenge records.

    Attributes
    ----------
    apiKeySecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudflareAPIKeySecretRef, default is Undefined, optional
        api key secret ref
    apiTokenSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudflareAPITokenSecretRef, default is Undefined, optional
        api token secret ref
    email : str, default is Undefined, optional
        Email of the account, only required when using API key based authentication.
    """


    apiKeySecretRef?: AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudflareAPIKeySecretRef

    apiTokenSecretRef?: AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudflareAPITokenSecretRef

    email?: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudflareAPIKeySecretRef:
    r"""
    API key to use to authenticate with Cloudflare.
    Note: using an API token to authenticate is now the recommended method
    as it allows greater control of permissions.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01CloudflareAPITokenSecretRef:
    r"""
    API token used to authenticate with Cloudflare.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Digitalocean:
    r"""
    Use the DigitalOcean DNS API to manage DNS01 challenge records.

    Attributes
    ----------
    tokenSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01DigitaloceanTokenSecretRef, default is Undefined, required
        token secret ref
    """


    tokenSecretRef: AcmeCertManagerIoV1ChallengeSpecSolverDns01DigitaloceanTokenSecretRef


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01DigitaloceanTokenSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Rfc2136:
    r"""
    Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
    to manage DNS01 challenge records.

    Attributes
    ----------
    nameserver : str, default is Undefined, required
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
    tsigAlgorithm : str, default is Undefined, optional
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
    tsigKeyName : str, default is Undefined, optional
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
    tsigSecretSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef, default is Undefined, optional
        tsig secret secret ref
    """


    nameserver: str

    tsigAlgorithm?: str

    tsigKeyName?: str

    tsigSecretSecretRef?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef:
    r"""
    The name of the secret containing the TSIG value.
    If ``tsigKeyName`` is defined, this field is required.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53:
    r"""
    Use the AWS Route53 API to manage DNS01 challenge records.

    Attributes
    ----------
    accessKeyID : str, default is Undefined, optional
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    accessKeyIDSecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef, default is Undefined, optional
        access key ID secret ref
    auth : AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53Auth, default is Undefined, optional
        auth
    hostedZoneID : str, default is Undefined, optional
        If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
    region : str, default is Undefined, required
        Always set the region when using AccessKeyID and SecretAccessKey
    role : str, default is Undefined, optional
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
    secretAccessKeySecretRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef, default is Undefined, optional
        secret access key secret ref
    """


    accessKeyID?: str

    accessKeyIDSecretRef?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef

    auth?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53Auth

    hostedZoneID?: str

    region: str

    role?: str

    secretAccessKeySecretRef?: AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AccessKeyIDSecretRef:
    r"""
    The SecretAccessKey is used for authentication. If set, pull the AWS
    access key ID from a key within a Kubernetes Secret.
    Cannot be set when AccessKeyID is set.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53Auth:
    r"""
    Auth configures how cert-manager authenticates.

    Attributes
    ----------
    kubernetes : AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AuthKubernetes, default is Undefined, required
        kubernetes
    """


    kubernetes: AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AuthKubernetes


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AuthKubernetes:
    r"""
    Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
    by passing a bound ServiceAccount token.

    Attributes
    ----------
    serviceAccountRef : AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef, default is Undefined, required
        service account ref
    """


    serviceAccountRef: AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53AuthKubernetesServiceAccountRef:
    r"""
    A reference to a service account that will be used to request a bound
    token (also known as "projected token"). To use this field, you must
    configure an RBAC rule to let cert-manager request a token.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
    name : str, default is Undefined, required
        Name of the ServiceAccount used to request a token.
    """


    audiences?: [str]

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef:
    r"""
    The SecretAccessKey is used for authentication.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """


    key?: str

    name: str


schema AcmeCertManagerIoV1ChallengeSpecSolverDns01Webhook:
    r"""
    Configure an external webhook based DNS01 challenge solver to manage
    DNS01 challenge records.

    Attributes
    ----------
    config : any, default is Undefined, optional
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
    groupName : str, default is Undefined, required
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
    solverName : str, default is Undefined, required
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
    """


    config?: any

    groupName: str

    solverName: str


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01:
    r"""
    Configures cert-manager to attempt to complete authorizations by
    performing the HTTP01 challenge flow.
    It is not possible to obtain certificates for wildcard domain names
    (e.g. `*.example.com`) using the HTTP01 challenge mechanism.

    Attributes
    ----------
    gatewayHTTPRoute : AcmeCertManagerIoV1ChallengeSpecSolverHttp01GatewayHTTPRoute, default is Undefined, optional
        gateway HTTP route
    ingress : AcmeCertManagerIoV1ChallengeSpecSolverHttp01Ingress, default is Undefined, optional
        ingress
    """


    gatewayHTTPRoute?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01GatewayHTTPRoute

    ingress?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01Ingress


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01GatewayHTTPRoute:
    r"""
    The Gateway API is a sig-network community API that models service networking
    in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
    create HTTPRoutes with the specified labels in the same namespace as the challenge.
    This solver is experimental, and fields / behaviour may change in the future.

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
    parentRefs : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsItems0], default is Undefined, optional
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
    serviceType : str, default is Undefined, optional
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
    """


    labels?: {str:str}

    parentRefs?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsItems0]

    serviceType?: str


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01GatewayHTTPRouteParentRefsItems0:
    r"""
    ParentReference identifies an API object (usually a Gateway) that can be considered
    a parent of this resource (usually a route). There are two kinds of parent resources
    with "Core" support:


    * Gateway (Gateway conformance profile)
    * Service (Mesh conformance profile, ClusterIP Services only)


    This API may be extended in the future to support additional kinds of parent
    resources.


    The API object must be valid in the cluster; the Group and Kind must
    be registered in the cluster for this reference to be valid.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).


        Support: Core
    kind : str, default is "Gateway", optional
        Kind is kind of the referent.


        There are two kinds of parent resources with "Core" support:


        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)


        Support for other resources is Implementation-Specific.
    name : str, default is Undefined, required
        Name is the name of the referent.


        Support: Core
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.


        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.


        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.


        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>


        Support: Core
    port : int, default is Undefined, optional
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.


        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.


        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>


        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.


        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.


        Support: Extended
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:


        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.


        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.


        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.


        Support: Core
    """


    group?: str = "gateway.networking.k8s.io"

    kind?: str = "Gateway"

    name: str

    namespace?: str

    port?: int

    sectionName?: str


    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01Ingress:
    r"""
    The ingress based HTTP01 challenge solver will solve challenges by
    creating or modifying Ingress resources in order to route requests for
    '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
    provisioned by cert-manager for each Challenge to be completed.

    Attributes
    ----------
    class : str, default is Undefined, optional
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
    ingressClassName : str, default is Undefined, optional
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
    ingressTemplate : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressIngressTemplate, default is Undefined, optional
        ingress template
    name : str, default is Undefined, optional
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
    podTemplate : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplate, default is Undefined, optional
        pod template
    serviceType : str, default is Undefined, optional
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
    """


    class?: str

    ingressClassName?: str

    ingressTemplate?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressIngressTemplate

    name?: str

    podTemplate?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplate

    serviceType?: str


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressIngressTemplate:
    r"""
    Optional ingress template used to configure the ACME challenge solver
    ingress used for HTTP01 challenges.

    Attributes
    ----------
    metadata : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressIngressTemplateMetadata, default is Undefined, optional
        metadata
    """


    metadata?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressIngressTemplateMetadata


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressIngressTemplateMetadata:
    r"""
    ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations that should be added to the created ACME HTTP01 solver ingress.
    labels : {str:str}, default is Undefined, optional
        Labels that should be added to the created ACME HTTP01 solver ingress.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplate:
    r"""
    Optional pod template used to configure the ACME challenge solver pods
    used for HTTP01 challenges.

    Attributes
    ----------
    metadata : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateMetadata, default is Undefined, optional
        metadata
    spec : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpec, default is Undefined, optional
        spec
    """


    metadata?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateMetadata

    spec?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpec


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateMetadata:
    r"""
    ObjectMeta overrides for the pod used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations that should be added to the create ACME HTTP01 solver pods.
    labels : {str:str}, default is Undefined, optional
        Labels that should be added to the created ACME HTTP01 solver pods.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpec:
    r"""
    PodSpec defines overrides for the HTTP01 challenge solver pod.
    Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
    All other fields will be ignored.

    Attributes
    ----------
    affinity : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity, default is Undefined, optional
        affinity
    imagePullSecrets : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsItems0], default is Undefined, optional
        If specified, the pod's imagePullSecrets
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    priorityClassName : str, default is Undefined, optional
        If specified, the pod's priorityClassName.
    serviceAccountName : str, default is Undefined, optional
        If specified, the pod's service account
    tolerations : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    """


    affinity?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity

    imagePullSecrets?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsItems0]

    nodeSelector?: {str:str}

    priorityClassName?: str

    serviceAccountName?: str

    tolerations?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsItems0]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity:
    r"""
    If specified, the pod's scheduling constraints

    Attributes
    ----------
    nodeAffinity : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity, default is Undefined, optional
        node affinity
    podAffinity : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity, default is Undefined, optional
        pod affinity
    podAntiAffinity : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity, default is Undefined, optional
        pod anti affinity
    """


    nodeAffinity?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity

    podAffinity?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity

    podAntiAffinity?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity:
    r"""
    Describes node affinity scheduling rules for the pod.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """


    preference: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]

    matchFields?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """


    nodeSelectorTerms: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]

    matchFields?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity:
    r"""
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """


    podAffinityTerm: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    namespaceSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """


    labelSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector

    matchLabelKeys?: [str]

    mismatchLabelKeys?: [str]

    namespaceSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector

    namespaces?: [str]

    topologyKey: str


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    namespaceSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """


    labelSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector

    matchLabelKeys?: [str]

    mismatchLabelKeys?: [str]

    namespaceSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector

    namespaces?: [str]

    topologyKey: str


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity:
    r"""
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """


    preferredDuringSchedulingIgnoredDuringExecution?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]

    requiredDuringSchedulingIgnoredDuringExecution?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """


    podAffinityTerm: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    namespaceSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """


    labelSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector

    matchLabelKeys?: [str]

    mismatchLabelKeys?: [str]

    namespaceSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector

    namespaces?: [str]

    topologyKey: str


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
    namespaceSelector : AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """


    labelSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector

    matchLabelKeys?: [str]

    mismatchLabelKeys?: [str]

    namespaceSelector?: AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector

    namespaces?: [str]

    topologyKey: str


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """


    key: str

    operator: str

    values?: [str]


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        TODO: Add other useful fields. apiVersion, kind, uid?
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
    """


    name?: str = ""


schema AcmeCertManagerIoV1ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """


    effect?: str

    key?: str

    operator?: str

    tolerationSeconds?: int

    value?: str


schema AcmeCertManagerIoV1ChallengeSpecSolverSelector:
    r"""
    Selector selects a set of DNSNames on the Certificate resource that
    should be solved using this challenge solver.
    If not specified, the solver will be treated as the 'default' solver
    with the lowest priority, i.e. if any other solver has a more specific
    match, it will be used instead.

    Attributes
    ----------
    dnsNames : [str], default is Undefined, optional
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
    dnsZones : [str], default is Undefined, optional
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
    matchLabels : {str:str}, default is Undefined, optional
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
    """


    dnsNames?: [str]

    dnsZones?: [str]

    matchLabels?: {str:str}


schema AcmeCertManagerIoV1ChallengeStatus:
    r"""
    acme cert manager io v1 challenge status

    Attributes
    ----------
    presented : bool, default is Undefined, optional
        presented will be set to true if the challenge values for this challenge
        are currently 'presented'.
        This *does not* imply the self check is passing. Only that the values
        have been 'submitted' for the appropriate challenge mechanism (i.e. the
        DNS01 TXT record has been presented, or the HTTP01 configuration has been
        configured).
    processing : bool, default is Undefined, optional
        Used to denote whether this challenge should be processed or not.
        This field will only be set to true by the 'scheduling' component.
        It will only be set to false by the 'challenges' controller, after the
        challenge has reached a final state or timed out.
        If this field is set to false, the challenge controller will not take
        any more action.
    reason : str, default is Undefined, optional
        Contains human readable information on why the Challenge is in the
        current state.
    state : str, default is Undefined, optional
        Contains the current 'state' of the challenge.
        If not set, the state of the challenge is unknown.
    """


    presented?: bool

    processing?: bool

    reason?: str

    state?: "valid" | "ready" | "pending" | "processing" | "invalid" | "expired" | "errored"


