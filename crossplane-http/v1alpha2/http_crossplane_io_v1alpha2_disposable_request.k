"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema DisposableRequest:
    r"""
    A DisposableRequest is an example API type.

    Attributes
    ----------
    apiVersion : str, default is "http.crossplane.io/v1alpha2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "DisposableRequest", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : HTTPCrossplaneIoV1alpha2DisposableRequestSpec, default is Undefined, required
        spec
    status : HTTPCrossplaneIoV1alpha2DisposableRequestStatus, default is Undefined, optional
        status
    """


    apiVersion: "http.crossplane.io/v1alpha2" = "http.crossplane.io/v1alpha2"

    kind: "DisposableRequest" = "DisposableRequest"

    metadata?: v1.ObjectMeta

    spec: HTTPCrossplaneIoV1alpha2DisposableRequestSpec

    status?: HTTPCrossplaneIoV1alpha2DisposableRequestStatus


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpec:
    r"""
    A DisposableRequestSpec defines the desired state of a DisposableRequest.

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProvider, default is Undefined, required
        for provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : HTTPCrossplaneIoV1alpha2DisposableRequestSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : HTTPCrossplaneIoV1alpha2DisposableRequestSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecProviderConfigRef

    publishConnectionDetailsTo?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecWriteConnectionSecretToRef


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProvider:
    r"""
    DisposableRequestParameters are the configurable fields of a DisposableRequest.

    Attributes
    ----------
    body : str, default is Undefined, optional
        body
    expectedResponse : str, default is Undefined, optional
        ExpectedResponse is a jq filter expression used to evaluate the HTTP response and determine if it matches the expected criteria.
        The expression should return a boolean; if true, the response is considered expected.
        Example: '.body.job_status == "success"'
    headers : {str:[str]}, default is Undefined, optional
        headers
    insecureSkipTLSVerify : bool, default is Undefined, optional
        InsecureSkipTLSVerify, when set to true, skips TLS certificate checks for the HTTP request
    method : str, default is Undefined, required
        method
    nextReconcile : str, default is Undefined, optional
        NextReconcile specifies the duration after which the next reconcile should occur.
    rollbackRetriesLimit : int, default is Undefined, optional
        RollbackRetriesLimit is max number of attempts to retry HTTP request by sending again the request.
    secretInjectionConfigs : [HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0], default is Undefined, optional
        SecretInjectionConfig specifies the secrets receiving patches from response data.
    shouldLoopInfinitely : bool, default is Undefined, optional
        ShouldLoopInfinitely specifies whether the reconciliation should loop indefinitely.
    url : str, default is Undefined, required
        url
    waitTimeout : str, default is Undefined, optional
        WaitTimeout specifies the maximum time duration for waiting.
    """


    body?: str

    expectedResponse?: str

    headers?: {str:[str]}

    insecureSkipTLSVerify?: bool

    method: str

    nextReconcile?: str

    rollbackRetriesLimit?: int

    secretInjectionConfigs?: [HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0]

    shouldLoopInfinitely?: bool

    url: str

    waitTimeout?: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0:
    r"""
    SecretInjectionConfig represents the configuration for injecting secret data into a Kubernetes secret.

    Attributes
    ----------
    keyMappings : [HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0KeyMappingsItems0], default is Undefined, optional
        KeyMappings allows injecting data into single or multiple keys within the same Kubernetes secret.
    metadata : HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0Metadata, default is Undefined, optional
        metadata
    responsePath : str, default is Undefined, optional
        ResponsePath is a jq filter expression representing the path in the response where the secret value will be extracted from.
        Deprecated: Use KeyMappings for injecting single or multiple keys.
    secretKey : str, default is Undefined, optional
        SecretKey is the key within the Kubernetes secret where the data will be injected.
        Deprecated: Use KeyMappings for injecting single or multiple keys.
    secretRef : HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0SecretRef, default is Undefined, required
        secret ref
    setOwnerReference : bool, default is Undefined, optional
        SetOwnerReference determines whether to set the owner reference on the Kubernetes secret.
    """


    keyMappings?: [HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0KeyMappingsItems0]

    metadata?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0Metadata

    responsePath?: str

    secretKey?: str

    secretRef: HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0SecretRef

    setOwnerReference?: bool


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0KeyMappingsItems0:
    r"""
    KeyInjection represents the configuration for injecting data into a specific key in a Kubernetes secret.

    Attributes
    ----------
    responseJQ : str, default is Undefined, required
        ResponseJQ is a jq filter expression representing the path in the response where the secret value will be extracted from.
    secretKey : str, default is Undefined, required
        SecretKey is the key within the Kubernetes secret where the data will be injected.
    """


    responseJQ: str

    secretKey: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0Metadata:
    r"""
    Metadata contains labels and annotations to apply to the Kubernetes secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations contains key-value pairs to apply as annotations to the Kubernetes secret.
    labels : {str:str}, default is Undefined, optional
        Labels contains key-value pairs to apply as labels to the Kubernetes secret.
    """


    annotations?: {str:str}

    labels?: {str:str}


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecForProviderSecretInjectionConfigsItems0SecretRef:
    r"""
    SecretRef contains the name and namespace of the Kubernetes secret where the data will be injected.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the Kubernetes secret.
    namespace : str, default is Undefined, required
        Namespace is the namespace of the Kubernetes secret.
    """


    name: str

    namespace: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : HTTPCrossplaneIoV1alpha2DisposableRequestSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecProviderConfigRefPolicy


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToConfigRef

    metadata?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToMetadata

    name: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToConfigRefPolicy


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestStatus:
    r"""
    A DisposableRequestStatus represents the observed state of a DisposableRequest.

    Attributes
    ----------
    conditions : [HTTPCrossplaneIoV1alpha2DisposableRequestStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    error : str, default is Undefined, optional
        error
    failed : int, default is Undefined, optional
        failed
    lastReconcileTime : str, default is Undefined, optional
        LastReconcileTime records the last time the resource was reconciled.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    requestDetails : HTTPCrossplaneIoV1alpha2DisposableRequestStatusRequestDetails, default is Undefined, optional
        request details
    response : HTTPCrossplaneIoV1alpha2DisposableRequestStatusResponse, default is Undefined, optional
        response
    synced : bool, default is Undefined, optional
        synced
    """


    conditions?: [HTTPCrossplaneIoV1alpha2DisposableRequestStatusConditionsItems0]

    error?: str

    failed?: int

    lastReconcileTime?: str

    observedGeneration?: int

    requestDetails?: HTTPCrossplaneIoV1alpha2DisposableRequestStatusRequestDetails

    response?: HTTPCrossplaneIoV1alpha2DisposableRequestStatusResponse

    synced?: bool


schema HTTPCrossplaneIoV1alpha2DisposableRequestStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestStatusRequestDetails:
    r"""
    HTTP crossplane io v1alpha2 disposable request status request details

    Attributes
    ----------
    body : str, default is Undefined, optional
        body
    headers : {str:[str]}, default is Undefined, optional
        headers
    method : str, default is Undefined, required
        method
    url : str, default is Undefined, required
        url
    """


    body?: str

    headers?: {str:[str]}

    method: str

    url: str


schema HTTPCrossplaneIoV1alpha2DisposableRequestStatusResponse:
    r"""
    HTTP crossplane io v1alpha2 disposable request status response

    Attributes
    ----------
    body : str, default is Undefined, optional
        body
    headers : {str:[str]}, default is Undefined, optional
        headers
    statusCode : int, default is Undefined, optional
        status code
    """


    body?: str

    headers?: {str:[str]}

    statusCode?: int


