"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema KeycloakClient:
    r"""
    KeycloakClient is the Schema for the keycloak clients API.

    Attributes
    ----------
    apiVersion : str, default is "v1.edp.epam.com/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "KeycloakClient", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : V1EdpEpamComV1KeycloakClientSpec, default is Undefined, optional
        spec
    status : V1EdpEpamComV1KeycloakClientStatus, default is Undefined, optional
        status
    """


    apiVersion: "v1.edp.epam.com/v1" = "v1.edp.epam.com/v1"

    kind: "KeycloakClient" = "KeycloakClient"

    metadata?: v1.ObjectMeta

    spec?: V1EdpEpamComV1KeycloakClientSpec

    status?: V1EdpEpamComV1KeycloakClientStatus


schema V1EdpEpamComV1KeycloakClientSpec:
    r"""
    KeycloakClientSpec defines the desired state of KeycloakClient.

    Attributes
    ----------
    advancedProtocolMappers : bool, default is Undefined, optional
        AdvancedProtocolMappers is a flag to enable advanced protocol mappers.
    attributes : {str:str}, default is {"post.logout.redirect.uris": "+"}, optional
        Attributes is a map of client attributes.
    authorization : V1EdpEpamComV1KeycloakClientSpecAuthorization, default is Undefined, optional
        authorization
    authorizationServicesEnabled : bool, default is Undefined, optional
        ServiceAccountsEnabled enable/disable fine-grained authorization support for a client.
    bearerOnly : bool, default is Undefined, optional
        BearerOnly is a flag to enable bearer-only.
    clientAuthenticatorType : str, default is "client-secret", optional
        ClientAuthenticatorType is a client authenticator type.
    clientId : str, default is Undefined, required
        ClientId is a unique keycloak client ID referenced in URI and tokens.
    clientRoles : [str], default is Undefined, optional
        ClientRoles is a list of client roles names assigned to client.
    consentRequired : bool, default is Undefined, optional
        ConsentRequired is a flag to enable consent.
    defaultClientScopes : [str], default is Undefined, optional
        DefaultClientScopes is a list of default client scopes assigned to client.
    description : str, default is Undefined, optional
        Description is a client description.
    directAccess : bool, default is Undefined, optional
        DirectAccess is a flag to set client as direct access.
    enabled : bool, default is True, optional
        Enabled is a flag to enable client.
    frontChannelLogout : bool, default is Undefined, optional
        FrontChannelLogout is a flag to enable front channel logout.
    fullScopeAllowed : bool, default is True, optional
        FullScopeAllowed is a flag to enable full scope.
    implicitFlowEnabled : bool, default is Undefined, optional
        ImplicitFlowEnabled is a flag to enable support for OpenID Connect redirect based authentication without authorization code.
    name : str, default is Undefined, optional
        Name is a client name.
    optionalClientScopes : [str], default is Undefined, optional
        OptionalClientScopes is a list of optional client scopes assigned to client.
    $protocol : str, default is Undefined, optional
        Protocol is a client protocol.
    protocolMappers : [V1EdpEpamComV1KeycloakClientSpecProtocolMappersItems0], default is Undefined, optional
        ProtocolMappers is a list of protocol mappers assigned to client.
    public : bool, default is Undefined, optional
        Public is a flag to set client as public.
    realmRef : V1EdpEpamComV1KeycloakClientSpecRealmRef, default is Undefined, optional
        realm ref
    realmRoles : [V1EdpEpamComV1KeycloakClientSpecRealmRolesItems0], default is Undefined, optional
        RealmRoles is a list of realm roles assigned to client.
    reconciliationStrategy : str, default is Undefined, optional
        ReconciliationStrategy is a strategy to reconcile client.
    redirectUris : [str], default is Undefined, optional
        RedirectUris is a list of valid URI pattern a browser can redirect to after a successful login.
        Simple wildcards are allowed such as 'https://example.com/*'.
        Relative path can be specified too, such as /my/relative/path/*. Relative paths are relative to the client root URL.
        If not specified, spec.webUrl + "/*" will be used.
    secret : str, default is Undefined, optional
        Secret is kubernetes secret name where the client's secret will be stored.
        Secret should have the following format: $secretName:secretKey.
        If not specified, a client secret will be generated and stored in a secret with the name keycloak-client-{metadata.name}-secret.
        If keycloak client is public, secret property will be ignored.
    serviceAccount : V1EdpEpamComV1KeycloakClientSpecServiceAccount, default is Undefined, optional
        service account
    standardFlowEnabled : bool, default is True, optional
        StandardFlowEnabled is a flag to enable standard flow.
    surrogateAuthRequired : bool, default is Undefined, optional
        SurrogateAuthRequired is a flag to enable surrogate auth.
    targetRealm : str, default is Undefined, optional
        Deprecated: use RealmRef instead.
        TargetRealm is a realm name where client will be created.
        It has higher priority than RealmRef for backward compatibility.
        If both TargetRealm and RealmRef are specified, TargetRealm will be used for client creation.
    webOrigins : [str], default is Undefined, optional
        WebOrigins is a list of allowed CORS origins.
        To permit all origins of Valid Redirect URIs, add '+'. This does not include the '*' wildcard though.
        To permit all origins, explicitly add '*'.
        If not specified, the value from `WebUrl` is used
    webUrl : str, default is Undefined, optional
        WebUrl is a client web url.
    """


    advancedProtocolMappers?: bool

    attributes?: {str:str} = {"post.logout.redirect.uris": "+"}

    authorization?: V1EdpEpamComV1KeycloakClientSpecAuthorization

    authorizationServicesEnabled?: bool

    bearerOnly?: bool

    clientAuthenticatorType?: str = "client-secret"

    clientId: str

    clientRoles?: [str]

    consentRequired?: bool

    defaultClientScopes?: [str]

    description?: str

    directAccess?: bool

    enabled?: bool = True

    frontChannelLogout?: bool

    fullScopeAllowed?: bool = True

    implicitFlowEnabled?: bool

    name?: str

    optionalClientScopes?: [str]

    $protocol?: str

    protocolMappers?: [V1EdpEpamComV1KeycloakClientSpecProtocolMappersItems0]

    public?: bool

    realmRef?: V1EdpEpamComV1KeycloakClientSpecRealmRef

    realmRoles?: [V1EdpEpamComV1KeycloakClientSpecRealmRolesItems0]

    reconciliationStrategy?: "full" | "addOnly"

    redirectUris?: [str]

    secret?: str

    serviceAccount?: V1EdpEpamComV1KeycloakClientSpecServiceAccount

    standardFlowEnabled?: bool = True

    surrogateAuthRequired?: bool

    targetRealm?: str

    webOrigins?: [str]

    webUrl?: str


schema V1EdpEpamComV1KeycloakClientSpecAuthorization:
    r"""
    Authorization is a client authorization configuration.

    Attributes
    ----------
    permissions : [V1EdpEpamComV1KeycloakClientSpecAuthorizationPermissionsItems0], default is Undefined, optional
        permissions
    policies : [V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0], default is Undefined, optional
        policies
    scopes : [str], default is Undefined, optional
        scopes
    """


    permissions?: [V1EdpEpamComV1KeycloakClientSpecAuthorizationPermissionsItems0]

    policies?: [V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0]

    scopes?: [str]


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPermissionsItems0:
    r"""
    v1 edp epam com v1 keycloak client spec authorization permissions items0

    Attributes
    ----------
    decisionStrategy : str, default is "UNANIMOUS", optional
        DecisionStrategy is a permission decision strategy.
    description : str, default is Undefined, optional
        Description is a permission description.
    logic : str, default is "POSITIVE", optional
        Logic is a permission logic.
    name : str, default is Undefined, required
        Name is a permission name.
    policies : [str], default is Undefined, optional
        Policies is a list of policies names.
        Specifies all the policies that must be applied to the scopes defined by this policy or permission.
    resources : [str], default is Undefined, optional
        Resources is a list of resources names.
        Specifies that this permission must be applied to all resource instances of a given type.
    scopes : [str], default is Undefined, optional
        Scopes is a list of authorization scopes names.
        Specifies that this permission must be applied to one or more scopes.
    $type : str, default is Undefined, required
        Type is a permission type.
    """


    decisionStrategy?: "UNANIMOUS" | "AFFIRMATIVE" | "CONSENSUS" = "UNANIMOUS"

    description?: str

    logic?: "POSITIVE" | "NEGATIVE" = "POSITIVE"

    name: str

    policies?: [str]

    resources?: [str]

    scopes?: [str]

    $type: "resource" | "scope"


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0:
    r"""
    Policy represents a client authorization policy.

    Attributes
    ----------
    aggregatedPolicy : V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0AggregatedPolicy, default is Undefined, optional
        aggregated policy
    clientPolicy : V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0ClientPolicy, default is Undefined, optional
        client policy
    decisionStrategy : str, default is "UNANIMOUS", optional
        DecisionStrategy is a policy decision strategy.
    description : str, default is Undefined, optional
        Description is a policy description.
    groupPolicy : V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0GroupPolicy, default is Undefined, optional
        group policy
    logic : str, default is "POSITIVE", optional
        Logic is a policy logic.
    name : str, default is Undefined, required
        Name is a policy name.
    rolePolicy : V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0RolePolicy, default is Undefined, optional
        role policy
    timePolicy : V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0TimePolicy, default is Undefined, optional
        time policy
    $type : str, default is Undefined, required
        Type is a policy type.
    userPolicy : V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0UserPolicy, default is Undefined, optional
        user policy
    """


    aggregatedPolicy?: V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0AggregatedPolicy

    clientPolicy?: V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0ClientPolicy

    decisionStrategy?: "UNANIMOUS" | "AFFIRMATIVE" | "CONSENSUS" = "UNANIMOUS"

    description?: str

    groupPolicy?: V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0GroupPolicy

    logic?: "POSITIVE" | "NEGATIVE" = "POSITIVE"

    name: str

    rolePolicy?: V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0RolePolicy

    timePolicy?: V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0TimePolicy

    $type: "aggregate" | "client" | "group" | "role" | "time" | "user"

    userPolicy?: V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0UserPolicy


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0AggregatedPolicy:
    r"""
    AggregatedPolicy is an aggregated policy settings.

    Attributes
    ----------
    policies : [str], default is Undefined, required
        Policies is a list of aggregated policies names.
        Specifies all the policies that must be applied to the scopes defined by this policy or permission.
    """


    policies: [str]


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0ClientPolicy:
    r"""
    ClientPolicy is a client policy settings.

    Attributes
    ----------
    clients : [str], default is Undefined, required
        Clients is a list of client names. Specifies which client(s) are allowed by this policy.
    """


    clients: [str]


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0GroupPolicy:
    r"""
    GroupPolicy is a group policy settings.

    Attributes
    ----------
    groups : [V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0GroupPolicyGroupsItems0], default is Undefined, optional
        Groups is a list of group names. Specifies which group(s) are allowed by this policy.
    groupsClaim : str, default is Undefined, optional
        GroupsClaim is a group claim.
        If defined, the policy will fetch user's groups from the given claim
        within an access token or ID token representing the identity asking permissions.
        If not defined, user's groups are obtained from your realm configuration.
    """


    groups?: [V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0GroupPolicyGroupsItems0]

    groupsClaim?: str


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0GroupPolicyGroupsItems0:
    r"""
    GroupDefinition represents a group in a GroupPolicyData.

    Attributes
    ----------
    extendChildren : bool, default is Undefined, optional
        ExtendChildren is a flag that specifies whether to extend children.
    name : str, default is Undefined, required
        Name is a group name.
    """


    extendChildren?: bool

    name: str


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0RolePolicy:
    r"""
    RolePolicy is a role policy settings.

    Attributes
    ----------
    roles : [V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0RolePolicyRolesItems0], default is Undefined, required
        Roles is a list of role.
    """


    roles: [V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0RolePolicyRolesItems0]


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0RolePolicyRolesItems0:
    r"""
    RoleDefinition represents a role in a RolePolicyData.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is a role name.
    required : bool, default is Undefined, optional
        Required is a flag that specifies whether the role is required.
    """


    name: str

    required?: bool


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0TimePolicy:
    r"""
    ScopePolicy is a scope policy settings.

    Attributes
    ----------
    dayMonth : str, default is Undefined, optional
        Day defines the month which the policy MUST be granted.
        You can also provide a range by filling the dayMonthEnd field.
        In this case, permission is granted only if current month is between or equal to the two values you provided.
    dayMonthEnd : str, default is Undefined, optional
        day month end
    hour : str, default is Undefined, optional
        Hour defines the hour when the policy MUST be granted.
        You can also provide a range by filling the hourEnd.
        In this case, permission is granted only if current hour is between or equal to the two values you provided.
    hourEnd : str, default is Undefined, optional
        hour end
    minute : str, default is Undefined, optional
        Minute defines the minute when the policy MUST be granted.
        You can also provide a range by filling the minuteEnd field.
        In this case, permission is granted only if current minute is between or equal to the two values you provided.
    minuteEnd : str, default is Undefined, optional
        minute end
    month : str, default is Undefined, optional
        Month defines the month which the policy MUST be granted.
        You can also provide a range by filling the monthEnd.
        In this case, permission is granted only if current month is between or equal to the two values you provided.
    monthEnd : str, default is Undefined, optional
        month end
    notBefore : str, default is Undefined, required
        NotBefore defines the time before which the policy MUST NOT be granted.
        Only granted if current date/time is after or equal to this value.
    notOnOrAfter : str, default is Undefined, required
        NotOnOrAfter defines the time after which the policy MUST NOT be granted.
        Only granted if current date/time is before or equal to this value.
    """


    dayMonth?: str

    dayMonthEnd?: str

    hour?: str

    hourEnd?: str

    minute?: str

    minuteEnd?: str

    month?: str

    monthEnd?: str

    notBefore: str

    notOnOrAfter: str


schema V1EdpEpamComV1KeycloakClientSpecAuthorizationPoliciesItems0UserPolicy:
    r"""
    UserPolicy is a user policy settings.

    Attributes
    ----------
    users : [str], default is Undefined, required
        Users is a list of usernames. Specifies which user(s) are allowed by this policy.
    """


    users: [str]


schema V1EdpEpamComV1KeycloakClientSpecProtocolMappersItems0:
    r"""
    v1 edp epam com v1 keycloak client spec protocol mappers items0

    Attributes
    ----------
    config : {str:str}, default is Undefined, optional
        Config is a map of protocol mapper configuration.
    name : str, default is Undefined, optional
        Name is a protocol mapper name.
    $protocol : str, default is Undefined, optional
        Protocol is a protocol name.
    protocolMapper : str, default is Undefined, optional
        ProtocolMapper is a protocol mapper name.
    """


    config?: {str:str}

    name?: str

    $protocol?: str

    protocolMapper?: str


schema V1EdpEpamComV1KeycloakClientSpecRealmRef:
    r"""
    RealmRef is reference to Realm custom resource.

    Attributes
    ----------
    kind : str, default is Undefined, optional
        Kind specifies the kind of the Keycloak resource.
    name : str, default is Undefined, optional
        Name specifies the name of the Keycloak resource.
    """


    kind?: "KeycloakRealm" | "ClusterKeycloakRealm"

    name?: str


schema V1EdpEpamComV1KeycloakClientSpecRealmRolesItems0:
    r"""
    v1 edp epam com v1 keycloak client spec realm roles items0

    Attributes
    ----------
    composite : str, default is Undefined, required
        Composite is a realm composite role name.
    name : str, default is Undefined, optional
        Name is a realm role name.
    """


    composite: str

    name?: str


schema V1EdpEpamComV1KeycloakClientSpecServiceAccount:
    r"""
    ServiceAccount is a service account configuration.

    Attributes
    ----------
    attributes : {str:str}, default is Undefined, optional
        Attributes is a map of service account attributes.
    clientRoles : [V1EdpEpamComV1KeycloakClientSpecServiceAccountClientRolesItems0], default is Undefined, optional
        ClientRoles is a list of client roles assigned to service account.
    enabled : bool, default is Undefined, optional
        Enabled is a flag to enable service account.
    realmRoles : [str], default is Undefined, optional
        RealmRoles is a list of realm roles assigned to service account.
    """


    attributes?: {str:str}

    clientRoles?: [V1EdpEpamComV1KeycloakClientSpecServiceAccountClientRolesItems0]

    enabled?: bool

    realmRoles?: [str]


schema V1EdpEpamComV1KeycloakClientSpecServiceAccountClientRolesItems0:
    r"""
    v1 edp epam com v1 keycloak client spec service account client roles items0

    Attributes
    ----------
    clientId : str, default is Undefined, required
        ClientID is a client ID.
    roles : [str], default is Undefined, optional
        Roles is a list of client roles names assigned to service account.
    """


    clientId: str

    roles?: [str]


schema V1EdpEpamComV1KeycloakClientStatus:
    r"""
    KeycloakClientStatus defines the observed state of KeycloakClient.

    Attributes
    ----------
    clientId : str, default is Undefined, optional
        client Id
    failureCount : int, default is Undefined, optional
        failure count
    value : str, default is Undefined, optional
        value
    """


    clientId?: str

    failureCount?: int

    value?: str


